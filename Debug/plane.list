
plane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b0  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b784  0800b784  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800b784  0800b784  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b784  0800b784  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b784  0800b784  0001b784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b788  0800b788  0001b788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b78c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d74  20000070  0800b7fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000de4  0800b7fc  00020de4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae96  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000205c  00000000  00000000  0002af2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016548  00000000  00000000  0002e098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bd6  00000000  00000000  000445e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079ac3  00000000  00000000  0004e1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7c79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  000c7cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08009ebc 	.word	0x08009ebc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08009ebc 	.word	0x08009ebc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f945 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f008 fc36 	bl	8009290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f95d 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f925 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	2000009c 	.word	0x2000009c

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	2000009c 	.word	0x2000009c

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <__NVIC_EnableIRQ+0x34>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff90 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff2d 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff42 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff35 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d005      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e0d6      	b.n	8000ef8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 020e 	bic.w	r2, r2, #14
 8000d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <HAL_DMA_Abort_IT+0x1dc>)
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d958      	bls.n	8000e28 <HAL_DMA_Abort_IT+0x100>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_DMA_Abort_IT+0x1e0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d04f      	beq.n	8000e20 <HAL_DMA_Abort_IT+0xf8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a61      	ldr	r2, [pc, #388]	; (8000f0c <HAL_DMA_Abort_IT+0x1e4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d048      	beq.n	8000e1c <HAL_DMA_Abort_IT+0xf4>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <HAL_DMA_Abort_IT+0x1e8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d040      	beq.n	8000e16 <HAL_DMA_Abort_IT+0xee>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <HAL_DMA_Abort_IT+0x1ec>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d038      	beq.n	8000e10 <HAL_DMA_Abort_IT+0xe8>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a5d      	ldr	r2, [pc, #372]	; (8000f18 <HAL_DMA_Abort_IT+0x1f0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d030      	beq.n	8000e0a <HAL_DMA_Abort_IT+0xe2>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a5b      	ldr	r2, [pc, #364]	; (8000f1c <HAL_DMA_Abort_IT+0x1f4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d028      	beq.n	8000e04 <HAL_DMA_Abort_IT+0xdc>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a53      	ldr	r2, [pc, #332]	; (8000f04 <HAL_DMA_Abort_IT+0x1dc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d020      	beq.n	8000dfe <HAL_DMA_Abort_IT+0xd6>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a57      	ldr	r2, [pc, #348]	; (8000f20 <HAL_DMA_Abort_IT+0x1f8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_DMA_Abort_IT+0xd2>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a56      	ldr	r2, [pc, #344]	; (8000f24 <HAL_DMA_Abort_IT+0x1fc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d012      	beq.n	8000df6 <HAL_DMA_Abort_IT+0xce>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a54      	ldr	r2, [pc, #336]	; (8000f28 <HAL_DMA_Abort_IT+0x200>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00a      	beq.n	8000df0 <HAL_DMA_Abort_IT+0xc8>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a53      	ldr	r2, [pc, #332]	; (8000f2c <HAL_DMA_Abort_IT+0x204>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <HAL_DMA_Abort_IT+0xc2>
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	e01b      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	e018      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df4:	e015      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000df6:	2310      	movs	r3, #16
 8000df8:	e013      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e011      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e02:	e00e      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e08:	e00b      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0e:	e008      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	e005      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1a:	e002      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	e000      	b.n	8000e22 <HAL_DMA_Abort_IT+0xfa>
 8000e20:	2301      	movs	r3, #1
 8000e22:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <HAL_DMA_Abort_IT+0x208>)
 8000e24:	6053      	str	r3, [r2, #4]
 8000e26:	e057      	b.n	8000ed8 <HAL_DMA_Abort_IT+0x1b0>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a36      	ldr	r2, [pc, #216]	; (8000f08 <HAL_DMA_Abort_IT+0x1e0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d04f      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x1aa>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a35      	ldr	r2, [pc, #212]	; (8000f0c <HAL_DMA_Abort_IT+0x1e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d048      	beq.n	8000ece <HAL_DMA_Abort_IT+0x1a6>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a33      	ldr	r2, [pc, #204]	; (8000f10 <HAL_DMA_Abort_IT+0x1e8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d040      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x1a0>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_DMA_Abort_IT+0x1ec>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d038      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x19a>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <HAL_DMA_Abort_IT+0x1f0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d030      	beq.n	8000ebc <HAL_DMA_Abort_IT+0x194>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <HAL_DMA_Abort_IT+0x1f4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d028      	beq.n	8000eb6 <HAL_DMA_Abort_IT+0x18e>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <HAL_DMA_Abort_IT+0x1dc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d020      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x188>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <HAL_DMA_Abort_IT+0x1f8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d019      	beq.n	8000eac <HAL_DMA_Abort_IT+0x184>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <HAL_DMA_Abort_IT+0x1fc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d012      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0x180>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <HAL_DMA_Abort_IT+0x200>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00a      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x17a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HAL_DMA_Abort_IT+0x204>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d102      	bne.n	8000e9c <HAL_DMA_Abort_IT+0x174>
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	e01b      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	e018      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea6:	e015      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	e013      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e011      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb4:	e00e      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000eb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eba:	e00b      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec0:	e008      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	e005      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ecc:	e002      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ece:	2310      	movs	r3, #16
 8000ed0:	e000      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x1ac>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_DMA_Abort_IT+0x20c>)
 8000ed6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	4798      	blx	r3
    } 
  }
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020080 	.word	0x40020080
 8000f08:	40020008 	.word	0x40020008
 8000f0c:	4002001c 	.word	0x4002001c
 8000f10:	40020030 	.word	0x40020030
 8000f14:	40020044 	.word	0x40020044
 8000f18:	40020058 	.word	0x40020058
 8000f1c:	4002006c 	.word	0x4002006c
 8000f20:	40020408 	.word	0x40020408
 8000f24:	4002041c 	.word	0x4002041c
 8000f28:	40020430 	.word	0x40020430
 8000f2c:	40020444 	.word	0x40020444
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e133      	b.n	80011b4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8122 	bne.w	80011ae <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b12      	cmp	r3, #18
 8000f70:	d034      	beq.n	8000fdc <HAL_GPIO_Init+0xa4>
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d80d      	bhi.n	8000f92 <HAL_GPIO_Init+0x5a>
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x9a>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d804      	bhi.n	8000f88 <HAL_GPIO_Init+0x50>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d031      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d01c      	beq.n	8000fc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f86:	e048      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d043      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
 8000f8c:	2b11      	cmp	r3, #17
 8000f8e:	d01b      	beq.n	8000fc8 <HAL_GPIO_Init+0x90>
          break;
 8000f90:	e043      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f92:	4a8f      	ldr	r2, [pc, #572]	; (80011d0 <HAL_GPIO_Init+0x298>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d026      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000f98:	4a8d      	ldr	r2, [pc, #564]	; (80011d0 <HAL_GPIO_Init+0x298>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d806      	bhi.n	8000fac <HAL_GPIO_Init+0x74>
 8000f9e:	4a8d      	ldr	r2, [pc, #564]	; (80011d4 <HAL_GPIO_Init+0x29c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d020      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fa4:	4a8c      	ldr	r2, [pc, #560]	; (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01d      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
          break;
 8000faa:	e036      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fac:	4a8b      	ldr	r2, [pc, #556]	; (80011dc <HAL_GPIO_Init+0x2a4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fb2:	4a8b      	ldr	r2, [pc, #556]	; (80011e0 <HAL_GPIO_Init+0x2a8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d016      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fb8:	4a8a      	ldr	r2, [pc, #552]	; (80011e4 <HAL_GPIO_Init+0x2ac>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e028      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e023      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01e      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e019      	b.n	800101a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e012      	b.n	800101a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e008      	b.n	800101a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2bff      	cmp	r3, #255	; 0xff
 800101e:	d801      	bhi.n	8001024 <HAL_GPIO_Init+0xec>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e001      	b.n	8001028 <HAL_GPIO_Init+0xf0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3304      	adds	r3, #4
 8001028:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d802      	bhi.n	8001036 <HAL_GPIO_Init+0xfe>
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x104>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3b08      	subs	r3, #8
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	210f      	movs	r1, #15
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	6a39      	ldr	r1, [r7, #32]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	431a      	orrs	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001082:	4a5a      	ldr	r2, [pc, #360]	; (80011ec <HAL_GPIO_Init+0x2b4>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x1b6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_GPIO_Init+0x2bc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x1b2>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x1ae>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <HAL_GPIO_Init+0x2c4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x1aa>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x2c8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x1a6>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x2cc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x1a2>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x1b8>
 80010da:	2306      	movs	r3, #6
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x1b8>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x1b8>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x1b8>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x1b8>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x1b8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001100:	493a      	ldr	r1, [pc, #232]	; (80011ec <HAL_GPIO_Init+0x2b4>)
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	493a      	ldr	r1, [pc, #232]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001128:	4b37      	ldr	r3, [pc, #220]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	43db      	mvns	r3, r3
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4930      	ldr	r1, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	43db      	mvns	r3, r3
 8001158:	492b      	ldr	r1, [pc, #172]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800115a:	4013      	ands	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	4926      	ldr	r1, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	4921      	ldr	r1, [pc, #132]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001182:	4013      	ands	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	491c      	ldr	r1, [pc, #112]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	60cb      	str	r3, [r1, #12]
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <HAL_GPIO_Init+0x2d0>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	3301      	adds	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f aec4 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
  }
}
 80011c4:	bf00      	nop
 80011c6:	372c      	adds	r7, #44	; 0x2c
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	10210000 	.word	0x10210000
 80011d4:	10110000 	.word	0x10110000
 80011d8:	10120000 	.word	0x10120000
 80011dc:	10310000 	.word	0x10310000
 80011e0:	10320000 	.word	0x10320000
 80011e4:	10220000 	.word	0x10220000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40011800 	.word	0x40011800
 8001204:	40011c00 	.word	0x40011c00
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124a:	787b      	ldrb	r3, [r7, #1]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001256:	e003      	b.n	8001260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	611a      	str	r2, [r3, #16]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f806 	bl	80012cc <HAL_GPIO_EXTI_Callback>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e26c      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x12c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e246      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x76>
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xbc>
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb7a 	bl	8000ab4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fb76 	bl	8000ab4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1fa      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe4>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb66 	bl	8000ab4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fb62 	bl	8000ab4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1e6      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x10c>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1ba      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb1b 	bl	8000ab4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fb17 	bl	8000ab4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e19b      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fafa 	bl	8000ab4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff faf6 	bl	8000ab4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e17a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03a      	beq.n	8001564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fada 	bl	8000ab4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fad6 	bl	8000ab4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e15a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 fada 	bl	8001adc <RCC_Delay>
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fac0 	bl	8000ab4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fabc 	bl	8000ab4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e140      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a93      	ldr	r2, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a8a      	ldr	r2, [pc, #552]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa7d 	bl	8000ab4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff fa79 	bl	8000ab4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0fd      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015e4:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x334>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x356>
 800161c:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fa2d 	bl	8000ab4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fa29 	bl	8000ab4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0ab      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x37e>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fa17 	bl	8000ab4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fa13 	bl	8000ab4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e095      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8081 	beq.w	80017ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d061      	beq.n	8001798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d146      	bne.n	800176a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff f9e7 	bl	8000ab4 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff f9e3 	bl	8000ab4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e067      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	492d      	ldr	r1, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a19      	ldr	r1, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	430b      	orrs	r3, r1
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f9b7 	bl	8000ab4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f9b3 	bl	8000ab4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e037      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
 8001768:	e02f      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff f9a0 	bl	8000ab4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f99c 	bl	8000ab4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e020      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x498>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e013      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060

080017e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0d0      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4965      	ldr	r1, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d040      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e073      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4936      	ldr	r1, [pc, #216]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f8f0 	bl	8000ab4 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f8ec 	bl	8000ab4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e053      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d210      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4601      	mov	r1, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	fa21 f303 	lsr.w	r3, r1, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1cc>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f84e 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	0800b738 	.word	0x0800b738
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b490      	push	{r4, r7}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019bc:	1d3c      	adds	r4, r7, #4
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x46>
 80019f2:	e02d      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f6:	623b      	str	r3, [r7, #32]
      break;
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a06:	4413      	add	r3, r2
 8001a08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c5b      	lsrs	r3, r3, #17
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a26:	4413      	add	r3, r2
 8001a28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a32:	fb02 f203 	mul.w	r2, r2, r3
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e004      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	623b      	str	r3, [r7, #32]
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a52:	623b      	str	r3, [r7, #32]
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc90      	pop	{r4, r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08009ed4 	.word	0x08009ed4
 8001a68:	08009ee4 	.word	0x08009ee4
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	007a1200 	.word	0x007a1200
 8001a74:	003d0900 	.word	0x003d0900

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a90:	f7ff fff2 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a94:	4601      	mov	r1, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	0800b748 	.word	0x0800b748

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001abc:	4601      	mov	r1, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	0800b748 	.word	0x0800b748

08001adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <RCC_Delay+0x34>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <RCC_Delay+0x38>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0a5b      	lsrs	r3, r3, #9
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af8:	bf00      	nop
  }
  while (Delay --);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	60fa      	str	r2, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f9      	bne.n	8001af8 <RCC_Delay+0x1c>
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e03f      	b.n	8001baa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f007 fcae 	bl	80094a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	; 0x24
 8001b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fa5f 	bl	8002020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f98d 	bl	8001f1e <UART_Receive_IT>
      return;
 8001c04:	e0cc      	b.n	8001da0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80ab 	beq.w	8001d64 <HAL_UART_IRQHandler+0x1b0>
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_UART_IRQHandler+0x70>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a0 	beq.w	8001d64 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_UART_IRQHandler+0x90>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_UART_IRQHandler+0xb0>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_UART_IRQHandler+0xd0>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	f043 0204 	orr.w	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xf0>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	f043 0208 	orr.w	r2, r3, #8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d078      	beq.n	8001d9e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x112>
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f92c 	bl	8001f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf14      	ite	ne
 8001cd4:	2301      	movne	r3, #1
 8001cd6:	2300      	moveq	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <HAL_UART_IRQHandler+0x13a>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d031      	beq.n	8001d52 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f877 	bl	8001de2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d023      	beq.n	8001d4a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d013      	beq.n	8001d42 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <HAL_UART_IRQHandler+0x1f4>)
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fffe 	bl	8000d28 <HAL_DMA_Abort_IT>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d016      	beq.n	8001d60 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d40:	e00e      	b.n	8001d60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f844 	bl	8001dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d48:	e00a      	b.n	8001d60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f840 	bl	8001dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d50:	e006      	b.n	8001d60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f83c 	bl	8001dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d5e:	e01e      	b.n	8001d9e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d60:	bf00      	nop
    return;
 8001d62:	e01c      	b.n	8001d9e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_UART_IRQHandler+0x1cc>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f863 	bl	8001e44 <UART_Transmit_IT>
    return;
 8001d7e:	e00f      	b.n	8001da0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_UART_IRQHandler+0x1ec>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f8aa 	bl	8001eee <UART_EndTransmit_IT>
    return;
 8001d9a:	bf00      	nop
 8001d9c:	e000      	b.n	8001da0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001d9e:	bf00      	nop
  }
}
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08001e1d 	.word	0x08001e1d

08001dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001df8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff ffca 	bl	8001dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b21      	cmp	r3, #33	; 0x21
 8001e56:	d144      	bne.n	8001ee2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e60:	d11a      	bne.n	8001e98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	1c9a      	adds	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	621a      	str	r2, [r3, #32]
 8001e8a:	e00e      	b.n	8001eaa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	621a      	str	r2, [r3, #32]
 8001e96:	e008      	b.n	8001eaa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	1c59      	adds	r1, r3, #1
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6211      	str	r1, [r2, #32]
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ff4c 	bl	8001dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b22      	cmp	r3, #34	; 0x22
 8001f30:	d171      	bne.n	8002016 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3a:	d123      	bne.n	8001f84 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10e      	bne.n	8001f68 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	1c9a      	adds	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
 8001f66:	e029      	b.n	8001fbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
 8001f82:	e01b      	b.n	8001fbc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6858      	ldr	r0, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6291      	str	r1, [r2, #40]	; 0x28
 8001f9c:	b2c2      	uxtb	r2, r0
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e00c      	b.n	8001fbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	1c58      	adds	r0, r3, #1
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	6288      	str	r0, [r1, #40]	; 0x28
 8001fb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d120      	bne.n	8002012 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0220 	bic.w	r2, r2, #32
 8001fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fed8 	bl	8001dbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e002      	b.n	8002018 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800205a:	f023 030c 	bic.w	r3, r3, #12
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a52      	ldr	r2, [pc, #328]	; (80021cc <UART_SetConfig+0x1ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d14e      	bne.n	8002126 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002088:	f7ff fd14 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 800208c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009a      	lsls	r2, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	0119      	lsls	r1, r3, #4
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009a      	lsls	r2, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020c6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2064      	movs	r0, #100	; 0x64
 80020ce:	fb00 f303 	mul.w	r3, r0, r3
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	3332      	adds	r3, #50	; 0x32
 80020d8:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	4419      	add	r1, r3
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020fc:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2064      	movs	r0, #100	; 0x64
 8002106:	fb00 f303 	mul.w	r3, r0, r3
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	3332      	adds	r3, #50	; 0x32
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	440a      	add	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002124:	e04d      	b.n	80021c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002126:	f7ff fcb1 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 800212a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	441a      	add	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	0119      	lsls	r1, r3, #4
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009a      	lsls	r2, r3, #2
 8002156:	441a      	add	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002164:	fba3 0302 	umull	r0, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	2064      	movs	r0, #100	; 0x64
 800216c:	fb00 f303 	mul.w	r3, r0, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	3332      	adds	r3, #50	; 0x32
 8002176:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002182:	4419      	add	r1, r3
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	441a      	add	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fbb2 f2f3 	udiv	r2, r2, r3
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <UART_SetConfig+0x1b0>)
 800219c:	fba3 0302 	umull	r0, r3, r3, r2
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	2064      	movs	r0, #100	; 0x64
 80021a4:	fb00 f303 	mul.w	r3, r0, r3
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	3332      	adds	r3, #50	; 0x32
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <UART_SetConfig+0x1b0>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	440a      	add	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40013800 	.word	0x40013800
 80021d0:	51eb851f 	.word	0x51eb851f

080021d4 <draw_start_page>:
#include "draw.h"

// Initialize welcome stage
void draw_start_page(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af02      	add	r7, sp, #8
	Element_DrawSelfPlane(80, 80);
 80021da:	2150      	movs	r1, #80	; 0x50
 80021dc:	2050      	movs	r0, #80	; 0x50
 80021de:	f006 fb1f 	bl	8008820 <Element_DrawSelfPlane>
	Element_DrawSelfPlane(120, 80);
 80021e2:	2150      	movs	r1, #80	; 0x50
 80021e4:	2078      	movs	r0, #120	; 0x78
 80021e6:	f006 fb1b 	bl	8008820 <Element_DrawSelfPlane>
	Element_DrawSelfPlane(160, 80);
 80021ea:	2150      	movs	r1, #80	; 0x50
 80021ec:	20a0      	movs	r0, #160	; 0xa0
 80021ee:	f006 fb17 	bl	8008820 <Element_DrawSelfPlane>

	LCD_ShowString(75, 140, 190, 24, 24, "Aircraft");
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <draw_start_page+0x60>)
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2318      	movs	r3, #24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2318      	movs	r3, #24
 80021fc:	22be      	movs	r2, #190	; 0xbe
 80021fe:	218c      	movs	r1, #140	; 0x8c
 8002200:	204b      	movs	r0, #75	; 0x4b
 8002202:	f006 f837 	bl	8008274 <LCD_ShowString>
	LCD_ShowString(85, 180, 190, 24, 24, "Battle");
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <draw_start_page+0x64>)
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2318      	movs	r3, #24
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2318      	movs	r3, #24
 8002210:	22be      	movs	r2, #190	; 0xbe
 8002212:	21b4      	movs	r1, #180	; 0xb4
 8002214:	2055      	movs	r0, #85	; 0x55
 8002216:	f006 f82d 	bl	8008274 <LCD_ShowString>

	LCD_ShowString(65, 255, 200, 12, 12, "Press KEY0 to start");
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <draw_start_page+0x68>)
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	230c      	movs	r3, #12
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	230c      	movs	r3, #12
 8002224:	22c8      	movs	r2, #200	; 0xc8
 8002226:	21ff      	movs	r1, #255	; 0xff
 8002228:	2041      	movs	r0, #65	; 0x41
 800222a:	f006 f823 	bl	8008274 <LCD_ShowString>
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	08009ee8 	.word	0x08009ee8
 8002238:	08009ef4 	.word	0x08009ef4
 800223c:	08009efc 	.word	0x08009efc

08002240 <init_play_interface>:

// Basic gaming scene
void init_play_interface(void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af02      	add	r7, sp, #8
	LCD_DrawRectangle(1, 1, 238, 40);
 8002246:	2328      	movs	r3, #40	; 0x28
 8002248:	22ee      	movs	r2, #238	; 0xee
 800224a:	2101      	movs	r1, #1
 800224c:	2001      	movs	r0, #1
 800224e:	f005 fe82 	bl	8007f56 <LCD_DrawRectangle>

	LCD_DrawLine(130, 1, 130, 40);
 8002252:	2328      	movs	r3, #40	; 0x28
 8002254:	2282      	movs	r2, #130	; 0x82
 8002256:	2101      	movs	r1, #1
 8002258:	2082      	movs	r0, #130	; 0x82
 800225a:	f005 fdf9 	bl	8007e50 <LCD_DrawLine>

	LCD_ShowString(5, 8, 90, 24, 24, "Score");
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <init_play_interface+0x4c>)
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	2318      	movs	r3, #24
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2318      	movs	r3, #24
 8002268:	225a      	movs	r2, #90	; 0x5a
 800226a:	2108      	movs	r1, #8
 800226c:	2005      	movs	r0, #5
 800226e:	f006 f801 	bl	8008274 <LCD_ShowString>
	LCD_ShowString(135, 8, 90, 24, 24, "Life");
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <init_play_interface+0x50>)
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	2318      	movs	r3, #24
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2318      	movs	r3, #24
 800227c:	225a      	movs	r2, #90	; 0x5a
 800227e:	2108      	movs	r1, #8
 8002280:	2087      	movs	r0, #135	; 0x87
 8002282:	f005 fff7 	bl	8008274 <LCD_ShowString>
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	08009f10 	.word	0x08009f10
 8002290:	08009f18 	.word	0x08009f18

08002294 <draw_stage_init>:

// Init three stages
void draw_stage_init(int stage) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
	LCD_Clear(WHITE);
 800229c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022a0:	f005 fce8 	bl	8007c74 <LCD_Clear>

	uint8_t stgX[8];
	snprintf(stgX, 8, "Stage %d", stage);
 80022a4:	f107 000c 	add.w	r0, r7, #12
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <draw_stage_init+0x78>)
 80022ac:	2108      	movs	r1, #8
 80022ae:	f007 f9d7 	bl	8009660 <sniprintf>
	uint8_t *p_stgX = stgX;
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	617b      	str	r3, [r7, #20]

	LCD_ShowString(75, 120, 190, 24, 24, p_stgX);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2318      	movs	r3, #24
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2318      	movs	r3, #24
 80022c2:	22be      	movs	r2, #190	; 0xbe
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	204b      	movs	r0, #75	; 0x4b
 80022c8:	f005 ffd4 	bl	8008274 <LCD_ShowString>

	Element_DrawStar(200, 300);
 80022cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80022d0:	20c8      	movs	r0, #200	; 0xc8
 80022d2:	f006 fbc2 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(20, 130);
 80022d6:	2182      	movs	r1, #130	; 0x82
 80022d8:	2014      	movs	r0, #20
 80022da:	f006 fbbe 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(50, 230);
 80022de:	21e6      	movs	r1, #230	; 0xe6
 80022e0:	2032      	movs	r0, #50	; 0x32
 80022e2:	f006 fbba 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(80, 30);
 80022e6:	211e      	movs	r1, #30
 80022e8:	2050      	movs	r0, #80	; 0x50
 80022ea:	f006 fbb6 	bl	8008a5a <Element_DrawStar>
	LCD_ShowString(70, 260, 200, 12, 12, "Now loading...");
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <draw_stage_init+0x7c>)
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	230c      	movs	r3, #12
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	230c      	movs	r3, #12
 80022f8:	22c8      	movs	r2, #200	; 0xc8
 80022fa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80022fe:	2046      	movs	r0, #70	; 0x46
 8002300:	f005 ffb8 	bl	8008274 <LCD_ShowString>

}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	08009f20 	.word	0x08009f20
 8002310:	08009f2c 	.word	0x08009f2c

08002314 <draw_stage_clear>:

//Clear three stages
void draw_stage_clear(int stage) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	6078      	str	r0, [r7, #4]
	LCD_Clear(WHITE);
 800231c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002320:	f005 fca8 	bl	8007c74 <LCD_Clear>

	uint8_t stgX[8];
	snprintf(stgX, 8, "Stage %d", stage);
 8002324:	f107 000c 	add.w	r0, r7, #12
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <draw_stage_clear+0x8c>)
 800232c:	2108      	movs	r1, #8
 800232e:	f007 f997 	bl	8009660 <sniprintf>
	uint8_t *p_stgX = stgX;
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	617b      	str	r3, [r7, #20]

	LCD_ShowString(75, 100, 190, 24, 24, p_stgX);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2318      	movs	r3, #24
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2318      	movs	r3, #24
 8002342:	22be      	movs	r2, #190	; 0xbe
 8002344:	2164      	movs	r1, #100	; 0x64
 8002346:	204b      	movs	r0, #75	; 0x4b
 8002348:	f005 ff94 	bl	8008274 <LCD_ShowString>
	LCD_ShowString(85, 140, 190, 24, 24, "Clear");
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <draw_stage_clear+0x90>)
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	2318      	movs	r3, #24
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2318      	movs	r3, #24
 8002356:	22be      	movs	r2, #190	; 0xbe
 8002358:	218c      	movs	r1, #140	; 0x8c
 800235a:	2055      	movs	r0, #85	; 0x55
 800235c:	f005 ff8a 	bl	8008274 <LCD_ShowString>

	Element_DrawStar(200, 300);
 8002360:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002364:	20c8      	movs	r0, #200	; 0xc8
 8002366:	f006 fb78 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(20, 130);
 800236a:	2182      	movs	r1, #130	; 0x82
 800236c:	2014      	movs	r0, #20
 800236e:	f006 fb74 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(50, 230);
 8002372:	21e6      	movs	r1, #230	; 0xe6
 8002374:	2032      	movs	r0, #50	; 0x32
 8002376:	f006 fb70 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(80, 30);
 800237a:	211e      	movs	r1, #30
 800237c:	2050      	movs	r0, #80	; 0x50
 800237e:	f006 fb6c 	bl	8008a5a <Element_DrawStar>

	LCD_ShowString(55, 260, 200, 12, 12, "Press KEY0 to continue");
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <draw_stage_clear+0x94>)
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	230c      	movs	r3, #12
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	230c      	movs	r3, #12
 800238c:	22c8      	movs	r2, #200	; 0xc8
 800238e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002392:	2037      	movs	r0, #55	; 0x37
 8002394:	f005 ff6e 	bl	8008274 <LCD_ShowString>
}
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08009f20 	.word	0x08009f20
 80023a4:	08009f3c 	.word	0x08009f3c
 80023a8:	08009f44 	.word	0x08009f44

080023ac <draw_failed>:

// Final stage
void draw_failed(int score) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
	LCD_Clear(WHITE);
 80023b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023b8:	f005 fc5c 	bl	8007c74 <LCD_Clear>

	LCD_ShowString(65, 40, 200, 24, 24, "GAME OVER");
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <draw_failed+0xa4>)
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2318      	movs	r3, #24
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2318      	movs	r3, #24
 80023c6:	22c8      	movs	r2, #200	; 0xc8
 80023c8:	2128      	movs	r1, #40	; 0x28
 80023ca:	2041      	movs	r0, #65	; 0x41
 80023cc:	f005 ff52 	bl	8008274 <LCD_ShowString>
	LCD_ShowString(87, 95, 200, 24, 24, "Score");
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <draw_failed+0xa8>)
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2318      	movs	r3, #24
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2318      	movs	r3, #24
 80023da:	22c8      	movs	r2, #200	; 0xc8
 80023dc:	215f      	movs	r1, #95	; 0x5f
 80023de:	2057      	movs	r0, #87	; 0x57
 80023e0:	f005 ff48 	bl	8008274 <LCD_ShowString>
	LCD_ShowxNum(100, 120, score, 4, 24, 0);
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	2318      	movs	r3, #24
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2304      	movs	r3, #4
 80023f0:	2178      	movs	r1, #120	; 0x78
 80023f2:	2064      	movs	r0, #100	; 0x64
 80023f4:	f005 fea4 	bl	8008140 <LCD_ShowxNum>

	Element_DrawSelfPlane(80, 220);
 80023f8:	21dc      	movs	r1, #220	; 0xdc
 80023fa:	2050      	movs	r0, #80	; 0x50
 80023fc:	f006 fa10 	bl	8008820 <Element_DrawSelfPlane>
	Element_DrawSelfPlane(120, 220);
 8002400:	21dc      	movs	r1, #220	; 0xdc
 8002402:	2078      	movs	r0, #120	; 0x78
 8002404:	f006 fa0c 	bl	8008820 <Element_DrawSelfPlane>
	Element_DrawSelfPlane(160, 220);
 8002408:	21dc      	movs	r1, #220	; 0xdc
 800240a:	20a0      	movs	r0, #160	; 0xa0
 800240c:	f006 fa08 	bl	8008820 <Element_DrawSelfPlane>

	Element_DrawStar(200, 300);
 8002410:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002414:	20c8      	movs	r0, #200	; 0xc8
 8002416:	f006 fb20 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(20, 130);
 800241a:	2182      	movs	r1, #130	; 0x82
 800241c:	2014      	movs	r0, #20
 800241e:	f006 fb1c 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(50, 230);
 8002422:	21e6      	movs	r1, #230	; 0xe6
 8002424:	2032      	movs	r0, #50	; 0x32
 8002426:	f006 fb18 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(80, 30);
 800242a:	211e      	movs	r1, #30
 800242c:	2050      	movs	r0, #80	; 0x50
 800242e:	f006 fb14 	bl	8008a5a <Element_DrawStar>

	LCD_ShowString(55, 260, 200, 12, 12, "Press KEY0 to continue");
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <draw_failed+0xac>)
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	230c      	movs	r3, #12
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	230c      	movs	r3, #12
 800243c:	22c8      	movs	r2, #200	; 0xc8
 800243e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002442:	2037      	movs	r0, #55	; 0x37
 8002444:	f005 ff16 	bl	8008274 <LCD_ShowString>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	08009f5c 	.word	0x08009f5c
 8002454:	08009f10 	.word	0x08009f10
 8002458:	08009f44 	.word	0x08009f44

0800245c <draw_cleared>:

// Final stage: cleared
void draw_cleared(void) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af02      	add	r7, sp, #8
	LCD_Clear(WHITE);
 8002462:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002466:	f005 fc05 	bl	8007c74 <LCD_Clear>

	LCD_ShowString(55, 80, 200, 24, 24, "All Cleared!");
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <draw_cleared+0x80>)
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2318      	movs	r3, #24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2318      	movs	r3, #24
 8002474:	22c8      	movs	r2, #200	; 0xc8
 8002476:	2150      	movs	r1, #80	; 0x50
 8002478:	2037      	movs	r0, #55	; 0x37
 800247a:	f005 fefb 	bl	8008274 <LCD_ShowString>

	Element_DrawSelfPlane(80, 220);
 800247e:	21dc      	movs	r1, #220	; 0xdc
 8002480:	2050      	movs	r0, #80	; 0x50
 8002482:	f006 f9cd 	bl	8008820 <Element_DrawSelfPlane>
	Element_DrawSelfPlane(120, 220);
 8002486:	21dc      	movs	r1, #220	; 0xdc
 8002488:	2078      	movs	r0, #120	; 0x78
 800248a:	f006 f9c9 	bl	8008820 <Element_DrawSelfPlane>
	Element_DrawSelfPlane(160, 220);
 800248e:	21dc      	movs	r1, #220	; 0xdc
 8002490:	20a0      	movs	r0, #160	; 0xa0
 8002492:	f006 f9c5 	bl	8008820 <Element_DrawSelfPlane>

	Element_DrawStar(200, 300);
 8002496:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800249a:	20c8      	movs	r0, #200	; 0xc8
 800249c:	f006 fadd 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(20, 130);
 80024a0:	2182      	movs	r1, #130	; 0x82
 80024a2:	2014      	movs	r0, #20
 80024a4:	f006 fad9 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(50, 230);
 80024a8:	21e6      	movs	r1, #230	; 0xe6
 80024aa:	2032      	movs	r0, #50	; 0x32
 80024ac:	f006 fad5 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(150, 120);
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	2096      	movs	r0, #150	; 0x96
 80024b4:	f006 fad1 	bl	8008a5a <Element_DrawStar>
	Element_DrawStar(80, 30);
 80024b8:	211e      	movs	r1, #30
 80024ba:	2050      	movs	r0, #80	; 0x50
 80024bc:	f006 facd 	bl	8008a5a <Element_DrawStar>

	LCD_ShowString(55, 260, 200, 12, 12, "Press KEY0 to continue");
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <draw_cleared+0x84>)
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	230c      	movs	r3, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	230c      	movs	r3, #12
 80024ca:	22c8      	movs	r2, #200	; 0xc8
 80024cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80024d0:	2037      	movs	r0, #55	; 0x37
 80024d2:	f005 fecf 	bl	8008274 <LCD_ShowString>
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	08009f68 	.word	0x08009f68
 80024e0:	08009f44 	.word	0x08009f44

080024e4 <draw_play_title>:

void draw_play_title(int score, int life) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	int i;
	int start_x = 195;
 80024ee:	23c3      	movs	r3, #195	; 0xc3
 80024f0:	60bb      	str	r3, [r7, #8]

	// Display score
	LCD_ShowxNum(75, 8, score, 4, 24, 0);
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	2318      	movs	r3, #24
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2304      	movs	r3, #4
 80024fe:	2108      	movs	r1, #8
 8002500:	204b      	movs	r0, #75	; 0x4b
 8002502:	f005 fe1d 	bl	8008140 <LCD_ShowxNum>
	LCD_Fill(190, 15, 226, 25, BACK_COLOR);
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <draw_play_title+0x68>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2319      	movs	r3, #25
 800250e:	22e2      	movs	r2, #226	; 0xe2
 8002510:	210f      	movs	r1, #15
 8002512:	20be      	movs	r0, #190	; 0xbe
 8002514:	f005 fc10 	bl	8007d38 <LCD_Fill>

	// Draw remain life
	for (i = 0; i < life; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e00e      	b.n	800253c <draw_play_title+0x58>
		Element_DrawHeart(start_x + i * 13, 20);
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	441a      	add	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4413      	add	r3, r2
 800252e:	2114      	movs	r1, #20
 8002530:	4618      	mov	r0, r3
 8002532:	f006 fa49 	bl	80089c8 <Element_DrawHeart>
	for (i = 0; i < life; i++) {
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	dbec      	blt.n	800251e <draw_play_title+0x3a>
	}
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000006 	.word	0x20000006

08002550 <draw_all_self_buttles>:

void draw_all_self_buttles(int self_buttles[SELF_BUTTLE_MAX][2]) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e016      	b.n	800258c <draw_all_self_buttles+0x3c>
		if (self_buttles[i][0] == 0) {
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <draw_all_self_buttles+0x44>
			break;
		} else {
			Element_DrawSelfBullet(self_buttles[i][0], self_buttles[i][1]);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4619      	mov	r1, r3
 8002582:	f006 f97f 	bl	8008884 <Element_DrawSelfBullet>
	for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b63      	cmp	r3, #99	; 0x63
 8002590:	dde5      	ble.n	800255e <draw_all_self_buttles+0xe>
		}
	}
}
 8002592:	e000      	b.n	8002596 <draw_all_self_buttles+0x46>
			break;
 8002594:	bf00      	nop
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <draw_all_enemy_planes>:

void draw_all_enemy_planes(int enemy_planes[ENEMY_PLANE_MAX][2]) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e016      	b.n	80025da <draw_all_enemy_planes+0x3c>
		if (enemy_planes[i][0] == 0) {
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <draw_all_enemy_planes+0x44>
			break;
		} else {
			Element_DrawEnemyPlane(enemy_planes[i][0], enemy_planes[i][1]);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4619      	mov	r1, r3
 80025d0:	f006 f93f 	bl	8008852 <Element_DrawEnemyPlane>
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b09      	cmp	r3, #9
 80025de:	dde5      	ble.n	80025ac <draw_all_enemy_planes+0xe>
		}
	}
}
 80025e0:	e000      	b.n	80025e4 <draw_all_enemy_planes+0x46>
			break;
 80025e2:	bf00      	nop
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <draw_all_enemy_buttles>:

void draw_all_enemy_buttles(int enemy_buttles[ENEMY_BUTTLE_MAX][2]) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < ENEMY_BUTTLE_MAX; i++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e016      	b.n	800262c <draw_all_enemy_buttles+0x40>
		if (enemy_buttles[i][0] == 0) {
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d014      	beq.n	8002636 <draw_all_enemy_buttles+0x4a>
			break;
		} else {
			Element_DrawEnemyBullet(enemy_buttles[i][0], enemy_buttles[i][1]);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4619      	mov	r1, r3
 8002622:	f006 f980 	bl	8008926 <Element_DrawEnemyBullet>
	for (i = 0; i < ENEMY_BUTTLE_MAX; i++) {
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3301      	adds	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002632:	dbe4      	blt.n	80025fe <draw_all_enemy_buttles+0x12>
		}
	}
}
 8002634:	e000      	b.n	8002638 <draw_all_enemy_buttles+0x4c>
			break;
 8002636:	bf00      	nop
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <draw_play_all>:

void draw_play_all(int score, int life, int self_plane[2],
		int self_buttles[SELF_BUTTLE_MAX][2],
		int enemy_planes[ENEMY_PLANE_MAX][2],
		int enemy_buttles[ENEMY_BUTTLE_MAX][2]) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
	draw_play_title(score, life);
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff ff47 	bl	80024e4 <draw_play_title>

	Element_DrawSelfPlane(self_plane[0], self_plane[1]);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f006 f8dc 	bl	8008820 <Element_DrawSelfPlane>
	draw_all_self_buttles(self_buttles);
 8002668:	6838      	ldr	r0, [r7, #0]
 800266a:	f7ff ff71 	bl	8002550 <draw_all_self_buttles>

	draw_all_enemy_planes(enemy_planes);
 800266e:	69b8      	ldr	r0, [r7, #24]
 8002670:	f7ff ff95 	bl	800259e <draw_all_enemy_planes>
	draw_all_enemy_buttles(enemy_buttles);
 8002674:	69f8      	ldr	r0, [r7, #28]
 8002676:	f7ff ffb9 	bl	80025ec <draw_all_enemy_buttles>

}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <MX_GPIO_Init+0x130>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a45      	ldr	r2, [pc, #276]	; (80027b4 <MX_GPIO_Init+0x130>)
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <MX_GPIO_Init+0x130>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e6:	4834      	ldr	r0, [pc, #208]	; (80027b8 <MX_GPIO_Init+0x134>)
 80026e8:	f7fe fda7 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2104      	movs	r1, #4
 80026f0:	4832      	ldr	r0, [pc, #200]	; (80027bc <MX_GPIO_Init+0x138>)
 80026f2:	f7fe fda2 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80026f6:	2301      	movs	r3, #1
 80026f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <MX_GPIO_Init+0x13c>)
 80026fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	482b      	ldr	r0, [pc, #172]	; (80027b8 <MX_GPIO_Init+0x134>)
 800270a:	f7fe fc15 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800270e:	2320      	movs	r3, #32
 8002710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <MX_GPIO_Init+0x13c>)
 8002714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002716:	2301      	movs	r3, #1
 8002718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4619      	mov	r1, r3
 8002720:	4828      	ldr	r0, [pc, #160]	; (80027c4 <MX_GPIO_Init+0x140>)
 8002722:	f7fe fc09 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272c:	2301      	movs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2302      	movs	r3, #2
 8002736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	4619      	mov	r1, r3
 800273e:	481e      	ldr	r0, [pc, #120]	; (80027b8 <MX_GPIO_Init+0x134>)
 8002740:	f7fe fbfa 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_GPIO_Init+0x13c>)
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274e:	2301      	movs	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 0310 	add.w	r3, r7, #16
 8002756:	4619      	mov	r1, r3
 8002758:	4817      	ldr	r0, [pc, #92]	; (80027b8 <MX_GPIO_Init+0x134>)
 800275a:	f7fe fbed 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800275e:	2304      	movs	r3, #4
 8002760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002762:	2301      	movs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2302      	movs	r3, #2
 800276c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 0310 	add.w	r3, r7, #16
 8002772:	4619      	mov	r1, r3
 8002774:	4811      	ldr	r0, [pc, #68]	; (80027bc <MX_GPIO_Init+0x138>)
 8002776:	f7fe fbdf 	bl	8000f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2101      	movs	r1, #1
 800277e:	2006      	movs	r0, #6
 8002780:	f7fe fa9b 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002784:	2006      	movs	r0, #6
 8002786:	f7fe fab4 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800278a:	2201      	movs	r2, #1
 800278c:	2101      	movs	r1, #1
 800278e:	2017      	movs	r0, #23
 8002790:	f7fe fa93 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002794:	2017      	movs	r0, #23
 8002796:	f7fe faac 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800279a:	2202      	movs	r2, #2
 800279c:	2101      	movs	r1, #1
 800279e:	2028      	movs	r0, #40	; 0x28
 80027a0:	f7fe fa8b 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027a4:	2028      	movs	r0, #40	; 0x28
 80027a6:	f7fe faa4 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 80027aa:	bf00      	nop
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40011400 	.word	0x40011400
 80027c0:	10110000 	.word	0x10110000
 80027c4:	40011000 	.word	0x40011000

080027c8 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <LCD_WR_REG+0x40>)
 80027d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d8:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <LCD_WR_REG+0x40>)
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <LCD_WR_REG+0x44>)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <LCD_WR_REG+0x40>)
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <LCD_WR_REG+0x40>)
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <LCD_WR_REG+0x40>)
 80027f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fa:	611a      	str	r2, [r3, #16]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40011000 	.word	0x40011000
 800280c:	40010c00 	.word	0x40010c00

08002810 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <LCD_WR_DATAX+0x40>)
 800281c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002820:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <LCD_WR_DATAX+0x40>)
 8002824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002828:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <LCD_WR_DATAX+0x44>)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <LCD_WR_DATAX+0x40>)
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <LCD_WR_DATAX+0x40>)
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <LCD_WR_DATAX+0x40>)
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	611a      	str	r2, [r3, #16]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40011000 	.word	0x40011000
 8002854:	40010c00 	.word	0x40010c00

08002858 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <LCD_RD_DATA+0x7c>)
 8002860:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002864:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <LCD_RD_DATA+0x7c>)
 8002868:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800286c:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <LCD_RD_DATA+0x7c>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <LCD_RD_DATA+0x80>)
 8002876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <LCD_RD_DATA+0x80>)
 800287e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002882:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <LCD_RD_DATA+0x80>)
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <LCD_RD_DATA+0x84>)
 800288c:	889b      	ldrh	r3, [r3, #4]
 800288e:	f648 1289 	movw	r2, #35209	; 0x8989
 8002892:	4293      	cmp	r3, r2
 8002894:	d102      	bne.n	800289c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8002896:	2001      	movs	r0, #1
 8002898:	f7fe f916 	bl	8000ac8 <HAL_Delay>
	t = DATAIN
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <LCD_RD_DATA+0x7c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <LCD_RD_DATA+0x80>)
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <LCD_RD_DATA+0x80>)
 80028aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ae:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <LCD_RD_DATA+0x7c>)
 80028b2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80028b6:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <LCD_RD_DATA+0x7c>)
 80028ba:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80028be:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <LCD_RD_DATA+0x7c>)
 80028c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c6:	60da      	str	r2, [r3, #12]
	return t;
 80028c8:	88fb      	ldrh	r3, [r7, #6]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	40011000 	.word	0x40011000
 80028dc:	200000a0 	.word	0x200000a0

080028e0 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	460a      	mov	r2, r1
 80028ea:	80fb      	strh	r3, [r7, #6]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff68 	bl	80027c8 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <LCD_WriteReg+0x4c>)
 80028fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fe:	611a      	str	r2, [r3, #16]
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <LCD_WriteReg+0x4c>)
 8002902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002906:	615a      	str	r2, [r3, #20]
 8002908:	4a09      	ldr	r2, [pc, #36]	; (8002930 <LCD_WriteReg+0x50>)
 800290a:	88bb      	ldrh	r3, [r7, #4]
 800290c:	60d3      	str	r3, [r2, #12]
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <LCD_WriteReg+0x4c>)
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <LCD_WriteReg+0x4c>)
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <LCD_WriteReg+0x4c>)
 800291c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002920:	611a      	str	r2, [r3, #16]
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40011000 	.word	0x40011000
 8002930:	40010c00 	.word	0x40010c00

08002934 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff41 	bl	80027c8 <LCD_WR_REG>
	return LCD_RD_DATA();
 8002946:	f7ff ff87 	bl	8002858 <LCD_RD_DATA>
 800294a:	4603      	mov	r3, r0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <LCD_WriteRAM_Prepare+0x14>)
 800295a:	891b      	ldrh	r3, [r3, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff33 	bl	80027c8 <LCD_WR_REG>
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200000a0 	.word	0x200000a0

0800296c <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	460a      	mov	r2, r1
 8002976:	80fb      	strh	r3, [r7, #6]
 8002978:	4613      	mov	r3, r2
 800297a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800297c:	4b73      	ldr	r3, [pc, #460]	; (8002b4c <LCD_SetCursor+0x1e0>)
 800297e:	889b      	ldrh	r3, [r3, #4]
 8002980:	f249 3241 	movw	r2, #37697	; 0x9341
 8002984:	4293      	cmp	r3, r2
 8002986:	d005      	beq.n	8002994 <LCD_SetCursor+0x28>
 8002988:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <LCD_SetCursor+0x1e0>)
 800298a:	889b      	ldrh	r3, [r3, #4]
 800298c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002990:	4293      	cmp	r3, r2
 8002992:	d164      	bne.n	8002a5e <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <LCD_SetCursor+0x1e0>)
 8002996:	895b      	ldrh	r3, [r3, #10]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff15 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800299e:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <LCD_SetCursor+0x1e8>)
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	615a      	str	r2, [r3, #20]
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 80029cc:	4b60      	ldr	r3, [pc, #384]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <LCD_SetCursor+0x1e8>)
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	60d3      	str	r3, [r2, #12]
 80029e4:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	615a      	str	r2, [r3, #20]
 80029ea:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	611a      	str	r2, [r3, #16]
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <LCD_SetCursor+0x1e4>)
 80029f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80029f8:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <LCD_SetCursor+0x1e0>)
 80029fa:	899b      	ldrh	r3, [r3, #12]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fee3 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a10:	615a      	str	r2, [r3, #20]
 8002a12:	88bb      	ldrh	r3, [r7, #4]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <LCD_SetCursor+0x1e8>)
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	615a      	str	r2, [r3, #20]
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002a30:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a36:	611a      	str	r2, [r3, #16]
 8002a38:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3e:	615a      	str	r2, [r3, #20]
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <LCD_SetCursor+0x1e8>)
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	60d3      	str	r3, [r2, #12]
 8002a48:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	611a      	str	r2, [r3, #16]
 8002a54:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5a:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8002a5c:	e248      	b.n	8002ef0 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <LCD_SetCursor+0x1e0>)
 8002a60:	889b      	ldrh	r3, [r3, #4]
 8002a62:	f646 0204 	movw	r2, #26628	; 0x6804
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d176      	bne.n	8002b58 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <LCD_SetCursor+0x1e0>)
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d106      	bne.n	8002a80 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <LCD_SetCursor+0x1e0>)
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <LCD_SetCursor+0x1e0>)
 8002a82:	895b      	ldrh	r3, [r3, #10]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe9f 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a98:	615a      	str	r2, [r3, #20]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <LCD_SetCursor+0x1e8>)
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	615a      	str	r2, [r3, #20]
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	611a      	str	r2, [r3, #16]
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002abe:	611a      	str	r2, [r3, #16]
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <LCD_SetCursor+0x1e8>)
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	60d3      	str	r3, [r2, #12]
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	615a      	str	r2, [r3, #20]
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	611a      	str	r2, [r3, #16]
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <LCD_SetCursor+0x1e0>)
 8002ae6:	899b      	ldrh	r3, [r3, #12]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe6d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afc:	615a      	str	r2, [r3, #20]
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <LCD_SetCursor+0x1e8>)
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	611a      	str	r2, [r3, #16]
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b22:	611a      	str	r2, [r3, #16]
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <LCD_SetCursor+0x1e8>)
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	60d3      	str	r3, [r2, #12]
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	611a      	str	r2, [r3, #16]
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <LCD_SetCursor+0x1e4>)
 8002b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b46:	611a      	str	r2, [r3, #16]
}
 8002b48:	e1d2      	b.n	8002ef0 <LCD_SetCursor+0x584>
 8002b4a:	bf00      	nop
 8002b4c:	200000a0 	.word	0x200000a0
 8002b50:	40011000 	.word	0x40011000
 8002b54:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002b58:	4b99      	ldr	r3, [pc, #612]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	f641 1263 	movw	r2, #6499	; 0x1963
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f040 8133 	bne.w	8002dcc <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8002b66:	4b96      	ldr	r3, [pc, #600]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002b68:	799b      	ldrb	r3, [r3, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d163      	bne.n	8002c36 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8002b6e:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8002b7c:	4b90      	ldr	r3, [pc, #576]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002b7e:	895b      	ldrh	r3, [r3, #10]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fe21 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002b86:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8c:	611a      	str	r2, [r3, #16]
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b94:	615a      	str	r2, [r3, #20]
 8002b96:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bae:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002bb0:	4b84      	ldr	r3, [pc, #528]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	615a      	str	r2, [r3, #20]
 8002bcc:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8002bda:	4b7a      	ldr	r3, [pc, #488]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be8:	615a      	str	r2, [r3, #20]
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	615a      	str	r2, [r3, #20]
 8002bfa:	4b72      	ldr	r3, [pc, #456]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002c08:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0e:	611a      	str	r2, [r3, #16]
 8002c10:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	60d3      	str	r3, [r2, #12]
 8002c20:	4b68      	ldr	r3, [pc, #416]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	615a      	str	r2, [r3, #20]
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	611a      	str	r2, [r3, #16]
 8002c2c:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c32:	611a      	str	r2, [r3, #16]
 8002c34:	e061      	b.n	8002cfa <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8002c36:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002c38:	895b      	ldrh	r3, [r3, #10]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fdc4 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8002c40:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c46:	611a      	str	r2, [r3, #16]
 8002c48:	4b5e      	ldr	r3, [pc, #376]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4e:	615a      	str	r2, [r3, #20]
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002c6e:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7c:	615a      	str	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4a51      	ldr	r2, [pc, #324]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	60d3      	str	r3, [r2, #12]
 8002c86:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c88:	2280      	movs	r2, #128	; 0x80
 8002c8a:	615a      	str	r2, [r3, #20]
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c98:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca8:	615a      	str	r2, [r3, #20]
 8002caa:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	121a      	asrs	r2, r3, #8
 8002cb2:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	615a      	str	r2, [r3, #20]
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd8:	615a      	str	r2, [r3, #20]
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	60d3      	str	r3, [r2, #12]
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002cfc:	899b      	ldrh	r3, [r3, #12]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fd62 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002d04:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	88bb      	ldrh	r3, [r7, #4]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	615a      	str	r2, [r3, #20]
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	611a      	str	r2, [r3, #16]
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d40:	615a      	str	r2, [r3, #20]
 8002d42:	88bb      	ldrh	r3, [r7, #4]
 8002d44:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	60d3      	str	r3, [r2, #12]
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002d70:	885b      	ldrh	r3, [r3, #2]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	121a      	asrs	r2, r3, #8
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	615a      	str	r2, [r3, #20]
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9c:	615a      	str	r2, [r3, #20]
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LCD_SetCursor+0x454>)
 8002da0:	885b      	ldrh	r3, [r3, #2]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <LCD_SetCursor+0x45c>)
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	60d3      	str	r3, [r2, #12]
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	615a      	str	r2, [r3, #20]
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	611a      	str	r2, [r3, #16]
 8002db6:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <LCD_SetCursor+0x458>)
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	611a      	str	r2, [r3, #16]
}
 8002dbe:	e097      	b.n	8002ef0 <LCD_SetCursor+0x584>
 8002dc0:	200000a0 	.word	0x200000a0
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002dce:	889b      	ldrh	r3, [r3, #4]
 8002dd0:	f245 5210 	movw	r2, #21776	; 0x5510
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d172      	bne.n	8002ebe <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002dda:	895b      	ldrh	r3, [r3, #10]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fcf3 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002de2:	4b46      	ldr	r3, [pc, #280]	; (8002efc <LCD_SetCursor+0x590>)
 8002de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	4b44      	ldr	r3, [pc, #272]	; (8002efc <LCD_SetCursor+0x590>)
 8002dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df0:	615a      	str	r2, [r3, #20]
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <LCD_SetCursor+0x594>)
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <LCD_SetCursor+0x590>)
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	615a      	str	r2, [r3, #20]
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <LCD_SetCursor+0x590>)
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	611a      	str	r2, [r3, #16]
 8002e08:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <LCD_SetCursor+0x590>)
 8002e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002e12:	895b      	ldrh	r3, [r3, #10]
 8002e14:	3301      	adds	r3, #1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fcd5 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <LCD_SetCursor+0x590>)
 8002e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <LCD_SetCursor+0x590>)
 8002e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2c:	615a      	str	r2, [r3, #20]
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <LCD_SetCursor+0x594>)
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	60d3      	str	r3, [r2, #12]
 8002e36:	4b31      	ldr	r3, [pc, #196]	; (8002efc <LCD_SetCursor+0x590>)
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	615a      	str	r2, [r3, #20]
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <LCD_SetCursor+0x590>)
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <LCD_SetCursor+0x590>)
 8002e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e48:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002e4c:	899b      	ldrh	r3, [r3, #12]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fcba 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <LCD_SetCursor+0x590>)
 8002e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <LCD_SetCursor+0x590>)
 8002e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e62:	615a      	str	r2, [r3, #20]
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <LCD_SetCursor+0x594>)
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <LCD_SetCursor+0x590>)
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	615a      	str	r2, [r3, #20]
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <LCD_SetCursor+0x590>)
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	611a      	str	r2, [r3, #16]
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <LCD_SetCursor+0x590>)
 8002e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e80:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002e84:	899b      	ldrh	r3, [r3, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fc9c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <LCD_SetCursor+0x590>)
 8002e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e96:	611a      	str	r2, [r3, #16]
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <LCD_SetCursor+0x590>)
 8002e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9e:	615a      	str	r2, [r3, #20]
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <LCD_SetCursor+0x594>)
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	60d3      	str	r3, [r2, #12]
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <LCD_SetCursor+0x590>)
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	615a      	str	r2, [r3, #20]
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <LCD_SetCursor+0x590>)
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	611a      	str	r2, [r3, #16]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <LCD_SetCursor+0x590>)
 8002eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eba:	611a      	str	r2, [r3, #16]
}
 8002ebc:	e018      	b.n	8002ef0 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002ec0:	799b      	ldrb	r3, [r3, #6]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d106      	bne.n	8002ed4 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002ed6:	895b      	ldrh	r3, [r3, #10]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fcff 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <LCD_SetCursor+0x58c>)
 8002ee4:	899b      	ldrh	r3, [r3, #12]
 8002ee6:	88ba      	ldrh	r2, [r7, #4]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fcf8 	bl	80028e0 <LCD_WriteReg>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200000a0 	.word	0x200000a0
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40010c00 	.word	0x40010c00

08002f04 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8002f16:	4b78      	ldr	r3, [pc, #480]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002f18:	799b      	ldrb	r3, [r3, #6]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10b      	bne.n	8002f36 <LCD_Scan_Dir+0x32>
 8002f1e:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002f20:	889b      	ldrh	r3, [r3, #4]
 8002f22:	f646 0204 	movw	r2, #26628	; 0x6804
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d005      	beq.n	8002f36 <LCD_Scan_Dir+0x32>
 8002f2a:	4b73      	ldr	r3, [pc, #460]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002f2c:	889b      	ldrh	r3, [r3, #4]
 8002f2e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d109      	bne.n	8002f4a <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8002f36:	4b70      	ldr	r3, [pc, #448]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002f38:	799b      	ldrb	r3, [r3, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d134      	bne.n	8002fa8 <LCD_Scan_Dir+0xa4>
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002f40:	889b      	ldrh	r3, [r3, #4]
 8002f42:	f641 1263 	movw	r2, #6499	; 0x1963
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12e      	bne.n	8002fa8 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b07      	cmp	r3, #7
 8002f4e:	d82b      	bhi.n	8002fa8 <LCD_Scan_Dir+0xa4>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <LCD_Scan_Dir+0x54>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f79 	.word	0x08002f79
 8002f5c:	08002f7f 	.word	0x08002f7f
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08002f8b 	.word	0x08002f8b
 8002f68:	08002f91 	.word	0x08002f91
 8002f6c:	08002f97 	.word	0x08002f97
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002fa3 	.word	0x08002fa3
		{
		case 0:
			dir = 6;
 8002f78:	2306      	movs	r3, #6
 8002f7a:	71fb      	strb	r3, [r7, #7]
			break;
 8002f7c:	e014      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8002f7e:	2307      	movs	r3, #7
 8002f80:	71fb      	strb	r3, [r7, #7]
			break;
 8002f82:	e011      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8002f84:	2304      	movs	r3, #4
 8002f86:	71fb      	strb	r3, [r7, #7]
			break;
 8002f88:	e00e      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	71fb      	strb	r3, [r7, #7]
			break;
 8002f8e:	e00b      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	71fb      	strb	r3, [r7, #7]
			break;
 8002f94:	e008      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	71fb      	strb	r3, [r7, #7]
			break;
 8002f9a:	e005      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	71fb      	strb	r3, [r7, #7]
			break;
 8002fa0:	e002      	b.n	8002fa8 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	71fb      	strb	r3, [r7, #7]
			break;
 8002fa6:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002faa:	889b      	ldrh	r3, [r3, #4]
 8002fac:	f249 3241 	movw	r2, #37697	; 0x9341
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d018      	beq.n	8002fe6 <LCD_Scan_Dir+0xe2>
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002fb6:	889b      	ldrh	r3, [r3, #4]
 8002fb8:	f646 0204 	movw	r2, #26628	; 0x6804
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d012      	beq.n	8002fe6 <LCD_Scan_Dir+0xe2>
 8002fc0:	4b4d      	ldr	r3, [pc, #308]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002fc2:	889b      	ldrh	r3, [r3, #4]
 8002fc4:	f245 3210 	movw	r2, #21264	; 0x5310
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00c      	beq.n	8002fe6 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8002fcc:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002fce:	889b      	ldrh	r3, [r3, #4]
 8002fd0:	f245 5210 	movw	r2, #21776	; 0x5510
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d006      	beq.n	8002fe6 <LCD_Scan_Dir+0xe2>
 8002fd8:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8002fda:	889b      	ldrh	r3, [r3, #4]
 8002fdc:	f641 1263 	movw	r2, #6499	; 0x1963
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	f040 8250 	bne.w	8003486 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	d836      	bhi.n	800305a <LCD_Scan_Dir+0x156>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <LCD_Scan_Dir+0xf0>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	0800305b 	.word	0x0800305b
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	0800301f 	.word	0x0800301f
 8003000:	08003029 	.word	0x08003029
 8003004:	08003033 	.word	0x08003033
 8003008:	0800303d 	.word	0x0800303d
 800300c:	08003047 	.word	0x08003047
 8003010:	08003051 	.word	0x08003051
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003014:	89fb      	ldrh	r3, [r7, #14]
 8003016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301a:	81fb      	strh	r3, [r7, #14]
			break;
 800301c:	e01d      	b.n	800305a <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003024:	81fb      	strh	r3, [r7, #14]
			break;
 8003026:	e018      	b.n	800305a <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003028:	89fb      	ldrh	r3, [r7, #14]
 800302a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800302e:	81fb      	strh	r3, [r7, #14]
			break;
 8003030:	e013      	b.n	800305a <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	81fb      	strh	r3, [r7, #14]
			break;
 800303a:	e00e      	b.n	800305a <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800303c:	89fb      	ldrh	r3, [r7, #14]
 800303e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003042:	81fb      	strh	r3, [r7, #14]
			break;
 8003044:	e009      	b.n	800305a <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8003046:	89fb      	ldrh	r3, [r7, #14]
 8003048:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800304c:	81fb      	strh	r3, [r7, #14]
			break;
 800304e:	e004      	b.n	800305a <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003050:	89fb      	ldrh	r3, [r7, #14]
 8003052:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003056:	81fb      	strh	r3, [r7, #14]
			break;
 8003058:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800305a:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 800305c:	889b      	ldrh	r3, [r3, #4]
 800305e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003062:	4293      	cmp	r3, r2
 8003064:	d103      	bne.n	800306e <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8003066:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800306a:	81bb      	strh	r3, [r7, #12]
 800306c:	e001      	b.n	8003072 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800306e:	2336      	movs	r3, #54	; 0x36
 8003070:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8003074:	889b      	ldrh	r3, [r3, #4]
 8003076:	f245 3210 	movw	r2, #21264	; 0x5310
 800307a:	4293      	cmp	r3, r2
 800307c:	d00f      	beq.n	800309e <LCD_Scan_Dir+0x19a>
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 8003080:	889b      	ldrh	r3, [r3, #4]
 8003082:	f245 5210 	movw	r2, #21776	; 0x5510
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <LCD_Scan_Dir+0x19a>
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 800308c:	889b      	ldrh	r3, [r3, #4]
 800308e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8003096:	89fb      	ldrh	r3, [r7, #14]
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030a0:	889b      	ldrh	r3, [r3, #4]
 80030a2:	f646 0204 	movw	r2, #26628	; 0x6804
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d103      	bne.n	80030b2 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80030aa:	89fb      	ldrh	r3, [r7, #14]
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80030b2:	89fa      	ldrh	r2, [r7, #14]
 80030b4:	89bb      	ldrh	r3, [r7, #12]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fc11 	bl	80028e0 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030c0:	889b      	ldrh	r3, [r3, #4]
 80030c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d028      	beq.n	800311c <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030da:	885b      	ldrh	r3, [r3, #2]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d21d      	bcs.n	800311c <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030e8:	885a      	ldrh	r2, [r3, #2]
 80030ea:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030ec:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80030ee:	4a02      	ldr	r2, [pc, #8]	; (80030f8 <LCD_Scan_Dir+0x1f4>)
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	8053      	strh	r3, [r2, #2]
 80030f4:	e012      	b.n	800311c <LCD_Scan_Dir+0x218>
 80030f6:	bf00      	nop
 80030f8:	200000a0 	.word	0x200000a0
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80030fc:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	4b7e      	ldr	r3, [pc, #504]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003102:	885b      	ldrh	r3, [r3, #2]
 8003104:	429a      	cmp	r2, r3
 8003106:	d909      	bls.n	800311c <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003108:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800310e:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003110:	885a      	ldrh	r2, [r3, #2]
 8003112:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003114:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003116:	4a79      	ldr	r2, [pc, #484]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 800311c:	4b77      	ldr	r3, [pc, #476]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 800311e:	889b      	ldrh	r3, [r3, #4]
 8003120:	f245 5210 	movw	r2, #21776	; 0x5510
 8003124:	4293      	cmp	r3, r2
 8003126:	f040 80ef 	bne.w	8003308 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800312a:	4b74      	ldr	r3, [pc, #464]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 800312c:	895b      	ldrh	r3, [r3, #10]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fb4a 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003134:	4b72      	ldr	r3, [pc, #456]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	4b70      	ldr	r3, [pc, #448]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003142:	615a      	str	r2, [r3, #20]
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <LCD_Scan_Dir+0x400>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	615a      	str	r2, [r3, #20]
 8003150:	4b6b      	ldr	r3, [pc, #428]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	611a      	str	r2, [r3, #16]
 8003156:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003160:	895b      	ldrh	r3, [r3, #10]
 8003162:	3301      	adds	r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fb2e 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800316c:	4b64      	ldr	r3, [pc, #400]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800316e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003172:	611a      	str	r2, [r3, #16]
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	615a      	str	r2, [r3, #20]
 800317c:	4b61      	ldr	r3, [pc, #388]	; (8003304 <LCD_Scan_Dir+0x400>)
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	611a      	str	r2, [r3, #16]
 800318e:	4b5c      	ldr	r3, [pc, #368]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003194:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8003196:	4b59      	ldr	r3, [pc, #356]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003198:	895b      	ldrh	r3, [r3, #10]
 800319a:	3302      	adds	r3, #2
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fb12 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80031a4:	4b56      	ldr	r3, [pc, #344]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031aa:	611a      	str	r2, [r3, #16]
 80031ac:	4b54      	ldr	r3, [pc, #336]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b2:	615a      	str	r2, [r3, #20]
 80031b4:	4b51      	ldr	r3, [pc, #324]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	121a      	asrs	r2, r3, #8
 80031bc:	4b51      	ldr	r3, [pc, #324]	; (8003304 <LCD_Scan_Dir+0x400>)
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	4b4f      	ldr	r3, [pc, #316]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	615a      	str	r2, [r3, #20]
 80031c6:	4b4e      	ldr	r3, [pc, #312]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d2:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80031d4:	4b49      	ldr	r3, [pc, #292]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 80031d6:	895b      	ldrh	r3, [r3, #10]
 80031d8:	3303      	adds	r3, #3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff faf3 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	4b45      	ldr	r3, [pc, #276]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80031ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f0:	615a      	str	r2, [r3, #20]
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	4a42      	ldr	r2, [pc, #264]	; (8003304 <LCD_Scan_Dir+0x400>)
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	60d3      	str	r3, [r2, #12]
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	615a      	str	r2, [r3, #20]
 8003204:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800320c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003210:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003214:	899b      	ldrh	r3, [r3, #12]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fad6 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800321c:	4b38      	ldr	r3, [pc, #224]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800321e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003222:	611a      	str	r2, [r3, #16]
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322a:	615a      	str	r2, [r3, #20]
 800322c:	4b35      	ldr	r3, [pc, #212]	; (8003304 <LCD_Scan_Dir+0x400>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	4b33      	ldr	r3, [pc, #204]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003234:	2280      	movs	r2, #128	; 0x80
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	4b30      	ldr	r3, [pc, #192]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003244:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003248:	899b      	ldrh	r3, [r3, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff faba 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325a:	611a      	str	r2, [r3, #16]
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	615a      	str	r2, [r3, #20]
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <LCD_Scan_Dir+0x400>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	615a      	str	r2, [r3, #20]
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800327e:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 8003280:	899b      	ldrh	r3, [r3, #12]
 8003282:	3302      	adds	r3, #2
 8003284:	b29b      	uxth	r3, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fa9e 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 800328e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003292:	611a      	str	r2, [r3, #16]
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 8003296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329a:	615a      	str	r2, [r3, #20]
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 800329e:	885b      	ldrh	r3, [r3, #2]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	121a      	asrs	r2, r3, #8
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <LCD_Scan_Dir+0x400>)
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	615a      	str	r2, [r3, #20]
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	611a      	str	r2, [r3, #16]
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 80032be:	899b      	ldrh	r3, [r3, #12]
 80032c0:	3303      	adds	r3, #3
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fa7f 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d0:	611a      	str	r2, [r3, #16]
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d8:	615a      	str	r2, [r3, #20]
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <LCD_Scan_Dir+0x3f8>)
 80032dc:	885b      	ldrh	r3, [r3, #2]
 80032de:	3b01      	subs	r3, #1
 80032e0:	4a08      	ldr	r2, [pc, #32]	; (8003304 <LCD_Scan_Dir+0x400>)
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	60d3      	str	r3, [r2, #12]
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	4b03      	ldr	r3, [pc, #12]	; (8003300 <LCD_Scan_Dir+0x3fc>)
 80032f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f8:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80032fa:	e10a      	b.n	8003512 <LCD_Scan_Dir+0x60e>
 80032fc:	200000a0 	.word	0x200000a0
 8003300:	40011000 	.word	0x40011000
 8003304:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8003308:	4b84      	ldr	r3, [pc, #528]	; (800351c <LCD_Scan_Dir+0x618>)
 800330a:	895b      	ldrh	r3, [r3, #10]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fa5b 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003312:	4b83      	ldr	r3, [pc, #524]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003318:	611a      	str	r2, [r3, #16]
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800331c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003320:	615a      	str	r2, [r3, #20]
 8003322:	4b80      	ldr	r3, [pc, #512]	; (8003524 <LCD_Scan_Dir+0x620>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	615a      	str	r2, [r3, #20]
 800332e:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	611a      	str	r2, [r3, #16]
 8003334:	4b7a      	ldr	r3, [pc, #488]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800333c:	4b78      	ldr	r3, [pc, #480]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800333e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334a:	615a      	str	r2, [r3, #20]
 800334c:	4b75      	ldr	r3, [pc, #468]	; (8003524 <LCD_Scan_Dir+0x620>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	4b73      	ldr	r3, [pc, #460]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	615a      	str	r2, [r3, #20]
 8003358:	4b71      	ldr	r3, [pc, #452]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	611a      	str	r2, [r3, #16]
 800335e:	4b70      	ldr	r3, [pc, #448]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003364:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003366:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	4b69      	ldr	r3, [pc, #420]	; (800351c <LCD_Scan_Dir+0x618>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	121a      	asrs	r2, r3, #8
 800337e:	4b69      	ldr	r3, [pc, #420]	; (8003524 <LCD_Scan_Dir+0x620>)
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	4b67      	ldr	r3, [pc, #412]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	615a      	str	r2, [r3, #20]
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	4b64      	ldr	r3, [pc, #400]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003394:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003396:	4b62      	ldr	r3, [pc, #392]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339c:	611a      	str	r2, [r3, #16]
 800339e:	4b60      	ldr	r3, [pc, #384]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	4b5d      	ldr	r3, [pc, #372]	; (800351c <LCD_Scan_Dir+0x618>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <LCD_Scan_Dir+0x620>)
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	60d3      	str	r3, [r2, #12]
 80033b2:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	615a      	str	r2, [r3, #20]
 80033b8:	4b59      	ldr	r3, [pc, #356]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	4b58      	ldr	r3, [pc, #352]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80033c6:	4b55      	ldr	r3, [pc, #340]	; (800351c <LCD_Scan_Dir+0x618>)
 80033c8:	899b      	ldrh	r3, [r3, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff f9fc 	bl	80027c8 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	615a      	str	r2, [r3, #20]
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <LCD_Scan_Dir+0x620>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	615a      	str	r2, [r3, #20]
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80033fa:	4b49      	ldr	r3, [pc, #292]	; (8003520 <LCD_Scan_Dir+0x61c>)
 80033fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003400:	611a      	str	r2, [r3, #16]
 8003402:	4b47      	ldr	r3, [pc, #284]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003408:	615a      	str	r2, [r3, #20]
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <LCD_Scan_Dir+0x620>)
 800340c:	2200      	movs	r2, #0
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	615a      	str	r2, [r3, #20]
 8003416:	4b42      	ldr	r3, [pc, #264]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	611a      	str	r2, [r3, #16]
 800341c:	4b40      	ldr	r3, [pc, #256]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800341e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003422:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003424:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342a:	611a      	str	r2, [r3, #16]
 800342c:	4b3c      	ldr	r3, [pc, #240]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800342e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003432:	615a      	str	r2, [r3, #20]
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <LCD_Scan_Dir+0x618>)
 8003436:	885b      	ldrh	r3, [r3, #2]
 8003438:	3b01      	subs	r3, #1
 800343a:	121a      	asrs	r2, r3, #8
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <LCD_Scan_Dir+0x620>)
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	4b37      	ldr	r3, [pc, #220]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	615a      	str	r2, [r3, #20]
 8003446:	4b36      	ldr	r3, [pc, #216]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	611a      	str	r2, [r3, #16]
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345a:	611a      	str	r2, [r3, #16]
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800345e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <LCD_Scan_Dir+0x618>)
 8003466:	885b      	ldrh	r3, [r3, #2]
 8003468:	3b01      	subs	r3, #1
 800346a:	4a2e      	ldr	r2, [pc, #184]	; (8003524 <LCD_Scan_Dir+0x620>)
 800346c:	b2db      	uxtb	r3, r3
 800346e:	60d3      	str	r3, [r2, #12]
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	615a      	str	r2, [r3, #20]
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <LCD_Scan_Dir+0x61c>)
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	611a      	str	r2, [r3, #16]
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <LCD_Scan_Dir+0x61c>)
 800347e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003482:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003484:	e045      	b.n	8003512 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b07      	cmp	r3, #7
 800348a:	d836      	bhi.n	80034fa <LCD_Scan_Dir+0x5f6>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <LCD_Scan_Dir+0x590>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034b5 	.word	0x080034b5
 8003498:	080034bf 	.word	0x080034bf
 800349c:	080034c9 	.word	0x080034c9
 80034a0:	080034fb 	.word	0x080034fb
 80034a4:	080034d3 	.word	0x080034d3
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	080034e7 	.word	0x080034e7
 80034b0:	080034f1 	.word	0x080034f1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80034b4:	89fb      	ldrh	r3, [r7, #14]
 80034b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80034ba:	81fb      	strh	r3, [r7, #14]
			break;
 80034bc:	e01d      	b.n	80034fa <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80034be:	89fb      	ldrh	r3, [r7, #14]
 80034c0:	f043 0310 	orr.w	r3, r3, #16
 80034c4:	81fb      	strh	r3, [r7, #14]
			break;
 80034c6:	e018      	b.n	80034fa <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	81fb      	strh	r3, [r7, #14]
			break;
 80034d0:	e013      	b.n	80034fa <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80034d8:	81fb      	strh	r3, [r7, #14]
			break;
 80034da:	e00e      	b.n	80034fa <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80034dc:	89fb      	ldrh	r3, [r7, #14]
 80034de:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80034e2:	81fb      	strh	r3, [r7, #14]
			break;
 80034e4:	e009      	b.n	80034fa <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	f043 0318 	orr.w	r3, r3, #24
 80034ec:	81fb      	strh	r3, [r7, #14]
			break;
 80034ee:	e004      	b.n	80034fa <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80034f0:	89fb      	ldrh	r3, [r7, #14]
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	81fb      	strh	r3, [r7, #14]
			break;
 80034f8:	bf00      	nop
		}
		dirreg = 0X03;
 80034fa:	2303      	movs	r3, #3
 80034fc:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80034fe:	89fb      	ldrh	r3, [r7, #14]
 8003500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003504:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003506:	89fa      	ldrh	r2, [r7, #14]
 8003508:	89bb      	ldrh	r3, [r7, #12]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f9e7 	bl	80028e0 <LCD_WriteReg>
	}
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200000a0 	.word	0x200000a0
 8003520:	40011000 	.word	0x40011000
 8003524:	40010c00 	.word	0x40010c00

08003528 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	460a      	mov	r2, r1
 8003532:	80fb      	strh	r3, [r7, #6]
 8003534:	4613      	mov	r3, r2
 8003536:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8003538:	88ba      	ldrh	r2, [r7, #4]
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fa14 	bl	800296c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8003544:	f7ff fa06 	bl	8002954 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <LCD_DrawPoint+0x54>)
 800354a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354e:	611a      	str	r2, [r3, #16]
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <LCD_DrawPoint+0x54>)
 8003552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003556:	615a      	str	r2, [r3, #20]
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <LCD_DrawPoint+0x58>)
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <LCD_DrawPoint+0x5c>)
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <LCD_DrawPoint+0x54>)
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	615a      	str	r2, [r3, #20]
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <LCD_DrawPoint+0x54>)
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <LCD_DrawPoint+0x54>)
 800356e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003572:	611a      	str	r2, [r3, #16]
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40011000 	.word	0x40011000
 8003580:	2000008c 	.word	0x2000008c
 8003584:	40010c00 	.word	0x40010c00

08003588 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
 8003592:	460b      	mov	r3, r1
 8003594:	80bb      	strh	r3, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800359a:	4b75      	ldr	r3, [pc, #468]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 800359c:	889b      	ldrh	r3, [r3, #4]
 800359e:	f249 3241 	movw	r2, #37697	; 0x9341
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d005      	beq.n	80035b2 <LCD_Fast_DrawPoint+0x2a>
 80035a6:	4b72      	ldr	r3, [pc, #456]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 80035a8:	889b      	ldrh	r3, [r3, #4]
 80035aa:	f245 3210 	movw	r2, #21264	; 0x5310
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d164      	bne.n	800367c <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80035b2:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 80035b4:	895b      	ldrh	r3, [r3, #10]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f906 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80035bc:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035c2:	611a      	str	r2, [r3, #16]
 80035c4:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ca:	615a      	str	r2, [r3, #20]
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	4b69      	ldr	r3, [pc, #420]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	615a      	str	r2, [r3, #20]
 80035dc:	4b65      	ldr	r3, [pc, #404]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	4b64      	ldr	r3, [pc, #400]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80035ea:	4b62      	ldr	r3, [pc, #392]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f0:	611a      	str	r2, [r3, #16]
 80035f2:	4b60      	ldr	r3, [pc, #384]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80035f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f8:	615a      	str	r2, [r3, #20]
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	60d3      	str	r3, [r2, #12]
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	615a      	str	r2, [r3, #20]
 8003608:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003614:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 8003618:	899b      	ldrh	r3, [r3, #12]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f8d4 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003620:	4b54      	ldr	r3, [pc, #336]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003626:	611a      	str	r2, [r3, #16]
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800362a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362e:	615a      	str	r2, [r3, #20]
 8003630:	88bb      	ldrh	r3, [r7, #4]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b29a      	uxth	r2, r3
 8003636:	4b50      	ldr	r3, [pc, #320]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365c:	615a      	str	r2, [r3, #20]
 800365e:	88bb      	ldrh	r3, [r7, #4]
 8003660:	4a45      	ldr	r2, [pc, #276]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 8003662:	b2db      	uxtb	r3, r3
 8003664:	60d3      	str	r3, [r2, #12]
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	615a      	str	r2, [r3, #20]
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	611a      	str	r2, [r3, #16]
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e1e6      	b.n	8003a4a <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 800367c:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 800367e:	889b      	ldrh	r3, [r3, #4]
 8003680:	f245 5210 	movw	r2, #21776	; 0x5510
 8003684:	4293      	cmp	r3, r2
 8003686:	d179      	bne.n	800377c <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 800368a:	895b      	ldrh	r3, [r3, #10]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f89b 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800369c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a0:	615a      	str	r2, [r3, #20]
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	4b33      	ldr	r3, [pc, #204]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	615a      	str	r2, [r3, #20]
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 80036c2:	895b      	ldrh	r3, [r3, #10]
 80036c4:	3301      	adds	r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f87d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	4b27      	ldr	r3, [pc, #156]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036dc:	615a      	str	r2, [r3, #20]
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	60d3      	str	r3, [r2, #12]
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	615a      	str	r2, [r3, #20]
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	611a      	str	r2, [r3, #16]
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 80036f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 80036fc:	899b      	ldrh	r3, [r3, #12]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f862 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370a:	611a      	str	r2, [r3, #16]
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800370e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003712:	615a      	str	r2, [r3, #20]
 8003714:	88bb      	ldrh	r3, [r7, #4]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	615a      	str	r2, [r3, #20]
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	611a      	str	r2, [r3, #16]
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800372c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003730:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <LCD_Fast_DrawPoint+0x1e8>)
 8003734:	899b      	ldrh	r3, [r3, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f844 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800374a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	88bb      	ldrh	r3, [r7, #4]
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <LCD_Fast_DrawPoint+0x1f0>)
 8003754:	b2db      	uxtb	r3, r3
 8003756:	60d3      	str	r3, [r2, #12]
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	615a      	str	r2, [r3, #20]
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	611a      	str	r2, [r3, #16]
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <LCD_Fast_DrawPoint+0x1ec>)
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	611a      	str	r2, [r3, #16]
 800376c:	e16d      	b.n	8003a4a <LCD_Fast_DrawPoint+0x4c2>
 800376e:	bf00      	nop
 8003770:	200000a0 	.word	0x200000a0
 8003774:	40011000 	.word	0x40011000
 8003778:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 800377c:	4b68      	ldr	r3, [pc, #416]	; (8003920 <LCD_Fast_DrawPoint+0x398>)
 800377e:	889b      	ldrh	r3, [r3, #4]
 8003780:	f641 1263 	movw	r2, #6499	; 0x1963
 8003784:	4293      	cmp	r3, r2
 8003786:	f040 80d1 	bne.w	800392c <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <LCD_Fast_DrawPoint+0x398>)
 800378c:	799b      	ldrb	r3, [r3, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <LCD_Fast_DrawPoint+0x398>)
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80037a0:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <LCD_Fast_DrawPoint+0x398>)
 80037a2:	895b      	ldrh	r3, [r3, #10]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff f80f 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80037aa:	4b5e      	ldr	r3, [pc, #376]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	615a      	str	r2, [r3, #20]
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b29a      	uxth	r2, r3
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	4b57      	ldr	r3, [pc, #348]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	615a      	str	r2, [r3, #20]
 80037ca:	4b56      	ldr	r3, [pc, #344]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	4b54      	ldr	r3, [pc, #336]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80037d8:	4b52      	ldr	r3, [pc, #328]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037de:	611a      	str	r2, [r3, #16]
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	615a      	str	r2, [r3, #20]
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	4a4f      	ldr	r2, [pc, #316]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	60d3      	str	r3, [r2, #12]
 80037f0:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	615a      	str	r2, [r3, #20]
 80037f6:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	611a      	str	r2, [r3, #16]
 80037fc:	4b49      	ldr	r3, [pc, #292]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8003804:	4b47      	ldr	r3, [pc, #284]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	4b45      	ldr	r3, [pc, #276]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	615a      	str	r2, [r3, #20]
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	b29a      	uxth	r2, r3
 800381a:	4b43      	ldr	r3, [pc, #268]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	615a      	str	r2, [r3, #20]
 8003824:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	611a      	str	r2, [r3, #16]
 800382a:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003832:	4b3c      	ldr	r3, [pc, #240]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003838:	611a      	str	r2, [r3, #16]
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800383c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003840:	615a      	str	r2, [r3, #20]
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	4a38      	ldr	r2, [pc, #224]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 8003846:	b2db      	uxtb	r3, r3
 8003848:	60d3      	str	r3, [r2, #12]
 800384a:	4b36      	ldr	r3, [pc, #216]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	615a      	str	r2, [r3, #20]
 8003850:	4b34      	ldr	r3, [pc, #208]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	611a      	str	r2, [r3, #16]
 8003856:	4b33      	ldr	r3, [pc, #204]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <LCD_Fast_DrawPoint+0x398>)
 8003860:	899b      	ldrh	r3, [r3, #12]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe ffb0 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800386a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800386e:	611a      	str	r2, [r3, #16]
 8003870:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003876:	615a      	str	r2, [r3, #20]
 8003878:	88bb      	ldrh	r3, [r7, #4]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29a      	uxth	r2, r3
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	615a      	str	r2, [r3, #20]
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800388a:	2280      	movs	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003894:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a4:	615a      	str	r2, [r3, #20]
 80038a6:	88bb      	ldrh	r3, [r7, #4]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	60d3      	str	r3, [r2, #12]
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	615a      	str	r2, [r3, #20]
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c8:	611a      	str	r2, [r3, #16]
 80038ca:	4b16      	ldr	r3, [pc, #88]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d0:	615a      	str	r2, [r3, #20]
 80038d2:	88bb      	ldrh	r3, [r7, #4]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	615a      	str	r2, [r3, #20]
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	611a      	str	r2, [r3, #16]
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f6:	611a      	str	r2, [r3, #16]
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 80038fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fe:	615a      	str	r2, [r3, #20]
 8003900:	88bb      	ldrh	r3, [r7, #4]
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <LCD_Fast_DrawPoint+0x3a0>)
 8003904:	b2db      	uxtb	r3, r3
 8003906:	60d3      	str	r3, [r2, #12]
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	615a      	str	r2, [r3, #20]
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	611a      	str	r2, [r3, #16]
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <LCD_Fast_DrawPoint+0x39c>)
 8003916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391a:	611a      	str	r2, [r3, #16]
 800391c:	e095      	b.n	8003a4a <LCD_Fast_DrawPoint+0x4c2>
 800391e:	bf00      	nop
 8003920:	200000a0 	.word	0x200000a0
 8003924:	40011000 	.word	0x40011000
 8003928:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 800392c:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 800392e:	889b      	ldrh	r3, [r3, #4]
 8003930:	f646 0204 	movw	r2, #26628	; 0x6804
 8003934:	4293      	cmp	r3, r2
 8003936:	d16f      	bne.n	8003a18 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8003938:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 800393a:	799b      	ldrb	r3, [r3, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800394e:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003950:	895b      	ldrh	r3, [r3, #10]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe ff38 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003958:	4b54      	ldr	r3, [pc, #336]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 800395a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800395e:	611a      	str	r2, [r3, #16]
 8003960:	4b52      	ldr	r3, [pc, #328]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003966:	615a      	str	r2, [r3, #20]
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	b29a      	uxth	r2, r3
 800396e:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <LCD_Fast_DrawPoint+0x528>)
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	615a      	str	r2, [r3, #20]
 8003978:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	611a      	str	r2, [r3, #16]
 800397e:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003984:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003986:	4b49      	ldr	r3, [pc, #292]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003994:	615a      	str	r2, [r3, #20]
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <LCD_Fast_DrawPoint+0x528>)
 800399a:	b2db      	uxtb	r3, r3
 800399c:	60d3      	str	r3, [r2, #12]
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	615a      	str	r2, [r3, #20]
 80039a4:	4b41      	ldr	r3, [pc, #260]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	611a      	str	r2, [r3, #16]
 80039aa:	4b40      	ldr	r3, [pc, #256]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 80039b4:	899b      	ldrh	r3, [r3, #12]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe ff06 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80039bc:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c2:	611a      	str	r2, [r3, #16]
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ca:	615a      	str	r2, [r3, #20]
 80039cc:	88bb      	ldrh	r3, [r7, #4]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <LCD_Fast_DrawPoint+0x528>)
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	4b35      	ldr	r3, [pc, #212]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	615a      	str	r2, [r3, #20]
 80039dc:	4b33      	ldr	r3, [pc, #204]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	4b32      	ldr	r3, [pc, #200]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f0:	611a      	str	r2, [r3, #16]
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 80039f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f8:	615a      	str	r2, [r3, #20]
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <LCD_Fast_DrawPoint+0x528>)
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	60d3      	str	r3, [r2, #12]
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	615a      	str	r2, [r3, #20]
 8003a08:	4b28      	ldr	r3, [pc, #160]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	4b27      	ldr	r3, [pc, #156]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a14:	611a      	str	r2, [r3, #16]
 8003a16:	e018      	b.n	8003a4a <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003a1a:	799b      	ldrb	r3, [r3, #6]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003a30:	895b      	ldrh	r3, [r3, #10]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe ff52 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003a3e:	899b      	ldrh	r3, [r3, #12]
 8003a40:	88ba      	ldrh	r2, [r7, #4]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe ff4b 	bl	80028e0 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8003a4a:	4b18      	ldr	r3, [pc, #96]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a50:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a58:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <LCD_Fast_DrawPoint+0x520>)
 8003a5c:	891a      	ldrh	r2, [r3, #8]
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <LCD_Fast_DrawPoint+0x528>)
 8003a60:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a74:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a7c:	611a      	str	r2, [r3, #16]
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a84:	615a      	str	r2, [r3, #20]
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <LCD_Fast_DrawPoint+0x528>)
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	60d3      	str	r3, [r2, #12]
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	615a      	str	r2, [r3, #20]
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <LCD_Fast_DrawPoint+0x524>)
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	611a      	str	r2, [r3, #16]
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	200000a0 	.word	0x200000a0
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40010c00 	.word	0x40010c00
 8003ab4:	00000000 	.word	0x00000000

08003ab8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8003ac2:	20be      	movs	r0, #190	; 0xbe
 8003ac4:	f7fe fe80 	bl	80027c8 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad6:	615a      	str	r2, [r3, #20]
 8003ad8:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <LCD_SSD_BackLightSet+0x144>)
 8003ada:	2205      	movs	r2, #5
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	615a      	str	r2, [r3, #20]
 8003ae4:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b00:	615a      	str	r2, [r3, #20]
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fce1 	bl	80004cc <__aeabi_i2d>
 8003b0a:	a339      	add	r3, pc, #228	; (adr r3, 8003bf0 <LCD_SSD_BackLightSet+0x138>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fd46 	bl	80005a0 <__aeabi_dmul>
 8003b14:	4603      	mov	r3, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	4c37      	ldr	r4, [pc, #220]	; (8003bfc <LCD_SSD_BackLightSet+0x144>)
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f7fc ff4f 	bl	80009c4 <__aeabi_d2uiz>
 8003b26:	4603      	mov	r3, r0
 8003b28:	60e3      	str	r3, [r4, #12]
 8003b2a:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	615a      	str	r2, [r3, #20]
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	611a      	str	r2, [r3, #16]
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b3c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b44:	611a      	str	r2, [r3, #16]
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	615a      	str	r2, [r3, #20]
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <LCD_SSD_BackLightSet+0x144>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	60da      	str	r2, [r3, #12]
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	611a      	str	r2, [r3, #16]
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b66:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b6e:	611a      	str	r2, [r3, #16]
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b76:	615a      	str	r2, [r3, #20]
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <LCD_SSD_BackLightSet+0x144>)
 8003b7a:	22ff      	movs	r2, #255	; 0xff
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	611a      	str	r2, [r3, #16]
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8003b92:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b98:	611a      	str	r2, [r3, #16]
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba0:	615a      	str	r2, [r3, #20]
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <LCD_SSD_BackLightSet+0x144>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	615a      	str	r2, [r3, #20]
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	611a      	str	r2, [r3, #16]
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bba:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc2:	611a      	str	r2, [r3, #16]
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bca:	615a      	str	r2, [r3, #20]
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <LCD_SSD_BackLightSet+0x144>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	615a      	str	r2, [r3, #20]
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <LCD_SSD_BackLightSet+0x140>)
 8003be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be4:	611a      	str	r2, [r3, #16]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	66666666 	.word	0x66666666
 8003bf4:	40046666 	.word	0x40046666
 8003bf8:	40011000 	.word	0x40011000
 8003bfc:	40010c00 	.word	0x40010c00

08003c00 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d177      	bne.n	8003d00 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8003c10:	4b80      	ldr	r3, [pc, #512]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c18:	22f0      	movs	r2, #240	; 0xf0
 8003c1a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8003c1c:	4b7d      	ldr	r3, [pc, #500]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c22:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003c24:	4b7b      	ldr	r3, [pc, #492]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c26:	889b      	ldrh	r3, [r3, #4]
 8003c28:	f249 3241 	movw	r2, #37697	; 0x9341
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <LCD_Display_Dir+0x48>
 8003c30:	4b78      	ldr	r3, [pc, #480]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c32:	889b      	ldrh	r3, [r3, #4]
 8003c34:	f646 0204 	movw	r2, #26628	; 0x6804
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d005      	beq.n	8003c48 <LCD_Display_Dir+0x48>
 8003c3c:	4b75      	ldr	r3, [pc, #468]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d11e      	bne.n	8003c86 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8003c48:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c4a:	222c      	movs	r2, #44	; 0x2c
 8003c4c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003c4e:	4b71      	ldr	r3, [pc, #452]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c50:	222a      	movs	r2, #42	; 0x2a
 8003c52:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003c54:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c56:	222b      	movs	r2, #43	; 0x2b
 8003c58:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c5c:	889b      	ldrh	r3, [r3, #4]
 8003c5e:	f646 0204 	movw	r2, #26628	; 0x6804
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d006      	beq.n	8003c74 <LCD_Display_Dir+0x74>
 8003c66:	4b6b      	ldr	r3, [pc, #428]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c68:	889b      	ldrh	r3, [r3, #4]
 8003c6a:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f040 80c7 	bne.w	8003e02 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8003c74:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c7a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8003c7c:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c82:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003c84:	e0bd      	b.n	8003e02 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c88:	889b      	ldrh	r3, [r3, #4]
 8003c8a:	f245 5210 	movw	r2, #21776	; 0x5510
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d114      	bne.n	8003cbc <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8003c92:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c94:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003c98:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003c9a:	4b5e      	ldr	r3, [pc, #376]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003c9c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003ca0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003ca4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003ca8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8003caa:	4b5a      	ldr	r3, [pc, #360]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003cb0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8003cb2:	4b58      	ldr	r3, [pc, #352]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003cb8:	805a      	strh	r2, [r3, #2]
 8003cba:	e0a3      	b.n	8003e04 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8003cbc:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	f641 1263 	movw	r2, #6499	; 0x1963
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d111      	bne.n	8003cec <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8003cc8:	4b52      	ldr	r3, [pc, #328]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cca:	222c      	movs	r2, #44	; 0x2c
 8003ccc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8003cce:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cd0:	222b      	movs	r2, #43	; 0x2b
 8003cd2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8003cd4:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cd6:	222a      	movs	r2, #42	; 0x2a
 8003cd8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8003cda:	4b4e      	ldr	r3, [pc, #312]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ce0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8003ce2:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003ce4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ce8:	805a      	strh	r2, [r3, #2]
 8003cea:	e08b      	b.n	8003e04 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8003cec:	4b49      	ldr	r3, [pc, #292]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cee:	2222      	movs	r2, #34	; 0x22
 8003cf0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8003cf2:	4b48      	ldr	r3, [pc, #288]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8003cf8:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	819a      	strh	r2, [r3, #12]
 8003cfe:	e081      	b.n	8003e04 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8003d00:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8003d06:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d08:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d0c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d10:	22f0      	movs	r2, #240	; 0xf0
 8003d12:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d16:	889b      	ldrh	r3, [r3, #4]
 8003d18:	f249 3241 	movw	r2, #37697	; 0x9341
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d005      	beq.n	8003d2c <LCD_Display_Dir+0x12c>
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d22:	889b      	ldrh	r3, [r3, #4]
 8003d24:	f245 3210 	movw	r2, #21264	; 0x5310
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d2e:	222c      	movs	r2, #44	; 0x2c
 8003d30:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003d32:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d34:	222a      	movs	r2, #42	; 0x2a
 8003d36:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d3a:	222b      	movs	r2, #43	; 0x2b
 8003d3c:	819a      	strh	r2, [r3, #12]
 8003d3e:	e04b      	b.n	8003dd8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d42:	889b      	ldrh	r3, [r3, #4]
 8003d44:	f646 0204 	movw	r2, #26628	; 0x6804
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d109      	bne.n	8003d60 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8003d4c:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d4e:	222c      	movs	r2, #44	; 0x2c
 8003d50:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d54:	222b      	movs	r2, #43	; 0x2b
 8003d56:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8003d58:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d5a:	222a      	movs	r2, #42	; 0x2a
 8003d5c:	819a      	strh	r2, [r3, #12]
 8003d5e:	e03b      	b.n	8003dd8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8003d60:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d62:	889b      	ldrh	r3, [r3, #4]
 8003d64:	f245 5210 	movw	r2, #21776	; 0x5510
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d114      	bne.n	8003d96 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d6e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003d72:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d76:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003d7a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d7e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003d82:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d8a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d92:	805a      	strh	r2, [r3, #2]
 8003d94:	e020      	b.n	8003dd8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003d98:	889b      	ldrh	r3, [r3, #4]
 8003d9a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003da4:	222c      	movs	r2, #44	; 0x2c
 8003da6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003daa:	222a      	movs	r2, #42	; 0x2a
 8003dac:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003db0:	222b      	movs	r2, #43	; 0x2b
 8003db2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8003db4:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003db6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003dba:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003dbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003dc2:	805a      	strh	r2, [r3, #2]
 8003dc4:	e008      	b.n	8003dd8 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003dc8:	2222      	movs	r2, #34	; 0x22
 8003dca:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003dce:	2221      	movs	r2, #33	; 0x21
 8003dd0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003dda:	889b      	ldrh	r3, [r3, #4]
 8003ddc:	f646 0204 	movw	r2, #26628	; 0x6804
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d005      	beq.n	8003df0 <LCD_Display_Dir+0x1f0>
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003de6:	889b      	ldrh	r3, [r3, #4]
 8003de8:	f245 3210 	movw	r2, #21264	; 0x5310
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d109      	bne.n	8003e04 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003df2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003df6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <LCD_Display_Dir+0x214>)
 8003dfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dfe:	805a      	strh	r2, [r3, #2]
 8003e00:	e000      	b.n	8003e04 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003e02:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7ff f87d 	bl	8002f04 <LCD_Scan_Dir>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200000a0 	.word	0x200000a0

08003e18 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8003e1e:	4b90      	ldr	r3, [pc, #576]	; (8004060 <LCD_Init+0x248>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	4a8f      	ldr	r2, [pc, #572]	; (8004060 <LCD_Init+0x248>)
 8003e24:	f043 0308 	orr.w	r3, r3, #8
 8003e28:	6193      	str	r3, [r2, #24]
 8003e2a:	4b8d      	ldr	r3, [pc, #564]	; (8004060 <LCD_Init+0x248>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8003e36:	4b8a      	ldr	r3, [pc, #552]	; (8004060 <LCD_Init+0x248>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	4a89      	ldr	r2, [pc, #548]	; (8004060 <LCD_Init+0x248>)
 8003e3c:	f043 0310 	orr.w	r3, r3, #16
 8003e40:	6193      	str	r3, [r2, #24]
 8003e42:	4b87      	ldr	r3, [pc, #540]	; (8004060 <LCD_Init+0x248>)
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8003e4e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003e52:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8003e54:	2301      	movs	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8003e58:	2301      	movs	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	4619      	mov	r1, r3
 8003e66:	487f      	ldr	r0, [pc, #508]	; (8004064 <LCD_Init+0x24c>)
 8003e68:	f7fd f866 	bl	8000f38 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8003e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e70:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4619      	mov	r1, r3
 8003e78:	487b      	ldr	r0, [pc, #492]	; (8004068 <LCD_Init+0x250>)
 8003e7a:	f7fd f85d 	bl	8000f38 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8003e7e:	2032      	movs	r0, #50	; 0x32
 8003e80:	f7fc fe22 	bl	8000ac8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8003e84:	2101      	movs	r1, #1
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fe fd2a 	bl	80028e0 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8003e8c:	2032      	movs	r0, #50	; 0x32
 8003e8e:	f7fc fe1b 	bl	8000ac8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8003e92:	2000      	movs	r0, #0
 8003e94:	f7fe fd4e 	bl	8002934 <LCD_ReadReg>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b73      	ldr	r3, [pc, #460]	; (800406c <LCD_Init+0x254>)
 8003e9e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8003ea0:	4b72      	ldr	r3, [pc, #456]	; (800406c <LCD_Init+0x254>)
 8003ea2:	889b      	ldrh	r3, [r3, #4]
 8003ea4:	2bfe      	cmp	r3, #254	; 0xfe
 8003ea6:	d90b      	bls.n	8003ec0 <LCD_Init+0xa8>
 8003ea8:	4b70      	ldr	r3, [pc, #448]	; (800406c <LCD_Init+0x254>)
 8003eaa:	889b      	ldrh	r3, [r3, #4]
 8003eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d005      	beq.n	8003ec0 <LCD_Init+0xa8>
 8003eb4:	4b6d      	ldr	r3, [pc, #436]	; (800406c <LCD_Init+0x254>)
 8003eb6:	889b      	ldrh	r3, [r3, #4]
 8003eb8:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003ebc:	f040 80c8 	bne.w	8004050 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8003ec0:	20d3      	movs	r0, #211	; 0xd3
 8003ec2:	f7fe fc81 	bl	80027c8 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8003ec6:	f7fe fcc7 	bl	8002858 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8003eca:	f7fe fcc5 	bl	8002858 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8003ece:	f7fe fcc3 	bl	8002858 <LCD_RD_DATA>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b65      	ldr	r3, [pc, #404]	; (800406c <LCD_Init+0x254>)
 8003ed8:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8003eda:	4b64      	ldr	r3, [pc, #400]	; (800406c <LCD_Init+0x254>)
 8003edc:	889b      	ldrh	r3, [r3, #4]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	4b62      	ldr	r3, [pc, #392]	; (800406c <LCD_Init+0x254>)
 8003ee4:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8003ee6:	f7fe fcb7 	bl	8002858 <LCD_RD_DATA>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b5f      	ldr	r3, [pc, #380]	; (800406c <LCD_Init+0x254>)
 8003ef0:	889b      	ldrh	r3, [r3, #4]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b5d      	ldr	r3, [pc, #372]	; (800406c <LCD_Init+0x254>)
 8003ef8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8003efa:	4b5c      	ldr	r3, [pc, #368]	; (800406c <LCD_Init+0x254>)
 8003efc:	889b      	ldrh	r3, [r3, #4]
 8003efe:	f249 3241 	movw	r2, #37697	; 0x9341
 8003f02:	4293      	cmp	r3, r2
 8003f04:	f000 80a4 	beq.w	8004050 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8003f08:	20bf      	movs	r0, #191	; 0xbf
 8003f0a:	f7fe fc5d 	bl	80027c8 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8003f0e:	f7fe fca3 	bl	8002858 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8003f12:	f7fe fca1 	bl	8002858 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8003f16:	f7fe fc9f 	bl	8002858 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8003f1a:	f7fe fc9d 	bl	8002858 <LCD_RD_DATA>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b52      	ldr	r3, [pc, #328]	; (800406c <LCD_Init+0x254>)
 8003f24:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8003f26:	4b51      	ldr	r3, [pc, #324]	; (800406c <LCD_Init+0x254>)
 8003f28:	889b      	ldrh	r3, [r3, #4]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	; (800406c <LCD_Init+0x254>)
 8003f30:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8003f32:	f7fe fc91 	bl	8002858 <LCD_RD_DATA>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	; (800406c <LCD_Init+0x254>)
 8003f3c:	889b      	ldrh	r3, [r3, #4]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <LCD_Init+0x254>)
 8003f44:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8003f46:	4b49      	ldr	r3, [pc, #292]	; (800406c <LCD_Init+0x254>)
 8003f48:	889b      	ldrh	r3, [r3, #4]
 8003f4a:	f646 0204 	movw	r2, #26628	; 0x6804
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d07e      	beq.n	8004050 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8003f52:	20d4      	movs	r0, #212	; 0xd4
 8003f54:	f7fe fc38 	bl	80027c8 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8003f58:	f7fe fc7e 	bl	8002858 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8003f5c:	f7fe fc7c 	bl	8002858 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8003f60:	f7fe fc7a 	bl	8002858 <LCD_RD_DATA>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <LCD_Init+0x254>)
 8003f6a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8003f6c:	4b3f      	ldr	r3, [pc, #252]	; (800406c <LCD_Init+0x254>)
 8003f6e:	889b      	ldrh	r3, [r3, #4]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	4b3d      	ldr	r3, [pc, #244]	; (800406c <LCD_Init+0x254>)
 8003f76:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8003f78:	f7fe fc6e 	bl	8002858 <LCD_RD_DATA>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b3a      	ldr	r3, [pc, #232]	; (800406c <LCD_Init+0x254>)
 8003f82:	889b      	ldrh	r3, [r3, #4]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	4b38      	ldr	r3, [pc, #224]	; (800406c <LCD_Init+0x254>)
 8003f8a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8003f8c:	4b37      	ldr	r3, [pc, #220]	; (800406c <LCD_Init+0x254>)
 8003f8e:	889b      	ldrh	r3, [r3, #4]
 8003f90:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d05b      	beq.n	8004050 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8003f98:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8003f9c:	f7fe fc14 	bl	80027c8 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8003fa0:	f7fe fc5a 	bl	8002858 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8003fa4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8003fa8:	f7fe fc0e 	bl	80027c8 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8003fac:	f7fe fc54 	bl	8002858 <LCD_RD_DATA>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	; (800406c <LCD_Init+0x254>)
 8003fb6:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <LCD_Init+0x254>)
 8003fba:	889b      	ldrh	r3, [r3, #4]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <LCD_Init+0x254>)
 8003fc2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8003fc4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8003fc8:	f7fe fbfe 	bl	80027c8 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8003fcc:	f7fe fc44 	bl	8002858 <LCD_RD_DATA>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <LCD_Init+0x254>)
 8003fd6:	889b      	ldrh	r3, [r3, #4]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	4b23      	ldr	r3, [pc, #140]	; (800406c <LCD_Init+0x254>)
 8003fde:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <LCD_Init+0x254>)
 8003fe2:	889b      	ldrh	r3, [r3, #4]
 8003fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe8:	d103      	bne.n	8003ff2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <LCD_Init+0x254>)
 8003fec:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ff0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <LCD_Init+0x254>)
 8003ff4:	889b      	ldrh	r3, [r3, #4]
 8003ff6:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d028      	beq.n	8004050 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8003ffe:	20a1      	movs	r0, #161	; 0xa1
 8004000:	f7fe fbe2 	bl	80027c8 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8004004:	f7fe fc28 	bl	8002858 <LCD_RD_DATA>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <LCD_Init+0x254>)
 800400e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004010:	f7fe fc22 	bl	8002858 <LCD_RD_DATA>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <LCD_Init+0x254>)
 800401a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <LCD_Init+0x254>)
 800401e:	889b      	ldrh	r3, [r3, #4]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	b29a      	uxth	r2, r3
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <LCD_Init+0x254>)
 8004026:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004028:	f7fe fc16 	bl	8002858 <LCD_RD_DATA>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <LCD_Init+0x254>)
 8004032:	889b      	ldrh	r3, [r3, #4]
 8004034:	4313      	orrs	r3, r2
 8004036:	b29a      	uxth	r2, r3
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <LCD_Init+0x254>)
 800403a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <LCD_Init+0x254>)
 800403e:	889b      	ldrh	r3, [r3, #4]
 8004040:	f245 7261 	movw	r2, #22369	; 0x5761
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <LCD_Init+0x254>)
 800404a:	f641 1263 	movw	r2, #6499	; 0x1963
 800404e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <LCD_Init+0x254>)
 8004052:	889b      	ldrh	r3, [r3, #4]
 8004054:	f249 3241 	movw	r2, #37697	; 0x9341
 8004058:	4293      	cmp	r3, r2
 800405a:	f040 811f 	bne.w	800429c <LCD_Init+0x484>
 800405e:	e007      	b.n	8004070 <LCD_Init+0x258>
 8004060:	40021000 	.word	0x40021000
 8004064:	40011000 	.word	0x40011000
 8004068:	40010c00 	.word	0x40010c00
 800406c:	200000a0 	.word	0x200000a0
			{
		LCD_WR_REG(0xCF);
 8004070:	20cf      	movs	r0, #207	; 0xcf
 8004072:	f7fe fba9 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004076:	2000      	movs	r0, #0
 8004078:	f7fe fbca 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 800407c:	20c1      	movs	r0, #193	; 0xc1
 800407e:	f7fe fbc7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8004082:	2030      	movs	r0, #48	; 0x30
 8004084:	f7fe fbc4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8004088:	20ed      	movs	r0, #237	; 0xed
 800408a:	f7fe fb9d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 800408e:	2064      	movs	r0, #100	; 0x64
 8004090:	f7fe fbbe 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004094:	2003      	movs	r0, #3
 8004096:	f7fe fbbb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 800409a:	2012      	movs	r0, #18
 800409c:	f7fe fbb8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80040a0:	2081      	movs	r0, #129	; 0x81
 80040a2:	f7fe fbb5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80040a6:	20e8      	movs	r0, #232	; 0xe8
 80040a8:	f7fe fb8e 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80040ac:	2085      	movs	r0, #133	; 0x85
 80040ae:	f7fe fbaf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80040b2:	2010      	movs	r0, #16
 80040b4:	f7fe fbac 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80040b8:	207a      	movs	r0, #122	; 0x7a
 80040ba:	f7fe fba9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80040be:	20cb      	movs	r0, #203	; 0xcb
 80040c0:	f7fe fb82 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80040c4:	2039      	movs	r0, #57	; 0x39
 80040c6:	f7fe fba3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80040ca:	202c      	movs	r0, #44	; 0x2c
 80040cc:	f7fe fba0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fe fb9d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80040d6:	2034      	movs	r0, #52	; 0x34
 80040d8:	f7fe fb9a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80040dc:	2002      	movs	r0, #2
 80040de:	f7fe fb97 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 80040e2:	20f7      	movs	r0, #247	; 0xf7
 80040e4:	f7fe fb70 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80040e8:	2020      	movs	r0, #32
 80040ea:	f7fe fb91 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 80040ee:	20ea      	movs	r0, #234	; 0xea
 80040f0:	f7fe fb6a 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fe fb8b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7fe fb88 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004100:	20c0      	movs	r0, #192	; 0xc0
 8004102:	f7fe fb61 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8004106:	201b      	movs	r0, #27
 8004108:	f7fe fb82 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800410c:	20c1      	movs	r0, #193	; 0xc1
 800410e:	f7fe fb5b 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8004112:	2001      	movs	r0, #1
 8004114:	f7fe fb7c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004118:	20c5      	movs	r0, #197	; 0xc5
 800411a:	f7fe fb55 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800411e:	2030      	movs	r0, #48	; 0x30
 8004120:	f7fe fb76 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8004124:	2030      	movs	r0, #48	; 0x30
 8004126:	f7fe fb73 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800412a:	20c7      	movs	r0, #199	; 0xc7
 800412c:	f7fe fb4c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004130:	20b7      	movs	r0, #183	; 0xb7
 8004132:	f7fe fb6d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8004136:	2036      	movs	r0, #54	; 0x36
 8004138:	f7fe fb46 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800413c:	2048      	movs	r0, #72	; 0x48
 800413e:	f7fe fb67 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8004142:	203a      	movs	r0, #58	; 0x3a
 8004144:	f7fe fb40 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8004148:	2055      	movs	r0, #85	; 0x55
 800414a:	f7fe fb61 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800414e:	20b1      	movs	r0, #177	; 0xb1
 8004150:	f7fe fb3a 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004154:	2000      	movs	r0, #0
 8004156:	f7fe fb5b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800415a:	201a      	movs	r0, #26
 800415c:	f7fe fb58 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8004160:	20b6      	movs	r0, #182	; 0xb6
 8004162:	f7fe fb31 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004166:	200a      	movs	r0, #10
 8004168:	f7fe fb52 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800416c:	20a2      	movs	r0, #162	; 0xa2
 800416e:	f7fe fb4f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8004172:	20f2      	movs	r0, #242	; 0xf2
 8004174:	f7fe fb28 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fe fb49 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 800417e:	2026      	movs	r0, #38	; 0x26
 8004180:	f7fe fb22 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004184:	2001      	movs	r0, #1
 8004186:	f7fe fb43 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 800418a:	20e0      	movs	r0, #224	; 0xe0
 800418c:	f7fe fb1c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8004190:	200f      	movs	r0, #15
 8004192:	f7fe fb3d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004196:	202a      	movs	r0, #42	; 0x2a
 8004198:	f7fe fb3a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 800419c:	2028      	movs	r0, #40	; 0x28
 800419e:	f7fe fb37 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80041a2:	2008      	movs	r0, #8
 80041a4:	f7fe fb34 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80041a8:	200e      	movs	r0, #14
 80041aa:	f7fe fb31 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80041ae:	2008      	movs	r0, #8
 80041b0:	f7fe fb2e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80041b4:	2054      	movs	r0, #84	; 0x54
 80041b6:	f7fe fb2b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80041ba:	20a9      	movs	r0, #169	; 0xa9
 80041bc:	f7fe fb28 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80041c0:	2043      	movs	r0, #67	; 0x43
 80041c2:	f7fe fb25 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80041c6:	200a      	movs	r0, #10
 80041c8:	f7fe fb22 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80041cc:	200f      	movs	r0, #15
 80041ce:	f7fe fb1f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fe fb1c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041d8:	2000      	movs	r0, #0
 80041da:	f7fe fb19 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fe fb16 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7fe fb13 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 80041ea:	20e1      	movs	r0, #225	; 0xe1
 80041ec:	f7fe faec 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7fe fb0d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80041f6:	2015      	movs	r0, #21
 80041f8:	f7fe fb0a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80041fc:	2017      	movs	r0, #23
 80041fe:	f7fe fb07 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8004202:	2007      	movs	r0, #7
 8004204:	f7fe fb04 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004208:	2011      	movs	r0, #17
 800420a:	f7fe fb01 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800420e:	2006      	movs	r0, #6
 8004210:	f7fe fafe 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8004214:	202b      	movs	r0, #43	; 0x2b
 8004216:	f7fe fafb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800421a:	2056      	movs	r0, #86	; 0x56
 800421c:	f7fe faf8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004220:	203c      	movs	r0, #60	; 0x3c
 8004222:	f7fe faf5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004226:	2005      	movs	r0, #5
 8004228:	f7fe faf2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800422c:	2010      	movs	r0, #16
 800422e:	f7fe faef 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004232:	200f      	movs	r0, #15
 8004234:	f7fe faec 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004238:	203f      	movs	r0, #63	; 0x3f
 800423a:	f7fe fae9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800423e:	203f      	movs	r0, #63	; 0x3f
 8004240:	f7fe fae6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004244:	200f      	movs	r0, #15
 8004246:	f7fe fae3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800424a:	202b      	movs	r0, #43	; 0x2b
 800424c:	f7fe fabc 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004250:	2000      	movs	r0, #0
 8004252:	f7fe fadd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004256:	2000      	movs	r0, #0
 8004258:	f7fe fada 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800425c:	2001      	movs	r0, #1
 800425e:	f7fe fad7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8004262:	203f      	movs	r0, #63	; 0x3f
 8004264:	f7fe fad4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8004268:	202a      	movs	r0, #42	; 0x2a
 800426a:	f7fe faad 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800426e:	2000      	movs	r0, #0
 8004270:	f7fe face 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004274:	2000      	movs	r0, #0
 8004276:	f7fe facb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800427a:	2000      	movs	r0, #0
 800427c:	f7fe fac8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8004280:	20ef      	movs	r0, #239	; 0xef
 8004282:	f7fe fac5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8004286:	2011      	movs	r0, #17
 8004288:	f7fe fa9e 	bl	80027c8 <LCD_WR_REG>
		HAL_Delay(120);
 800428c:	2078      	movs	r0, #120	; 0x78
 800428e:	f7fc fc1b 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8004292:	2029      	movs	r0, #41	; 0x29
 8004294:	f7fe fa98 	bl	80027c8 <LCD_WR_REG>
 8004298:	f003 bcd8 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800429c:	4b58      	ldr	r3, [pc, #352]	; (8004400 <LCD_Init+0x5e8>)
 800429e:	889b      	ldrh	r3, [r3, #4]
 80042a0:	f646 0204 	movw	r2, #26628	; 0x6804
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f040 80ad 	bne.w	8004404 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80042aa:	2011      	movs	r0, #17
 80042ac:	f7fe fa8c 	bl	80027c8 <LCD_WR_REG>
		HAL_Delay(20);
 80042b0:	2014      	movs	r0, #20
 80042b2:	f7fc fc09 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80042b6:	20d0      	movs	r0, #208	; 0xd0
 80042b8:	f7fe fa86 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80042bc:	2007      	movs	r0, #7
 80042be:	f7fe faa7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80042c2:	2042      	movs	r0, #66	; 0x42
 80042c4:	f7fe faa4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80042c8:	201d      	movs	r0, #29
 80042ca:	f7fe faa1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80042ce:	20d1      	movs	r0, #209	; 0xd1
 80042d0:	f7fe fa7a 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7fe fa9b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80042da:	201a      	movs	r0, #26
 80042dc:	f7fe fa98 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80042e0:	2009      	movs	r0, #9
 80042e2:	f7fe fa95 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80042e6:	20d2      	movs	r0, #210	; 0xd2
 80042e8:	f7fe fa6e 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7fe fa8f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80042f2:	2022      	movs	r0, #34	; 0x22
 80042f4:	f7fe fa8c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80042f8:	20c0      	movs	r0, #192	; 0xc0
 80042fa:	f7fe fa65 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80042fe:	2010      	movs	r0, #16
 8004300:	f7fe fa86 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8004304:	203b      	movs	r0, #59	; 0x3b
 8004306:	f7fe fa83 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800430a:	2000      	movs	r0, #0
 800430c:	f7fe fa80 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004310:	2002      	movs	r0, #2
 8004312:	f7fe fa7d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8004316:	2011      	movs	r0, #17
 8004318:	f7fe fa7a 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800431c:	20c5      	movs	r0, #197	; 0xc5
 800431e:	f7fe fa53 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8004322:	2003      	movs	r0, #3
 8004324:	f7fe fa74 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8004328:	20c8      	movs	r0, #200	; 0xc8
 800432a:	f7fe fa4d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fe fa6e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004334:	2025      	movs	r0, #37	; 0x25
 8004336:	f7fe fa6b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800433a:	2021      	movs	r0, #33	; 0x21
 800433c:	f7fe fa68 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8004340:	2005      	movs	r0, #5
 8004342:	f7fe fa65 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004346:	2000      	movs	r0, #0
 8004348:	f7fe fa62 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800434c:	200a      	movs	r0, #10
 800434e:	f7fe fa5f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8004352:	2065      	movs	r0, #101	; 0x65
 8004354:	f7fe fa5c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004358:	2025      	movs	r0, #37	; 0x25
 800435a:	f7fe fa59 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800435e:	2077      	movs	r0, #119	; 0x77
 8004360:	f7fe fa56 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8004364:	2050      	movs	r0, #80	; 0x50
 8004366:	f7fe fa53 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800436a:	200f      	movs	r0, #15
 800436c:	f7fe fa50 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004370:	2000      	movs	r0, #0
 8004372:	f7fe fa4d 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8004376:	20f8      	movs	r0, #248	; 0xf8
 8004378:	f7fe fa26 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800437c:	2001      	movs	r0, #1
 800437e:	f7fe fa47 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8004382:	20fe      	movs	r0, #254	; 0xfe
 8004384:	f7fe fa20 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004388:	2000      	movs	r0, #0
 800438a:	f7fe fa41 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800438e:	2002      	movs	r0, #2
 8004390:	f7fe fa3e 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8004394:	2020      	movs	r0, #32
 8004396:	f7fe fa17 	bl	80027c8 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800439a:	2036      	movs	r0, #54	; 0x36
 800439c:	f7fe fa14 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80043a0:	2008      	movs	r0, #8
 80043a2:	f7fe fa35 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80043a6:	203a      	movs	r0, #58	; 0x3a
 80043a8:	f7fe fa0e 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80043ac:	2055      	movs	r0, #85	; 0x55
 80043ae:	f7fe fa2f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80043b2:	202b      	movs	r0, #43	; 0x2b
 80043b4:	f7fe fa08 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fe fa29 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fe fa26 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fe fa23 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80043ca:	203f      	movs	r0, #63	; 0x3f
 80043cc:	f7fe fa20 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80043d0:	202a      	movs	r0, #42	; 0x2a
 80043d2:	f7fe f9f9 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fe fa1a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80043dc:	2000      	movs	r0, #0
 80043de:	f7fe fa17 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80043e2:	2001      	movs	r0, #1
 80043e4:	f7fe fa14 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80043e8:	20df      	movs	r0, #223	; 0xdf
 80043ea:	f7fe fa11 	bl	8002810 <LCD_WR_DATAX>
		HAL_Delay(120);
 80043ee:	2078      	movs	r0, #120	; 0x78
 80043f0:	f7fc fb6a 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0X29);
 80043f4:	2029      	movs	r0, #41	; 0x29
 80043f6:	f7fe f9e7 	bl	80027c8 <LCD_WR_REG>
 80043fa:	f003 bc27 	b.w	8007c4c <LCD_Init+0x3e34>
 80043fe:	bf00      	nop
 8004400:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0x5310) {
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <LCD_Init+0x5fc>)
 8004406:	889b      	ldrh	r3, [r3, #4]
 8004408:	f245 3210 	movw	r2, #21264	; 0x5310
 800440c:	4293      	cmp	r3, r2
 800440e:	f040 877c 	bne.w	800530a <LCD_Init+0x14f2>
 8004412:	e001      	b.n	8004418 <LCD_Init+0x600>
 8004414:	200000a0 	.word	0x200000a0
		LCD_WR_REG(0xED);
 8004418:	20ed      	movs	r0, #237	; 0xed
 800441a:	f7fe f9d5 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800441e:	2001      	movs	r0, #1
 8004420:	f7fe f9f6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8004424:	20fe      	movs	r0, #254	; 0xfe
 8004426:	f7fe f9f3 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800442a:	20ee      	movs	r0, #238	; 0xee
 800442c:	f7fe f9cc 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8004430:	20de      	movs	r0, #222	; 0xde
 8004432:	f7fe f9ed 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004436:	2021      	movs	r0, #33	; 0x21
 8004438:	f7fe f9ea 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800443c:	20f1      	movs	r0, #241	; 0xf1
 800443e:	f7fe f9c3 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004442:	2001      	movs	r0, #1
 8004444:	f7fe f9e4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8004448:	20df      	movs	r0, #223	; 0xdf
 800444a:	f7fe f9bd 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800444e:	2010      	movs	r0, #16
 8004450:	f7fe f9de 	bl	8002810 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8004454:	20c4      	movs	r0, #196	; 0xc4
 8004456:	f7fe f9b7 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800445a:	208f      	movs	r0, #143	; 0x8f
 800445c:	f7fe f9d8 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004460:	20c6      	movs	r0, #198	; 0xc6
 8004462:	f7fe f9b1 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004466:	2000      	movs	r0, #0
 8004468:	f7fe f9d2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800446c:	20e2      	movs	r0, #226	; 0xe2
 800446e:	f7fe f9cf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004472:	20e2      	movs	r0, #226	; 0xe2
 8004474:	f7fe f9cc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004478:	20e2      	movs	r0, #226	; 0xe2
 800447a:	f7fe f9c9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800447e:	20bf      	movs	r0, #191	; 0xbf
 8004480:	f7fe f9a2 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004484:	20aa      	movs	r0, #170	; 0xaa
 8004486:	f7fe f9c3 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800448a:	20b0      	movs	r0, #176	; 0xb0
 800448c:	f7fe f99c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8004490:	200d      	movs	r0, #13
 8004492:	f7fe f9bd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fe f9ba 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800449c:	200d      	movs	r0, #13
 800449e:	f7fe f9b7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7fe f9b4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80044a8:	2011      	movs	r0, #17
 80044aa:	f7fe f9b1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fe f9ae 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80044b4:	2019      	movs	r0, #25
 80044b6:	f7fe f9ab 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fe f9a8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80044c0:	2021      	movs	r0, #33	; 0x21
 80044c2:	f7fe f9a5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fe f9a2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80044cc:	202d      	movs	r0, #45	; 0x2d
 80044ce:	f7fe f99f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fe f99c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80044d8:	203d      	movs	r0, #61	; 0x3d
 80044da:	f7fe f999 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fe f996 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80044e4:	205d      	movs	r0, #93	; 0x5d
 80044e6:	f7fe f993 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fe f990 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80044f0:	205d      	movs	r0, #93	; 0x5d
 80044f2:	f7fe f98d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7fe f98a 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80044fc:	20b1      	movs	r0, #177	; 0xb1
 80044fe:	f7fe f963 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8004502:	2080      	movs	r0, #128	; 0x80
 8004504:	f7fe f984 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004508:	2000      	movs	r0, #0
 800450a:	f7fe f981 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800450e:	208b      	movs	r0, #139	; 0x8b
 8004510:	f7fe f97e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004514:	2000      	movs	r0, #0
 8004516:	f7fe f97b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800451a:	2096      	movs	r0, #150	; 0x96
 800451c:	f7fe f978 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004520:	2000      	movs	r0, #0
 8004522:	f7fe f975 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8004526:	20b2      	movs	r0, #178	; 0xb2
 8004528:	f7fe f94e 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800452c:	2000      	movs	r0, #0
 800452e:	f7fe f96f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004532:	2000      	movs	r0, #0
 8004534:	f7fe f96c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004538:	2002      	movs	r0, #2
 800453a:	f7fe f969 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fe f966 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004544:	2003      	movs	r0, #3
 8004546:	f7fe f963 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800454a:	2000      	movs	r0, #0
 800454c:	f7fe f960 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8004550:	20b3      	movs	r0, #179	; 0xb3
 8004552:	f7fe f939 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004556:	2000      	movs	r0, #0
 8004558:	f7fe f95a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800455c:	2000      	movs	r0, #0
 800455e:	f7fe f957 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004562:	2000      	movs	r0, #0
 8004564:	f7fe f954 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004568:	2000      	movs	r0, #0
 800456a:	f7fe f951 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800456e:	2000      	movs	r0, #0
 8004570:	f7fe f94e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004574:	2000      	movs	r0, #0
 8004576:	f7fe f94b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800457a:	2000      	movs	r0, #0
 800457c:	f7fe f948 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004580:	2000      	movs	r0, #0
 8004582:	f7fe f945 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004586:	2000      	movs	r0, #0
 8004588:	f7fe f942 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800458c:	2000      	movs	r0, #0
 800458e:	f7fe f93f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004592:	2000      	movs	r0, #0
 8004594:	f7fe f93c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004598:	2000      	movs	r0, #0
 800459a:	f7fe f939 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800459e:	2000      	movs	r0, #0
 80045a0:	f7fe f936 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fe f933 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7fe f930 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fe f92d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fe f92a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fe f927 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7fe f924 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7fe f921 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fe f91e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7fe f91b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045da:	2000      	movs	r0, #0
 80045dc:	f7fe f918 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f7fe f915 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80045e6:	20b4      	movs	r0, #180	; 0xb4
 80045e8:	f7fe f8ee 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80045ec:	208b      	movs	r0, #139	; 0x8b
 80045ee:	f7fe f90f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045f2:	2000      	movs	r0, #0
 80045f4:	f7fe f90c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80045f8:	2096      	movs	r0, #150	; 0x96
 80045fa:	f7fe f909 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045fe:	2000      	movs	r0, #0
 8004600:	f7fe f906 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8004604:	20a1      	movs	r0, #161	; 0xa1
 8004606:	f7fe f903 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800460a:	2000      	movs	r0, #0
 800460c:	f7fe f900 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8004610:	20b5      	movs	r0, #181	; 0xb5
 8004612:	f7fe f8d9 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8004616:	2002      	movs	r0, #2
 8004618:	f7fe f8fa 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800461c:	2000      	movs	r0, #0
 800461e:	f7fe f8f7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004622:	2003      	movs	r0, #3
 8004624:	f7fe f8f4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004628:	2000      	movs	r0, #0
 800462a:	f7fe f8f1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800462e:	2004      	movs	r0, #4
 8004630:	f7fe f8ee 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004634:	2000      	movs	r0, #0
 8004636:	f7fe f8eb 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800463a:	20b6      	movs	r0, #182	; 0xb6
 800463c:	f7fe f8c4 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004640:	2000      	movs	r0, #0
 8004642:	f7fe f8e5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004646:	2000      	movs	r0, #0
 8004648:	f7fe f8e2 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800464c:	20b7      	movs	r0, #183	; 0xb7
 800464e:	f7fe f8bb 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004652:	2000      	movs	r0, #0
 8004654:	f7fe f8dc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fe f8d9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800465e:	203f      	movs	r0, #63	; 0x3f
 8004660:	f7fe f8d6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004664:	2000      	movs	r0, #0
 8004666:	f7fe f8d3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800466a:	205e      	movs	r0, #94	; 0x5e
 800466c:	f7fe f8d0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004670:	2000      	movs	r0, #0
 8004672:	f7fe f8cd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004676:	2064      	movs	r0, #100	; 0x64
 8004678:	f7fe f8ca 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800467c:	2000      	movs	r0, #0
 800467e:	f7fe f8c7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8004682:	208c      	movs	r0, #140	; 0x8c
 8004684:	f7fe f8c4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004688:	2000      	movs	r0, #0
 800468a:	f7fe f8c1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800468e:	20ac      	movs	r0, #172	; 0xac
 8004690:	f7fe f8be 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004694:	2000      	movs	r0, #0
 8004696:	f7fe f8bb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800469a:	20dc      	movs	r0, #220	; 0xdc
 800469c:	f7fe f8b8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7fe f8b5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80046a6:	2070      	movs	r0, #112	; 0x70
 80046a8:	f7fe f8b2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7fe f8af 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80046b2:	2090      	movs	r0, #144	; 0x90
 80046b4:	f7fe f8ac 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046b8:	2000      	movs	r0, #0
 80046ba:	f7fe f8a9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80046be:	20eb      	movs	r0, #235	; 0xeb
 80046c0:	f7fe f8a6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fe f8a3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80046ca:	20dc      	movs	r0, #220	; 0xdc
 80046cc:	f7fe f8a0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7fe f89d 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80046d6:	20b8      	movs	r0, #184	; 0xb8
 80046d8:	f7fe f876 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80046dc:	2000      	movs	r0, #0
 80046de:	f7fe f897 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fe f894 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7fe f891 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7fe f88e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046f4:	2000      	movs	r0, #0
 80046f6:	f7fe f88b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7fe f888 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004700:	2000      	movs	r0, #0
 8004702:	f7fe f885 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004706:	2000      	movs	r0, #0
 8004708:	f7fe f882 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800470c:	20ba      	movs	r0, #186	; 0xba
 800470e:	f7fe f85b 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8004712:	2024      	movs	r0, #36	; 0x24
 8004714:	f7fe f87c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004718:	2000      	movs	r0, #0
 800471a:	f7fe f879 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fe f876 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004724:	2000      	movs	r0, #0
 8004726:	f7fe f873 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800472a:	20c1      	movs	r0, #193	; 0xc1
 800472c:	f7fe f84c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004730:	2020      	movs	r0, #32
 8004732:	f7fe f86d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f7fe f86a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800473c:	2054      	movs	r0, #84	; 0x54
 800473e:	f7fe f867 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004742:	2000      	movs	r0, #0
 8004744:	f7fe f864 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8004748:	20ff      	movs	r0, #255	; 0xff
 800474a:	f7fe f861 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800474e:	2000      	movs	r0, #0
 8004750:	f7fe f85e 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8004754:	20c2      	movs	r0, #194	; 0xc2
 8004756:	f7fe f837 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800475a:	200a      	movs	r0, #10
 800475c:	f7fe f858 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004760:	2000      	movs	r0, #0
 8004762:	f7fe f855 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004766:	2004      	movs	r0, #4
 8004768:	f7fe f852 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800476c:	2000      	movs	r0, #0
 800476e:	f7fe f84f 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8004772:	20c3      	movs	r0, #195	; 0xc3
 8004774:	f7fe f828 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8004778:	203c      	movs	r0, #60	; 0x3c
 800477a:	f7fe f849 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800477e:	2000      	movs	r0, #0
 8004780:	f7fe f846 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8004784:	203a      	movs	r0, #58	; 0x3a
 8004786:	f7fe f843 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800478a:	2000      	movs	r0, #0
 800478c:	f7fe f840 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8004790:	2039      	movs	r0, #57	; 0x39
 8004792:	f7fe f83d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004796:	2000      	movs	r0, #0
 8004798:	f7fe f83a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800479c:	2037      	movs	r0, #55	; 0x37
 800479e:	f7fe f837 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047a2:	2000      	movs	r0, #0
 80047a4:	f7fe f834 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80047a8:	203c      	movs	r0, #60	; 0x3c
 80047aa:	f7fe f831 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ae:	2000      	movs	r0, #0
 80047b0:	f7fe f82e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80047b4:	2036      	movs	r0, #54	; 0x36
 80047b6:	f7fe f82b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7fe f828 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80047c0:	2032      	movs	r0, #50	; 0x32
 80047c2:	f7fe f825 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7fe f822 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80047cc:	202f      	movs	r0, #47	; 0x2f
 80047ce:	f7fe f81f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047d2:	2000      	movs	r0, #0
 80047d4:	f7fe f81c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80047d8:	202c      	movs	r0, #44	; 0x2c
 80047da:	f7fe f819 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047de:	2000      	movs	r0, #0
 80047e0:	f7fe f816 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80047e4:	2029      	movs	r0, #41	; 0x29
 80047e6:	f7fe f813 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ea:	2000      	movs	r0, #0
 80047ec:	f7fe f810 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80047f0:	2026      	movs	r0, #38	; 0x26
 80047f2:	f7fe f80d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7fe f80a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80047fc:	2024      	movs	r0, #36	; 0x24
 80047fe:	f7fe f807 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004802:	2000      	movs	r0, #0
 8004804:	f7fe f804 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004808:	2024      	movs	r0, #36	; 0x24
 800480a:	f7fe f801 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800480e:	2000      	movs	r0, #0
 8004810:	f7fd fffe 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004814:	2023      	movs	r0, #35	; 0x23
 8004816:	f7fd fffb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800481a:	2000      	movs	r0, #0
 800481c:	f7fd fff8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004820:	203c      	movs	r0, #60	; 0x3c
 8004822:	f7fd fff5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004826:	2000      	movs	r0, #0
 8004828:	f7fd fff2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800482c:	2036      	movs	r0, #54	; 0x36
 800482e:	f7fd ffef 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004832:	2000      	movs	r0, #0
 8004834:	f7fd ffec 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004838:	2032      	movs	r0, #50	; 0x32
 800483a:	f7fd ffe9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800483e:	2000      	movs	r0, #0
 8004840:	f7fd ffe6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004844:	202f      	movs	r0, #47	; 0x2f
 8004846:	f7fd ffe3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f7fd ffe0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004850:	202c      	movs	r0, #44	; 0x2c
 8004852:	f7fd ffdd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004856:	2000      	movs	r0, #0
 8004858:	f7fd ffda 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800485c:	2029      	movs	r0, #41	; 0x29
 800485e:	f7fd ffd7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004862:	2000      	movs	r0, #0
 8004864:	f7fd ffd4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004868:	2026      	movs	r0, #38	; 0x26
 800486a:	f7fd ffd1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f7fd ffce 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004874:	2024      	movs	r0, #36	; 0x24
 8004876:	f7fd ffcb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800487a:	2000      	movs	r0, #0
 800487c:	f7fd ffc8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004880:	2024      	movs	r0, #36	; 0x24
 8004882:	f7fd ffc5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004886:	2000      	movs	r0, #0
 8004888:	f7fd ffc2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800488c:	2023      	movs	r0, #35	; 0x23
 800488e:	f7fd ffbf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004892:	2000      	movs	r0, #0
 8004894:	f7fd ffbc 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8004898:	20c4      	movs	r0, #196	; 0xc4
 800489a:	f7fd ff95 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800489e:	2062      	movs	r0, #98	; 0x62
 80048a0:	f7fd ffb6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7fd ffb3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80048aa:	2005      	movs	r0, #5
 80048ac:	f7fd ffb0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7fd ffad 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80048b6:	2084      	movs	r0, #132	; 0x84
 80048b8:	f7fd ffaa 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048bc:	2000      	movs	r0, #0
 80048be:	f7fd ffa7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80048c2:	20f0      	movs	r0, #240	; 0xf0
 80048c4:	f7fd ffa4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048c8:	2000      	movs	r0, #0
 80048ca:	f7fd ffa1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80048ce:	2018      	movs	r0, #24
 80048d0:	f7fd ff9e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fd ff9b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80048da:	20a4      	movs	r0, #164	; 0xa4
 80048dc:	f7fd ff98 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7fd ff95 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80048e6:	2018      	movs	r0, #24
 80048e8:	f7fd ff92 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7fd ff8f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80048f2:	2050      	movs	r0, #80	; 0x50
 80048f4:	f7fd ff8c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7fd ff89 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80048fe:	200c      	movs	r0, #12
 8004900:	f7fd ff86 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004904:	2000      	movs	r0, #0
 8004906:	f7fd ff83 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800490a:	2017      	movs	r0, #23
 800490c:	f7fd ff80 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004910:	2000      	movs	r0, #0
 8004912:	f7fd ff7d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8004916:	2095      	movs	r0, #149	; 0x95
 8004918:	f7fd ff7a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800491c:	2000      	movs	r0, #0
 800491e:	f7fd ff77 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004922:	20f3      	movs	r0, #243	; 0xf3
 8004924:	f7fd ff74 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004928:	2000      	movs	r0, #0
 800492a:	f7fd ff71 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800492e:	20e6      	movs	r0, #230	; 0xe6
 8004930:	f7fd ff6e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004934:	2000      	movs	r0, #0
 8004936:	f7fd ff6b 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800493a:	20c5      	movs	r0, #197	; 0xc5
 800493c:	f7fd ff44 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004940:	2032      	movs	r0, #50	; 0x32
 8004942:	f7fd ff65 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004946:	2000      	movs	r0, #0
 8004948:	f7fd ff62 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800494c:	2044      	movs	r0, #68	; 0x44
 800494e:	f7fd ff5f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004952:	2000      	movs	r0, #0
 8004954:	f7fd ff5c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8004958:	2065      	movs	r0, #101	; 0x65
 800495a:	f7fd ff59 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800495e:	2000      	movs	r0, #0
 8004960:	f7fd ff56 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004964:	2076      	movs	r0, #118	; 0x76
 8004966:	f7fd ff53 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800496a:	2000      	movs	r0, #0
 800496c:	f7fd ff50 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004970:	2088      	movs	r0, #136	; 0x88
 8004972:	f7fd ff4d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004976:	2000      	movs	r0, #0
 8004978:	f7fd ff4a 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800497c:	20c6      	movs	r0, #198	; 0xc6
 800497e:	f7fd ff23 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004982:	2020      	movs	r0, #32
 8004984:	f7fd ff44 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004988:	2000      	movs	r0, #0
 800498a:	f7fd ff41 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800498e:	2017      	movs	r0, #23
 8004990:	f7fd ff3e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004994:	2000      	movs	r0, #0
 8004996:	f7fd ff3b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800499a:	2001      	movs	r0, #1
 800499c:	f7fd ff38 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fd ff35 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80049a6:	20c7      	movs	r0, #199	; 0xc7
 80049a8:	f7fd ff0e 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fd ff2f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049b2:	2000      	movs	r0, #0
 80049b4:	f7fd ff2c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fd ff29 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fd ff26 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80049c4:	20c8      	movs	r0, #200	; 0xc8
 80049c6:	f7fd feff 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7fd ff20 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fd ff1d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7fd ff1a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7fd ff17 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80049e2:	20c9      	movs	r0, #201	; 0xc9
 80049e4:	f7fd fef0 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fd ff11 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fd ff0e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fd ff0b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7fd ff08 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7fd ff05 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a06:	2000      	movs	r0, #0
 8004a08:	f7fd ff02 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fd feff 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7fd fefc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7fd fef9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7fd fef6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a24:	2000      	movs	r0, #0
 8004a26:	f7fd fef3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fd fef0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7fd feed 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7fd feea 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7fd fee7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a42:	2000      	movs	r0, #0
 8004a44:	f7fd fee4 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8004a48:	20e0      	movs	r0, #224	; 0xe0
 8004a4a:	f7fd febd 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004a4e:	2016      	movs	r0, #22
 8004a50:	f7fd fede 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a54:	2000      	movs	r0, #0
 8004a56:	f7fd fedb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004a5a:	201c      	movs	r0, #28
 8004a5c:	f7fd fed8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a60:	2000      	movs	r0, #0
 8004a62:	f7fd fed5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004a66:	2021      	movs	r0, #33	; 0x21
 8004a68:	f7fd fed2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7fd fecf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004a72:	2036      	movs	r0, #54	; 0x36
 8004a74:	f7fd fecc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f7fd fec9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8004a7e:	2046      	movs	r0, #70	; 0x46
 8004a80:	f7fd fec6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7fd fec3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004a8a:	2052      	movs	r0, #82	; 0x52
 8004a8c:	f7fd fec0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7fd febd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004a96:	2064      	movs	r0, #100	; 0x64
 8004a98:	f7fd feba 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f7fd feb7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004aa2:	207a      	movs	r0, #122	; 0x7a
 8004aa4:	f7fd feb4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f7fd feb1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004aae:	208b      	movs	r0, #139	; 0x8b
 8004ab0:	f7fd feae 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f7fd feab 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004aba:	2099      	movs	r0, #153	; 0x99
 8004abc:	f7fd fea8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7fd fea5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004ac6:	20a8      	movs	r0, #168	; 0xa8
 8004ac8:	f7fd fea2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004acc:	2000      	movs	r0, #0
 8004ace:	f7fd fe9f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004ad2:	20b9      	movs	r0, #185	; 0xb9
 8004ad4:	f7fd fe9c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fd fe99 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004ade:	20c4      	movs	r0, #196	; 0xc4
 8004ae0:	f7fd fe96 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f7fd fe93 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004aea:	20ca      	movs	r0, #202	; 0xca
 8004aec:	f7fd fe90 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7fd fe8d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004af6:	20d2      	movs	r0, #210	; 0xd2
 8004af8:	f7fd fe8a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004afc:	2000      	movs	r0, #0
 8004afe:	f7fd fe87 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8004b02:	20d9      	movs	r0, #217	; 0xd9
 8004b04:	f7fd fe84 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7fd fe81 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004b0e:	20e0      	movs	r0, #224	; 0xe0
 8004b10:	f7fd fe7e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fd fe7b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004b1a:	20f3      	movs	r0, #243	; 0xf3
 8004b1c:	f7fd fe78 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fd fe75 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8004b26:	20e1      	movs	r0, #225	; 0xe1
 8004b28:	f7fd fe4e 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004b2c:	2016      	movs	r0, #22
 8004b2e:	f7fd fe6f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b32:	2000      	movs	r0, #0
 8004b34:	f7fd fe6c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004b38:	201c      	movs	r0, #28
 8004b3a:	f7fd fe69 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fd fe66 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8004b44:	2022      	movs	r0, #34	; 0x22
 8004b46:	f7fd fe63 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fd fe60 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004b50:	2036      	movs	r0, #54	; 0x36
 8004b52:	f7fd fe5d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7fd fe5a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004b5c:	2045      	movs	r0, #69	; 0x45
 8004b5e:	f7fd fe57 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7fd fe54 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004b68:	2052      	movs	r0, #82	; 0x52
 8004b6a:	f7fd fe51 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fd fe4e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004b74:	2064      	movs	r0, #100	; 0x64
 8004b76:	f7fd fe4b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f7fd fe48 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004b80:	207a      	movs	r0, #122	; 0x7a
 8004b82:	f7fd fe45 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7fd fe42 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004b8c:	208b      	movs	r0, #139	; 0x8b
 8004b8e:	f7fd fe3f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fd fe3c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004b98:	2099      	movs	r0, #153	; 0x99
 8004b9a:	f7fd fe39 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f7fd fe36 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004ba4:	20a8      	movs	r0, #168	; 0xa8
 8004ba6:	f7fd fe33 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7fd fe30 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004bb0:	20b9      	movs	r0, #185	; 0xb9
 8004bb2:	f7fd fe2d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fd fe2a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004bbc:	20c4      	movs	r0, #196	; 0xc4
 8004bbe:	f7fd fe27 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7fd fe24 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004bc8:	20ca      	movs	r0, #202	; 0xca
 8004bca:	f7fd fe21 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fd fe1e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004bd4:	20d2      	movs	r0, #210	; 0xd2
 8004bd6:	f7fd fe1b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f7fd fe18 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8004be0:	20d8      	movs	r0, #216	; 0xd8
 8004be2:	f7fd fe15 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004be6:	2000      	movs	r0, #0
 8004be8:	f7fd fe12 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004bec:	20e0      	movs	r0, #224	; 0xe0
 8004bee:	f7fd fe0f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fd fe0c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004bf8:	20f3      	movs	r0, #243	; 0xf3
 8004bfa:	f7fd fe09 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fd fe06 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8004c04:	20e2      	movs	r0, #226	; 0xe2
 8004c06:	f7fd fddf 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004c0a:	2005      	movs	r0, #5
 8004c0c:	f7fd fe00 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fd fdfd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8004c16:	200b      	movs	r0, #11
 8004c18:	f7fd fdfa 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fd fdf7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8004c22:	201b      	movs	r0, #27
 8004c24:	f7fd fdf4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f7fd fdf1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004c2e:	2034      	movs	r0, #52	; 0x34
 8004c30:	f7fd fdee 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7fd fdeb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004c3a:	2044      	movs	r0, #68	; 0x44
 8004c3c:	f7fd fde8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c40:	2000      	movs	r0, #0
 8004c42:	f7fd fde5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8004c46:	204f      	movs	r0, #79	; 0x4f
 8004c48:	f7fd fde2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7fd fddf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8004c52:	2061      	movs	r0, #97	; 0x61
 8004c54:	f7fd fddc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7fd fdd9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8004c5e:	2079      	movs	r0, #121	; 0x79
 8004c60:	f7fd fdd6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7fd fdd3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004c6a:	2088      	movs	r0, #136	; 0x88
 8004c6c:	f7fd fdd0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fd fdcd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004c76:	2097      	movs	r0, #151	; 0x97
 8004c78:	f7fd fdca 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fd fdc7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004c82:	20a6      	movs	r0, #166	; 0xa6
 8004c84:	f7fd fdc4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f7fd fdc1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004c8e:	20b7      	movs	r0, #183	; 0xb7
 8004c90:	f7fd fdbe 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7fd fdbb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004c9a:	20c2      	movs	r0, #194	; 0xc2
 8004c9c:	f7fd fdb8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	f7fd fdb5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8004ca6:	20c7      	movs	r0, #199	; 0xc7
 8004ca8:	f7fd fdb2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cac:	2000      	movs	r0, #0
 8004cae:	f7fd fdaf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8004cb2:	20d1      	movs	r0, #209	; 0xd1
 8004cb4:	f7fd fdac 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f7fd fda9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8004cbe:	20d6      	movs	r0, #214	; 0xd6
 8004cc0:	f7fd fda6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fd fda3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004cca:	20dd      	movs	r0, #221	; 0xdd
 8004ccc:	f7fd fda0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7fd fd9d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004cd6:	20f3      	movs	r0, #243	; 0xf3
 8004cd8:	f7fd fd9a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f7fd fd97 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8004ce2:	20e3      	movs	r0, #227	; 0xe3
 8004ce4:	f7fd fd70 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004ce8:	2005      	movs	r0, #5
 8004cea:	f7fd fd91 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fd fd8e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f7fd fd8b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7fd fd88 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004d00:	201c      	movs	r0, #28
 8004d02:	f7fd fd85 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fd fd82 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8004d0c:	2033      	movs	r0, #51	; 0x33
 8004d0e:	f7fd fd7f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7fd fd7c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004d18:	2044      	movs	r0, #68	; 0x44
 8004d1a:	f7fd fd79 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7fd fd76 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004d24:	2050      	movs	r0, #80	; 0x50
 8004d26:	f7fd fd73 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7fd fd70 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8004d30:	2062      	movs	r0, #98	; 0x62
 8004d32:	f7fd fd6d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d36:	2000      	movs	r0, #0
 8004d38:	f7fd fd6a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8004d3c:	2078      	movs	r0, #120	; 0x78
 8004d3e:	f7fd fd67 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fd fd64 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004d48:	2088      	movs	r0, #136	; 0x88
 8004d4a:	f7fd fd61 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fd fd5e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004d54:	2097      	movs	r0, #151	; 0x97
 8004d56:	f7fd fd5b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7fd fd58 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004d60:	20a6      	movs	r0, #166	; 0xa6
 8004d62:	f7fd fd55 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7fd fd52 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004d6c:	20b7      	movs	r0, #183	; 0xb7
 8004d6e:	f7fd fd4f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7fd fd4c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004d78:	20c2      	movs	r0, #194	; 0xc2
 8004d7a:	f7fd fd49 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fd fd46 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8004d84:	20c7      	movs	r0, #199	; 0xc7
 8004d86:	f7fd fd43 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fd fd40 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8004d90:	20d1      	movs	r0, #209	; 0xd1
 8004d92:	f7fd fd3d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f7fd fd3a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8004d9c:	20d5      	movs	r0, #213	; 0xd5
 8004d9e:	f7fd fd37 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7fd fd34 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004da8:	20dd      	movs	r0, #221	; 0xdd
 8004daa:	f7fd fd31 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dae:	2000      	movs	r0, #0
 8004db0:	f7fd fd2e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004db4:	20f3      	movs	r0, #243	; 0xf3
 8004db6:	f7fd fd2b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fd fd28 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8004dc0:	20e4      	movs	r0, #228	; 0xe4
 8004dc2:	f7fd fd01 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	f7fd fd22 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f7fd fd1f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	f7fd fd1c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fd fd19 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004dde:	2002      	movs	r0, #2
 8004de0:	f7fd fd16 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7fd fd13 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004dea:	202a      	movs	r0, #42	; 0x2a
 8004dec:	f7fd fd10 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004df0:	2000      	movs	r0, #0
 8004df2:	f7fd fd0d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004df6:	203c      	movs	r0, #60	; 0x3c
 8004df8:	f7fd fd0a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7fd fd07 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8004e02:	204b      	movs	r0, #75	; 0x4b
 8004e04:	f7fd fd04 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7fd fd01 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004e0e:	205d      	movs	r0, #93	; 0x5d
 8004e10:	f7fd fcfe 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fd fcfb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004e1a:	2074      	movs	r0, #116	; 0x74
 8004e1c:	f7fd fcf8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7fd fcf5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004e26:	2084      	movs	r0, #132	; 0x84
 8004e28:	f7fd fcf2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fd fcef 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8004e32:	2093      	movs	r0, #147	; 0x93
 8004e34:	f7fd fcec 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f7fd fce9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004e3e:	20a2      	movs	r0, #162	; 0xa2
 8004e40:	f7fd fce6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7fd fce3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8004e4a:	20b3      	movs	r0, #179	; 0xb3
 8004e4c:	f7fd fce0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7fd fcdd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8004e56:	20be      	movs	r0, #190	; 0xbe
 8004e58:	f7fd fcda 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7fd fcd7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004e62:	20c4      	movs	r0, #196	; 0xc4
 8004e64:	f7fd fcd4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7fd fcd1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8004e6e:	20cd      	movs	r0, #205	; 0xcd
 8004e70:	f7fd fcce 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7fd fccb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004e7a:	20d3      	movs	r0, #211	; 0xd3
 8004e7c:	f7fd fcc8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e80:	2000      	movs	r0, #0
 8004e82:	f7fd fcc5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004e86:	20dd      	movs	r0, #221	; 0xdd
 8004e88:	f7fd fcc2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f7fd fcbf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004e92:	20f3      	movs	r0, #243	; 0xf3
 8004e94:	f7fd fcbc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f7fd fcb9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8004e9e:	20e5      	movs	r0, #229	; 0xe5
 8004ea0:	f7fd fc92 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f7fd fcb3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fd fcb0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f7fd fcad 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fd fcaa 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004ebc:	2002      	movs	r0, #2
 8004ebe:	f7fd fca7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7fd fca4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004ec8:	2029      	movs	r0, #41	; 0x29
 8004eca:	f7fd fca1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f7fd fc9e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004ed4:	203c      	movs	r0, #60	; 0x3c
 8004ed6:	f7fd fc9b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eda:	2000      	movs	r0, #0
 8004edc:	f7fd fc98 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8004ee0:	204b      	movs	r0, #75	; 0x4b
 8004ee2:	f7fd fc95 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fd fc92 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004eec:	205d      	movs	r0, #93	; 0x5d
 8004eee:	f7fd fc8f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f7fd fc8c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004ef8:	2074      	movs	r0, #116	; 0x74
 8004efa:	f7fd fc89 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fd fc86 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004f04:	2084      	movs	r0, #132	; 0x84
 8004f06:	f7fd fc83 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fd fc80 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8004f10:	2093      	movs	r0, #147	; 0x93
 8004f12:	f7fd fc7d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fd fc7a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004f1c:	20a2      	movs	r0, #162	; 0xa2
 8004f1e:	f7fd fc77 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fd fc74 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8004f28:	20b3      	movs	r0, #179	; 0xb3
 8004f2a:	f7fd fc71 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7fd fc6e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8004f34:	20be      	movs	r0, #190	; 0xbe
 8004f36:	f7fd fc6b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7fd fc68 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004f40:	20c4      	movs	r0, #196	; 0xc4
 8004f42:	f7fd fc65 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f46:	2000      	movs	r0, #0
 8004f48:	f7fd fc62 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8004f4c:	20cd      	movs	r0, #205	; 0xcd
 8004f4e:	f7fd fc5f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f7fd fc5c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004f58:	20d3      	movs	r0, #211	; 0xd3
 8004f5a:	f7fd fc59 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fd fc56 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004f64:	20dc      	movs	r0, #220	; 0xdc
 8004f66:	f7fd fc53 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	f7fd fc50 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004f70:	20f3      	movs	r0, #243	; 0xf3
 8004f72:	f7fd fc4d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f76:	2000      	movs	r0, #0
 8004f78:	f7fd fc4a 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8004f7c:	20e6      	movs	r0, #230	; 0xe6
 8004f7e:	f7fd fc23 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8004f82:	2011      	movs	r0, #17
 8004f84:	f7fd fc44 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f88:	2000      	movs	r0, #0
 8004f8a:	f7fd fc41 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004f8e:	2034      	movs	r0, #52	; 0x34
 8004f90:	f7fd fc3e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fd fc3b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004f9a:	2056      	movs	r0, #86	; 0x56
 8004f9c:	f7fd fc38 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fd fc35 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004fa6:	2076      	movs	r0, #118	; 0x76
 8004fa8:	f7fd fc32 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fd fc2f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8004fb2:	2077      	movs	r0, #119	; 0x77
 8004fb4:	f7fd fc2c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f7fd fc29 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004fbe:	2066      	movs	r0, #102	; 0x66
 8004fc0:	f7fd fc26 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f7fd fc23 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004fca:	2088      	movs	r0, #136	; 0x88
 8004fcc:	f7fd fc20 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fd fc1d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004fd6:	2099      	movs	r0, #153	; 0x99
 8004fd8:	f7fd fc1a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7fd fc17 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8004fe2:	20bb      	movs	r0, #187	; 0xbb
 8004fe4:	f7fd fc14 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f7fd fc11 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004fee:	2099      	movs	r0, #153	; 0x99
 8004ff0:	f7fd fc0e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f7fd fc0b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004ffa:	2066      	movs	r0, #102	; 0x66
 8004ffc:	f7fd fc08 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005000:	2000      	movs	r0, #0
 8005002:	f7fd fc05 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005006:	2055      	movs	r0, #85	; 0x55
 8005008:	f7fd fc02 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800500c:	2000      	movs	r0, #0
 800500e:	f7fd fbff 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005012:	2055      	movs	r0, #85	; 0x55
 8005014:	f7fd fbfc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fd fbf9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800501e:	2045      	movs	r0, #69	; 0x45
 8005020:	f7fd fbf6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005024:	2000      	movs	r0, #0
 8005026:	f7fd fbf3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800502a:	2043      	movs	r0, #67	; 0x43
 800502c:	f7fd fbf0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005030:	2000      	movs	r0, #0
 8005032:	f7fd fbed 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005036:	2044      	movs	r0, #68	; 0x44
 8005038:	f7fd fbea 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800503c:	2000      	movs	r0, #0
 800503e:	f7fd fbe7 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8005042:	20e7      	movs	r0, #231	; 0xe7
 8005044:	f7fd fbc0 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005048:	2032      	movs	r0, #50	; 0x32
 800504a:	f7fd fbe1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800504e:	2000      	movs	r0, #0
 8005050:	f7fd fbde 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005054:	2055      	movs	r0, #85	; 0x55
 8005056:	f7fd fbdb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800505a:	2000      	movs	r0, #0
 800505c:	f7fd fbd8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005060:	2076      	movs	r0, #118	; 0x76
 8005062:	f7fd fbd5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005066:	2000      	movs	r0, #0
 8005068:	f7fd fbd2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800506c:	2066      	movs	r0, #102	; 0x66
 800506e:	f7fd fbcf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005072:	2000      	movs	r0, #0
 8005074:	f7fd fbcc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8005078:	2067      	movs	r0, #103	; 0x67
 800507a:	f7fd fbc9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800507e:	2000      	movs	r0, #0
 8005080:	f7fd fbc6 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8005084:	2067      	movs	r0, #103	; 0x67
 8005086:	f7fd fbc3 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800508a:	2000      	movs	r0, #0
 800508c:	f7fd fbc0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005090:	2087      	movs	r0, #135	; 0x87
 8005092:	f7fd fbbd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005096:	2000      	movs	r0, #0
 8005098:	f7fd fbba 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800509c:	2099      	movs	r0, #153	; 0x99
 800509e:	f7fd fbb7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7fd fbb4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80050a8:	20bb      	movs	r0, #187	; 0xbb
 80050aa:	f7fd fbb1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ae:	2000      	movs	r0, #0
 80050b0:	f7fd fbae 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80050b4:	2099      	movs	r0, #153	; 0x99
 80050b6:	f7fd fbab 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7fd fba8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80050c0:	2077      	movs	r0, #119	; 0x77
 80050c2:	f7fd fba5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fd fba2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80050cc:	2044      	movs	r0, #68	; 0x44
 80050ce:	f7fd fb9f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050d2:	2000      	movs	r0, #0
 80050d4:	f7fd fb9c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80050d8:	2056      	movs	r0, #86	; 0x56
 80050da:	f7fd fb99 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fd fb96 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80050e4:	2023      	movs	r0, #35	; 0x23
 80050e6:	f7fd fb93 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ea:	2000      	movs	r0, #0
 80050ec:	f7fd fb90 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80050f0:	2033      	movs	r0, #51	; 0x33
 80050f2:	f7fd fb8d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fd fb8a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80050fc:	2045      	movs	r0, #69	; 0x45
 80050fe:	f7fd fb87 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005102:	2000      	movs	r0, #0
 8005104:	f7fd fb84 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005108:	20e8      	movs	r0, #232	; 0xe8
 800510a:	f7fd fb5d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800510e:	2000      	movs	r0, #0
 8005110:	f7fd fb7e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005114:	2000      	movs	r0, #0
 8005116:	f7fd fb7b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800511a:	2099      	movs	r0, #153	; 0x99
 800511c:	f7fd fb78 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005120:	2000      	movs	r0, #0
 8005122:	f7fd fb75 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005126:	2087      	movs	r0, #135	; 0x87
 8005128:	f7fd fb72 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800512c:	2000      	movs	r0, #0
 800512e:	f7fd fb6f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005132:	2088      	movs	r0, #136	; 0x88
 8005134:	f7fd fb6c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005138:	2000      	movs	r0, #0
 800513a:	f7fd fb69 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800513e:	2077      	movs	r0, #119	; 0x77
 8005140:	f7fd fb66 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005144:	2000      	movs	r0, #0
 8005146:	f7fd fb63 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800514a:	2066      	movs	r0, #102	; 0x66
 800514c:	f7fd fb60 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005150:	2000      	movs	r0, #0
 8005152:	f7fd fb5d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005156:	2088      	movs	r0, #136	; 0x88
 8005158:	f7fd fb5a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800515c:	2000      	movs	r0, #0
 800515e:	f7fd fb57 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8005162:	20aa      	movs	r0, #170	; 0xaa
 8005164:	f7fd fb54 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005168:	2000      	movs	r0, #0
 800516a:	f7fd fb51 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800516e:	20bb      	movs	r0, #187	; 0xbb
 8005170:	f7fd fb4e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005174:	2000      	movs	r0, #0
 8005176:	f7fd fb4b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800517a:	2099      	movs	r0, #153	; 0x99
 800517c:	f7fd fb48 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005180:	2000      	movs	r0, #0
 8005182:	f7fd fb45 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005186:	2066      	movs	r0, #102	; 0x66
 8005188:	f7fd fb42 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518c:	2000      	movs	r0, #0
 800518e:	f7fd fb3f 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005192:	2055      	movs	r0, #85	; 0x55
 8005194:	f7fd fb3c 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005198:	2000      	movs	r0, #0
 800519a:	f7fd fb39 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800519e:	2055      	movs	r0, #85	; 0x55
 80051a0:	f7fd fb36 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7fd fb33 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80051aa:	2044      	movs	r0, #68	; 0x44
 80051ac:	f7fd fb30 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051b0:	2000      	movs	r0, #0
 80051b2:	f7fd fb2d 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80051b6:	2044      	movs	r0, #68	; 0x44
 80051b8:	f7fd fb2a 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051bc:	2000      	movs	r0, #0
 80051be:	f7fd fb27 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80051c2:	2055      	movs	r0, #85	; 0x55
 80051c4:	f7fd fb24 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7fd fb21 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80051ce:	20e9      	movs	r0, #233	; 0xe9
 80051d0:	f7fd fafa 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80051d4:	20aa      	movs	r0, #170	; 0xaa
 80051d6:	f7fd fb1b 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fd fb18 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e0:	2000      	movs	r0, #0
 80051e2:	f7fd fb15 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7fd fb12 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fd faeb 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80051f2:	20aa      	movs	r0, #170	; 0xaa
 80051f4:	f7fd fb0c 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80051f8:	20cf      	movs	r0, #207	; 0xcf
 80051fa:	f7fd fae5 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fd fb06 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005204:	2000      	movs	r0, #0
 8005206:	f7fd fb03 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800520a:	2000      	movs	r0, #0
 800520c:	f7fd fb00 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005210:	2000      	movs	r0, #0
 8005212:	f7fd fafd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005216:	2000      	movs	r0, #0
 8005218:	f7fd fafa 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800521c:	2000      	movs	r0, #0
 800521e:	f7fd faf7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005222:	2000      	movs	r0, #0
 8005224:	f7fd faf4 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005228:	2000      	movs	r0, #0
 800522a:	f7fd faf1 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800522e:	2000      	movs	r0, #0
 8005230:	f7fd faee 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005234:	2000      	movs	r0, #0
 8005236:	f7fd faeb 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800523a:	2000      	movs	r0, #0
 800523c:	f7fd fae8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005240:	2000      	movs	r0, #0
 8005242:	f7fd fae5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005246:	2000      	movs	r0, #0
 8005248:	f7fd fae2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800524c:	2000      	movs	r0, #0
 800524e:	f7fd fadf 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005252:	2000      	movs	r0, #0
 8005254:	f7fd fadc 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005258:	2000      	movs	r0, #0
 800525a:	f7fd fad9 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800525e:	2000      	movs	r0, #0
 8005260:	f7fd fad6 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8005264:	20f0      	movs	r0, #240	; 0xf0
 8005266:	f7fd faaf 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800526a:	2000      	movs	r0, #0
 800526c:	f7fd fad0 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005270:	2050      	movs	r0, #80	; 0x50
 8005272:	f7fd facd 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005276:	2000      	movs	r0, #0
 8005278:	f7fd faca 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800527c:	2000      	movs	r0, #0
 800527e:	f7fd fac7 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005282:	2000      	movs	r0, #0
 8005284:	f7fd fac4 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8005288:	20f3      	movs	r0, #243	; 0xf3
 800528a:	f7fd fa9d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800528e:	2000      	movs	r0, #0
 8005290:	f7fd fabe 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8005294:	20f9      	movs	r0, #249	; 0xf9
 8005296:	f7fd fa97 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800529a:	2006      	movs	r0, #6
 800529c:	f7fd fab8 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80052a0:	2010      	movs	r0, #16
 80052a2:	f7fd fab5 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80052a6:	2029      	movs	r0, #41	; 0x29
 80052a8:	f7fd fab2 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7fd faaf 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80052b2:	203a      	movs	r0, #58	; 0x3a
 80052b4:	f7fd fa88 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80052b8:	2055      	movs	r0, #85	; 0x55
 80052ba:	f7fd faa9 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80052be:	2011      	movs	r0, #17
 80052c0:	f7fd fa82 	bl	80027c8 <LCD_WR_REG>
		HAL_Delay(100);
 80052c4:	2064      	movs	r0, #100	; 0x64
 80052c6:	f7fb fbff 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29);
 80052ca:	2029      	movs	r0, #41	; 0x29
 80052cc:	f7fd fa7c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80052d0:	2035      	movs	r0, #53	; 0x35
 80052d2:	f7fd fa79 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80052d6:	2000      	movs	r0, #0
 80052d8:	f7fd fa9a 	bl	8002810 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80052dc:	2051      	movs	r0, #81	; 0x51
 80052de:	f7fd fa73 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80052e2:	20ff      	movs	r0, #255	; 0xff
 80052e4:	f7fd fa94 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80052e8:	2053      	movs	r0, #83	; 0x53
 80052ea:	f7fd fa6d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80052ee:	202c      	movs	r0, #44	; 0x2c
 80052f0:	f7fd fa8e 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80052f4:	2055      	movs	r0, #85	; 0x55
 80052f6:	f7fd fa67 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80052fa:	2082      	movs	r0, #130	; 0x82
 80052fc:	f7fd fa88 	bl	8002810 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005300:	202c      	movs	r0, #44	; 0x2c
 8005302:	f7fd fa61 	bl	80027c8 <LCD_WR_REG>
 8005306:	f002 bca1 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <LCD_Init+0x1504>)
 800530c:	889b      	ldrh	r3, [r3, #4]
 800530e:	f245 5210 	movw	r2, #21776	; 0x5510
 8005312:	4293      	cmp	r3, r2
 8005314:	f040 8782 	bne.w	800621c <LCD_Init+0x2404>
 8005318:	e002      	b.n	8005320 <LCD_Init+0x1508>
 800531a:	bf00      	nop
 800531c:	200000a0 	.word	0x200000a0
		LCD_WriteReg(0xF000, 0x55);
 8005320:	2155      	movs	r1, #85	; 0x55
 8005322:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005326:	f7fd fadb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800532a:	21aa      	movs	r1, #170	; 0xaa
 800532c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005330:	f7fd fad6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005334:	2152      	movs	r1, #82	; 0x52
 8005336:	f24f 0002 	movw	r0, #61442	; 0xf002
 800533a:	f7fd fad1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800533e:	2108      	movs	r1, #8
 8005340:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005344:	f7fd facc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8005348:	2101      	movs	r1, #1
 800534a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800534e:	f7fd fac7 	bl	80028e0 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8005352:	210d      	movs	r1, #13
 8005354:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8005358:	f7fd fac2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800535c:	210d      	movs	r1, #13
 800535e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8005362:	f7fd fabd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8005366:	210d      	movs	r1, #13
 8005368:	f24b 0002 	movw	r0, #45058	; 0xb002
 800536c:	f7fd fab8 	bl	80028e0 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8005370:	2134      	movs	r1, #52	; 0x34
 8005372:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005376:	f7fd fab3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800537a:	2134      	movs	r1, #52	; 0x34
 800537c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8005380:	f7fd faae 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8005384:	2134      	movs	r1, #52	; 0x34
 8005386:	f24b 6002 	movw	r0, #46594	; 0xb602
 800538a:	f7fd faa9 	bl	80028e0 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800538e:	210d      	movs	r1, #13
 8005390:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005394:	f7fd faa4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8005398:	210d      	movs	r1, #13
 800539a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800539e:	f7fd fa9f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80053a2:	210d      	movs	r1, #13
 80053a4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80053a8:	f7fd fa9a 	bl	80028e0 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80053ac:	2134      	movs	r1, #52	; 0x34
 80053ae:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80053b2:	f7fd fa95 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80053b6:	2134      	movs	r1, #52	; 0x34
 80053b8:	f24b 7001 	movw	r0, #46849	; 0xb701
 80053bc:	f7fd fa90 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80053c0:	2134      	movs	r1, #52	; 0x34
 80053c2:	f24b 7002 	movw	r0, #46850	; 0xb702
 80053c6:	f7fd fa8b 	bl	80028e0 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80053ca:	2100      	movs	r1, #0
 80053cc:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80053d0:	f7fd fa86 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80053d4:	2100      	movs	r1, #0
 80053d6:	f24b 2001 	movw	r0, #45569	; 0xb201
 80053da:	f7fd fa81 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80053de:	2100      	movs	r1, #0
 80053e0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80053e4:	f7fd fa7c 	bl	80028e0 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80053e8:	2124      	movs	r1, #36	; 0x24
 80053ea:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80053ee:	f7fd fa77 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80053f2:	2124      	movs	r1, #36	; 0x24
 80053f4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80053f8:	f7fd fa72 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80053fc:	2124      	movs	r1, #36	; 0x24
 80053fe:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005402:	f7fd fa6d 	bl	80028e0 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8005406:	2101      	movs	r1, #1
 8005408:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800540c:	f7fd fa68 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8005410:	210f      	movs	r1, #15
 8005412:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8005416:	f7fd fa63 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800541a:	210f      	movs	r1, #15
 800541c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005420:	f7fd fa5e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8005424:	210f      	movs	r1, #15
 8005426:	f24b 3002 	movw	r0, #45826	; 0xb302
 800542a:	f7fd fa59 	bl	80028e0 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800542e:	2134      	movs	r1, #52	; 0x34
 8005430:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8005434:	f7fd fa54 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8005438:	2134      	movs	r1, #52	; 0x34
 800543a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800543e:	f7fd fa4f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8005442:	2134      	movs	r1, #52	; 0x34
 8005444:	f64b 1002 	movw	r0, #47362	; 0xb902
 8005448:	f7fd fa4a 	bl	80028e0 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800544c:	2108      	movs	r1, #8
 800544e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8005452:	f7fd fa45 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8005456:	2108      	movs	r1, #8
 8005458:	f24b 5001 	movw	r0, #46337	; 0xb501
 800545c:	f7fd fa40 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8005460:	2108      	movs	r1, #8
 8005462:	f24b 5002 	movw	r0, #46338	; 0xb502
 8005466:	f7fd fa3b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800546a:	2103      	movs	r1, #3
 800546c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8005470:	f7fd fa36 	bl	80028e0 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8005474:	2124      	movs	r1, #36	; 0x24
 8005476:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800547a:	f7fd fa31 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800547e:	2124      	movs	r1, #36	; 0x24
 8005480:	f64b 2001 	movw	r0, #47617	; 0xba01
 8005484:	f7fd fa2c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8005488:	2124      	movs	r1, #36	; 0x24
 800548a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800548e:	f7fd fa27 	bl	80028e0 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8005492:	2100      	movs	r1, #0
 8005494:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005498:	f7fd fa22 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800549c:	2178      	movs	r1, #120	; 0x78
 800549e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80054a2:	f7fd fa1d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80054a6:	2100      	movs	r1, #0
 80054a8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80054ac:	f7fd fa18 	bl	80028e0 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80054b0:	2100      	movs	r1, #0
 80054b2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80054b6:	f7fd fa13 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80054ba:	2178      	movs	r1, #120	; 0x78
 80054bc:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80054c0:	f7fd fa0e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80054c4:	2100      	movs	r1, #0
 80054c6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80054ca:	f7fd fa09 	bl	80028e0 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80054ce:	2100      	movs	r1, #0
 80054d0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80054d4:	f7fd fa04 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80054d8:	2164      	movs	r1, #100	; 0x64
 80054da:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80054de:	f7fd f9ff 	bl	80028e0 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80054e2:	2100      	movs	r1, #0
 80054e4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80054e8:	f7fd f9fa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80054ec:	2133      	movs	r1, #51	; 0x33
 80054ee:	f24d 1001 	movw	r0, #53505	; 0xd101
 80054f2:	f7fd f9f5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80054f6:	2100      	movs	r1, #0
 80054f8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80054fc:	f7fd f9f0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8005500:	2134      	movs	r1, #52	; 0x34
 8005502:	f24d 1003 	movw	r0, #53507	; 0xd103
 8005506:	f7fd f9eb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800550a:	2100      	movs	r1, #0
 800550c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005510:	f7fd f9e6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8005514:	213a      	movs	r1, #58	; 0x3a
 8005516:	f24d 1005 	movw	r0, #53509	; 0xd105
 800551a:	f7fd f9e1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800551e:	2100      	movs	r1, #0
 8005520:	f24d 1006 	movw	r0, #53510	; 0xd106
 8005524:	f7fd f9dc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8005528:	214a      	movs	r1, #74	; 0x4a
 800552a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800552e:	f7fd f9d7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8005532:	2100      	movs	r1, #0
 8005534:	f24d 1008 	movw	r0, #53512	; 0xd108
 8005538:	f7fd f9d2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800553c:	215c      	movs	r1, #92	; 0x5c
 800553e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8005542:	f7fd f9cd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8005546:	2100      	movs	r1, #0
 8005548:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800554c:	f7fd f9c8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8005550:	2181      	movs	r1, #129	; 0x81
 8005552:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005556:	f7fd f9c3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800555a:	2100      	movs	r1, #0
 800555c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8005560:	f7fd f9be 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8005564:	21a6      	movs	r1, #166	; 0xa6
 8005566:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800556a:	f7fd f9b9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800556e:	2100      	movs	r1, #0
 8005570:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005574:	f7fd f9b4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8005578:	21e5      	movs	r1, #229	; 0xe5
 800557a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800557e:	f7fd f9af 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8005582:	2101      	movs	r1, #1
 8005584:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005588:	f7fd f9aa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800558c:	2113      	movs	r1, #19
 800558e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8005592:	f7fd f9a5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8005596:	2101      	movs	r1, #1
 8005598:	f24d 1012 	movw	r0, #53522	; 0xd112
 800559c:	f7fd f9a0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80055a0:	2154      	movs	r1, #84	; 0x54
 80055a2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80055a6:	f7fd f99b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80055aa:	2101      	movs	r1, #1
 80055ac:	f24d 1014 	movw	r0, #53524	; 0xd114
 80055b0:	f7fd f996 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80055b4:	2182      	movs	r1, #130	; 0x82
 80055b6:	f24d 1015 	movw	r0, #53525	; 0xd115
 80055ba:	f7fd f991 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80055be:	2101      	movs	r1, #1
 80055c0:	f24d 1016 	movw	r0, #53526	; 0xd116
 80055c4:	f7fd f98c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80055c8:	21ca      	movs	r1, #202	; 0xca
 80055ca:	f24d 1017 	movw	r0, #53527	; 0xd117
 80055ce:	f7fd f987 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80055d2:	2102      	movs	r1, #2
 80055d4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80055d8:	f7fd f982 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80055dc:	2100      	movs	r1, #0
 80055de:	f24d 1019 	movw	r0, #53529	; 0xd119
 80055e2:	f7fd f97d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80055e6:	2102      	movs	r1, #2
 80055e8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80055ec:	f7fd f978 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80055f0:	2101      	movs	r1, #1
 80055f2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80055f6:	f7fd f973 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80055fa:	2102      	movs	r1, #2
 80055fc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005600:	f7fd f96e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8005604:	2134      	movs	r1, #52	; 0x34
 8005606:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800560a:	f7fd f969 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800560e:	2102      	movs	r1, #2
 8005610:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8005614:	f7fd f964 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8005618:	2167      	movs	r1, #103	; 0x67
 800561a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800561e:	f7fd f95f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8005622:	2102      	movs	r1, #2
 8005624:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005628:	f7fd f95a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800562c:	2184      	movs	r1, #132	; 0x84
 800562e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8005632:	f7fd f955 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8005636:	2102      	movs	r1, #2
 8005638:	f24d 1022 	movw	r0, #53538	; 0xd122
 800563c:	f7fd f950 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8005640:	21a4      	movs	r1, #164	; 0xa4
 8005642:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005646:	f7fd f94b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800564a:	2102      	movs	r1, #2
 800564c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8005650:	f7fd f946 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8005654:	21b7      	movs	r1, #183	; 0xb7
 8005656:	f24d 1025 	movw	r0, #53541	; 0xd125
 800565a:	f7fd f941 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800565e:	2102      	movs	r1, #2
 8005660:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005664:	f7fd f93c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8005668:	21cf      	movs	r1, #207	; 0xcf
 800566a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800566e:	f7fd f937 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8005672:	2102      	movs	r1, #2
 8005674:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005678:	f7fd f932 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800567c:	21de      	movs	r1, #222	; 0xde
 800567e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8005682:	f7fd f92d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8005686:	2102      	movs	r1, #2
 8005688:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800568c:	f7fd f928 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8005690:	21f2      	movs	r1, #242	; 0xf2
 8005692:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005696:	f7fd f923 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800569a:	2102      	movs	r1, #2
 800569c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80056a0:	f7fd f91e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80056a4:	21fe      	movs	r1, #254	; 0xfe
 80056a6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80056aa:	f7fd f919 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80056ae:	2103      	movs	r1, #3
 80056b0:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80056b4:	f7fd f914 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80056b8:	2110      	movs	r1, #16
 80056ba:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80056be:	f7fd f90f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80056c2:	2103      	movs	r1, #3
 80056c4:	f24d 1030 	movw	r0, #53552	; 0xd130
 80056c8:	f7fd f90a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80056cc:	2133      	movs	r1, #51	; 0x33
 80056ce:	f24d 1031 	movw	r0, #53553	; 0xd131
 80056d2:	f7fd f905 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80056d6:	2103      	movs	r1, #3
 80056d8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80056dc:	f7fd f900 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80056e0:	216d      	movs	r1, #109	; 0x6d
 80056e2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80056e6:	f7fd f8fb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80056ea:	2100      	movs	r1, #0
 80056ec:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80056f0:	f7fd f8f6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80056f4:	2133      	movs	r1, #51	; 0x33
 80056f6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80056fa:	f7fd f8f1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80056fe:	2100      	movs	r1, #0
 8005700:	f24d 2002 	movw	r0, #53762	; 0xd202
 8005704:	f7fd f8ec 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8005708:	2134      	movs	r1, #52	; 0x34
 800570a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800570e:	f7fd f8e7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8005712:	2100      	movs	r1, #0
 8005714:	f24d 2004 	movw	r0, #53764	; 0xd204
 8005718:	f7fd f8e2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800571c:	213a      	movs	r1, #58	; 0x3a
 800571e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8005722:	f7fd f8dd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8005726:	2100      	movs	r1, #0
 8005728:	f24d 2006 	movw	r0, #53766	; 0xd206
 800572c:	f7fd f8d8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8005730:	214a      	movs	r1, #74	; 0x4a
 8005732:	f24d 2007 	movw	r0, #53767	; 0xd207
 8005736:	f7fd f8d3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800573a:	2100      	movs	r1, #0
 800573c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8005740:	f7fd f8ce 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8005744:	215c      	movs	r1, #92	; 0x5c
 8005746:	f24d 2009 	movw	r0, #53769	; 0xd209
 800574a:	f7fd f8c9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800574e:	2100      	movs	r1, #0
 8005750:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005754:	f7fd f8c4 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8005758:	2181      	movs	r1, #129	; 0x81
 800575a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800575e:	f7fd f8bf 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8005762:	2100      	movs	r1, #0
 8005764:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005768:	f7fd f8ba 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800576c:	21a6      	movs	r1, #166	; 0xa6
 800576e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8005772:	f7fd f8b5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8005776:	2100      	movs	r1, #0
 8005778:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800577c:	f7fd f8b0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8005780:	21e5      	movs	r1, #229	; 0xe5
 8005782:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005786:	f7fd f8ab 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800578a:	2101      	movs	r1, #1
 800578c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005790:	f7fd f8a6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8005794:	2113      	movs	r1, #19
 8005796:	f24d 2011 	movw	r0, #53777	; 0xd211
 800579a:	f7fd f8a1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800579e:	2101      	movs	r1, #1
 80057a0:	f24d 2012 	movw	r0, #53778	; 0xd212
 80057a4:	f7fd f89c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80057a8:	2154      	movs	r1, #84	; 0x54
 80057aa:	f24d 2013 	movw	r0, #53779	; 0xd213
 80057ae:	f7fd f897 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80057b2:	2101      	movs	r1, #1
 80057b4:	f24d 2014 	movw	r0, #53780	; 0xd214
 80057b8:	f7fd f892 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80057bc:	2182      	movs	r1, #130	; 0x82
 80057be:	f24d 2015 	movw	r0, #53781	; 0xd215
 80057c2:	f7fd f88d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80057c6:	2101      	movs	r1, #1
 80057c8:	f24d 2016 	movw	r0, #53782	; 0xd216
 80057cc:	f7fd f888 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80057d0:	21ca      	movs	r1, #202	; 0xca
 80057d2:	f24d 2017 	movw	r0, #53783	; 0xd217
 80057d6:	f7fd f883 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80057da:	2102      	movs	r1, #2
 80057dc:	f24d 2018 	movw	r0, #53784	; 0xd218
 80057e0:	f7fd f87e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80057e4:	2100      	movs	r1, #0
 80057e6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80057ea:	f7fd f879 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80057ee:	2102      	movs	r1, #2
 80057f0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80057f4:	f7fd f874 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80057f8:	2101      	movs	r1, #1
 80057fa:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80057fe:	f7fd f86f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8005802:	2102      	movs	r1, #2
 8005804:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8005808:	f7fd f86a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800580c:	2134      	movs	r1, #52	; 0x34
 800580e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8005812:	f7fd f865 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8005816:	2102      	movs	r1, #2
 8005818:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800581c:	f7fd f860 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8005820:	2167      	movs	r1, #103	; 0x67
 8005822:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8005826:	f7fd f85b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800582a:	2102      	movs	r1, #2
 800582c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8005830:	f7fd f856 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8005834:	2184      	movs	r1, #132	; 0x84
 8005836:	f24d 2021 	movw	r0, #53793	; 0xd221
 800583a:	f7fd f851 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800583e:	2102      	movs	r1, #2
 8005840:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005844:	f7fd f84c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8005848:	21a4      	movs	r1, #164	; 0xa4
 800584a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800584e:	f7fd f847 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8005852:	2102      	movs	r1, #2
 8005854:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005858:	f7fd f842 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800585c:	21b7      	movs	r1, #183	; 0xb7
 800585e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8005862:	f7fd f83d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8005866:	2102      	movs	r1, #2
 8005868:	f24d 2026 	movw	r0, #53798	; 0xd226
 800586c:	f7fd f838 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8005870:	21cf      	movs	r1, #207	; 0xcf
 8005872:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005876:	f7fd f833 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800587a:	2102      	movs	r1, #2
 800587c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005880:	f7fd f82e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8005884:	21de      	movs	r1, #222	; 0xde
 8005886:	f24d 2029 	movw	r0, #53801	; 0xd229
 800588a:	f7fd f829 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800588e:	2102      	movs	r1, #2
 8005890:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005894:	f7fd f824 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8005898:	21f2      	movs	r1, #242	; 0xf2
 800589a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800589e:	f7fd f81f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80058a2:	2102      	movs	r1, #2
 80058a4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80058a8:	f7fd f81a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80058ac:	21fe      	movs	r1, #254	; 0xfe
 80058ae:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80058b2:	f7fd f815 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80058b6:	2103      	movs	r1, #3
 80058b8:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80058bc:	f7fd f810 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80058c0:	2110      	movs	r1, #16
 80058c2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80058c6:	f7fd f80b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80058ca:	2103      	movs	r1, #3
 80058cc:	f24d 2030 	movw	r0, #53808	; 0xd230
 80058d0:	f7fd f806 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80058d4:	2133      	movs	r1, #51	; 0x33
 80058d6:	f24d 2031 	movw	r0, #53809	; 0xd231
 80058da:	f7fd f801 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 80058de:	2103      	movs	r1, #3
 80058e0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80058e4:	f7fc fffc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80058e8:	216d      	movs	r1, #109	; 0x6d
 80058ea:	f24d 2033 	movw	r0, #53811	; 0xd233
 80058ee:	f7fc fff7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80058f2:	2100      	movs	r1, #0
 80058f4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80058f8:	f7fc fff2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80058fc:	2133      	movs	r1, #51	; 0x33
 80058fe:	f24d 3001 	movw	r0, #54017	; 0xd301
 8005902:	f7fc ffed 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8005906:	2100      	movs	r1, #0
 8005908:	f24d 3002 	movw	r0, #54018	; 0xd302
 800590c:	f7fc ffe8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8005910:	2134      	movs	r1, #52	; 0x34
 8005912:	f24d 3003 	movw	r0, #54019	; 0xd303
 8005916:	f7fc ffe3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 800591a:	2100      	movs	r1, #0
 800591c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8005920:	f7fc ffde 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8005924:	213a      	movs	r1, #58	; 0x3a
 8005926:	f24d 3005 	movw	r0, #54021	; 0xd305
 800592a:	f7fc ffd9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800592e:	2100      	movs	r1, #0
 8005930:	f24d 3006 	movw	r0, #54022	; 0xd306
 8005934:	f7fc ffd4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8005938:	214a      	movs	r1, #74	; 0x4a
 800593a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800593e:	f7fc ffcf 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8005942:	2100      	movs	r1, #0
 8005944:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005948:	f7fc ffca 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800594c:	215c      	movs	r1, #92	; 0x5c
 800594e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005952:	f7fc ffc5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8005956:	2100      	movs	r1, #0
 8005958:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800595c:	f7fc ffc0 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8005960:	2181      	movs	r1, #129	; 0x81
 8005962:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005966:	f7fc ffbb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800596a:	2100      	movs	r1, #0
 800596c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005970:	f7fc ffb6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8005974:	21a6      	movs	r1, #166	; 0xa6
 8005976:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800597a:	f7fc ffb1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800597e:	2100      	movs	r1, #0
 8005980:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005984:	f7fc ffac 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8005988:	21e5      	movs	r1, #229	; 0xe5
 800598a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800598e:	f7fc ffa7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8005992:	2101      	movs	r1, #1
 8005994:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005998:	f7fc ffa2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800599c:	2113      	movs	r1, #19
 800599e:	f24d 3011 	movw	r0, #54033	; 0xd311
 80059a2:	f7fc ff9d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80059a6:	2101      	movs	r1, #1
 80059a8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80059ac:	f7fc ff98 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80059b0:	2154      	movs	r1, #84	; 0x54
 80059b2:	f24d 3013 	movw	r0, #54035	; 0xd313
 80059b6:	f7fc ff93 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80059ba:	2101      	movs	r1, #1
 80059bc:	f24d 3014 	movw	r0, #54036	; 0xd314
 80059c0:	f7fc ff8e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80059c4:	2182      	movs	r1, #130	; 0x82
 80059c6:	f24d 3015 	movw	r0, #54037	; 0xd315
 80059ca:	f7fc ff89 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80059ce:	2101      	movs	r1, #1
 80059d0:	f24d 3016 	movw	r0, #54038	; 0xd316
 80059d4:	f7fc ff84 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80059d8:	21ca      	movs	r1, #202	; 0xca
 80059da:	f24d 3017 	movw	r0, #54039	; 0xd317
 80059de:	f7fc ff7f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80059e2:	2102      	movs	r1, #2
 80059e4:	f24d 3018 	movw	r0, #54040	; 0xd318
 80059e8:	f7fc ff7a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80059ec:	2100      	movs	r1, #0
 80059ee:	f24d 3019 	movw	r0, #54041	; 0xd319
 80059f2:	f7fc ff75 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80059f6:	2102      	movs	r1, #2
 80059f8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80059fc:	f7fc ff70 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8005a00:	2101      	movs	r1, #1
 8005a02:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8005a06:	f7fc ff6b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8005a10:	f7fc ff66 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8005a14:	2134      	movs	r1, #52	; 0x34
 8005a16:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8005a1a:	f7fc ff61 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8005a1e:	2102      	movs	r1, #2
 8005a20:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8005a24:	f7fc ff5c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8005a28:	2167      	movs	r1, #103	; 0x67
 8005a2a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8005a2e:	f7fc ff57 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8005a32:	2102      	movs	r1, #2
 8005a34:	f24d 3020 	movw	r0, #54048	; 0xd320
 8005a38:	f7fc ff52 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8005a3c:	2184      	movs	r1, #132	; 0x84
 8005a3e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8005a42:	f7fc ff4d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8005a46:	2102      	movs	r1, #2
 8005a48:	f24d 3022 	movw	r0, #54050	; 0xd322
 8005a4c:	f7fc ff48 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8005a50:	21a4      	movs	r1, #164	; 0xa4
 8005a52:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005a56:	f7fc ff43 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8005a60:	f7fc ff3e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8005a64:	21b7      	movs	r1, #183	; 0xb7
 8005a66:	f24d 3025 	movw	r0, #54053	; 0xd325
 8005a6a:	f7fc ff39 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8005a6e:	2102      	movs	r1, #2
 8005a70:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005a74:	f7fc ff34 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8005a78:	21cf      	movs	r1, #207	; 0xcf
 8005a7a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8005a7e:	f7fc ff2f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8005a82:	2102      	movs	r1, #2
 8005a84:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005a88:	f7fc ff2a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8005a8c:	21de      	movs	r1, #222	; 0xde
 8005a8e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8005a92:	f7fc ff25 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8005a96:	2102      	movs	r1, #2
 8005a98:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8005a9c:	f7fc ff20 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8005aa0:	21f2      	movs	r1, #242	; 0xf2
 8005aa2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005aa6:	f7fc ff1b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8005aaa:	2102      	movs	r1, #2
 8005aac:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005ab0:	f7fc ff16 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8005ab4:	21fe      	movs	r1, #254	; 0xfe
 8005ab6:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8005aba:	f7fc ff11 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8005abe:	2103      	movs	r1, #3
 8005ac0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005ac4:	f7fc ff0c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8005ac8:	2110      	movs	r1, #16
 8005aca:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8005ace:	f7fc ff07 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8005ad2:	2103      	movs	r1, #3
 8005ad4:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005ad8:	f7fc ff02 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8005adc:	2133      	movs	r1, #51	; 0x33
 8005ade:	f24d 3031 	movw	r0, #54065	; 0xd331
 8005ae2:	f7fc fefd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8005ae6:	2103      	movs	r1, #3
 8005ae8:	f24d 3032 	movw	r0, #54066	; 0xd332
 8005aec:	f7fc fef8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8005af0:	216d      	movs	r1, #109	; 0x6d
 8005af2:	f24d 3033 	movw	r0, #54067	; 0xd333
 8005af6:	f7fc fef3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8005afa:	2100      	movs	r1, #0
 8005afc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005b00:	f7fc feee 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8005b04:	2133      	movs	r1, #51	; 0x33
 8005b06:	f24d 4001 	movw	r0, #54273	; 0xd401
 8005b0a:	f7fc fee9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8005b0e:	2100      	movs	r1, #0
 8005b10:	f24d 4002 	movw	r0, #54274	; 0xd402
 8005b14:	f7fc fee4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8005b18:	2134      	movs	r1, #52	; 0x34
 8005b1a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8005b1e:	f7fc fedf 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8005b22:	2100      	movs	r1, #0
 8005b24:	f24d 4004 	movw	r0, #54276	; 0xd404
 8005b28:	f7fc feda 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8005b2c:	213a      	movs	r1, #58	; 0x3a
 8005b2e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8005b32:	f7fc fed5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8005b36:	2100      	movs	r1, #0
 8005b38:	f24d 4006 	movw	r0, #54278	; 0xd406
 8005b3c:	f7fc fed0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8005b40:	214a      	movs	r1, #74	; 0x4a
 8005b42:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005b46:	f7fc fecb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8005b50:	f7fc fec6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8005b54:	215c      	movs	r1, #92	; 0x5c
 8005b56:	f24d 4009 	movw	r0, #54281	; 0xd409
 8005b5a:	f7fc fec1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8005b5e:	2100      	movs	r1, #0
 8005b60:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005b64:	f7fc febc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8005b68:	2181      	movs	r1, #129	; 0x81
 8005b6a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8005b6e:	f7fc feb7 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8005b72:	2100      	movs	r1, #0
 8005b74:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005b78:	f7fc feb2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8005b7c:	21a6      	movs	r1, #166	; 0xa6
 8005b7e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8005b82:	f7fc fead 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8005b86:	2100      	movs	r1, #0
 8005b88:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005b8c:	f7fc fea8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8005b90:	21e5      	movs	r1, #229	; 0xe5
 8005b92:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005b96:	f7fc fea3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005ba0:	f7fc fe9e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8005ba4:	2113      	movs	r1, #19
 8005ba6:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005baa:	f7fc fe99 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8005bae:	2101      	movs	r1, #1
 8005bb0:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005bb4:	f7fc fe94 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8005bb8:	2154      	movs	r1, #84	; 0x54
 8005bba:	f24d 4013 	movw	r0, #54291	; 0xd413
 8005bbe:	f7fc fe8f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005bc8:	f7fc fe8a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8005bcc:	2182      	movs	r1, #130	; 0x82
 8005bce:	f24d 4015 	movw	r0, #54293	; 0xd415
 8005bd2:	f7fc fe85 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005bdc:	f7fc fe80 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8005be0:	21ca      	movs	r1, #202	; 0xca
 8005be2:	f24d 4017 	movw	r0, #54295	; 0xd417
 8005be6:	f7fc fe7b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8005bea:	2102      	movs	r1, #2
 8005bec:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005bf0:	f7fc fe76 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8005bfa:	f7fc fe71 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8005bfe:	2102      	movs	r1, #2
 8005c00:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8005c04:	f7fc fe6c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8005c08:	2101      	movs	r1, #1
 8005c0a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8005c0e:	f7fc fe67 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8005c12:	2102      	movs	r1, #2
 8005c14:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8005c18:	f7fc fe62 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8005c1c:	2134      	movs	r1, #52	; 0x34
 8005c1e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8005c22:	f7fc fe5d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8005c26:	2102      	movs	r1, #2
 8005c28:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8005c2c:	f7fc fe58 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8005c30:	2167      	movs	r1, #103	; 0x67
 8005c32:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8005c36:	f7fc fe53 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8005c40:	f7fc fe4e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8005c44:	2184      	movs	r1, #132	; 0x84
 8005c46:	f24d 4021 	movw	r0, #54305	; 0xd421
 8005c4a:	f7fc fe49 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8005c4e:	2102      	movs	r1, #2
 8005c50:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005c54:	f7fc fe44 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8005c58:	21a4      	movs	r1, #164	; 0xa4
 8005c5a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8005c5e:	f7fc fe3f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8005c62:	2102      	movs	r1, #2
 8005c64:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005c68:	f7fc fe3a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8005c6c:	21b7      	movs	r1, #183	; 0xb7
 8005c6e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8005c72:	f7fc fe35 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8005c76:	2102      	movs	r1, #2
 8005c78:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005c7c:	f7fc fe30 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8005c80:	21cf      	movs	r1, #207	; 0xcf
 8005c82:	f24d 4027 	movw	r0, #54311	; 0xd427
 8005c86:	f7fc fe2b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005c90:	f7fc fe26 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8005c94:	21de      	movs	r1, #222	; 0xde
 8005c96:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005c9a:	f7fc fe21 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005ca4:	f7fc fe1c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8005ca8:	21f2      	movs	r1, #242	; 0xf2
 8005caa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8005cae:	f7fc fe17 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005cb8:	f7fc fe12 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8005cbc:	21fe      	movs	r1, #254	; 0xfe
 8005cbe:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8005cc2:	f7fc fe0d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8005ccc:	f7fc fe08 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8005cd0:	2110      	movs	r1, #16
 8005cd2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8005cd6:	f7fc fe03 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8005cda:	2103      	movs	r1, #3
 8005cdc:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005ce0:	f7fc fdfe 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8005ce4:	2133      	movs	r1, #51	; 0x33
 8005ce6:	f24d 4031 	movw	r0, #54321	; 0xd431
 8005cea:	f7fc fdf9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8005cee:	2103      	movs	r1, #3
 8005cf0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8005cf4:	f7fc fdf4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8005cf8:	216d      	movs	r1, #109	; 0x6d
 8005cfa:	f24d 4033 	movw	r0, #54323	; 0xd433
 8005cfe:	f7fc fdef 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8005d02:	2100      	movs	r1, #0
 8005d04:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8005d08:	f7fc fdea 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8005d0c:	2133      	movs	r1, #51	; 0x33
 8005d0e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8005d12:	f7fc fde5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8005d16:	2100      	movs	r1, #0
 8005d18:	f24d 5002 	movw	r0, #54530	; 0xd502
 8005d1c:	f7fc fde0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8005d20:	2134      	movs	r1, #52	; 0x34
 8005d22:	f24d 5003 	movw	r0, #54531	; 0xd503
 8005d26:	f7fc fddb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8005d30:	f7fc fdd6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8005d34:	213a      	movs	r1, #58	; 0x3a
 8005d36:	f24d 5005 	movw	r0, #54533	; 0xd505
 8005d3a:	f7fc fdd1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8005d3e:	2100      	movs	r1, #0
 8005d40:	f24d 5006 	movw	r0, #54534	; 0xd506
 8005d44:	f7fc fdcc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8005d48:	214a      	movs	r1, #74	; 0x4a
 8005d4a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8005d4e:	f7fc fdc7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8005d52:	2100      	movs	r1, #0
 8005d54:	f24d 5008 	movw	r0, #54536	; 0xd508
 8005d58:	f7fc fdc2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8005d5c:	215c      	movs	r1, #92	; 0x5c
 8005d5e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8005d62:	f7fc fdbd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8005d66:	2100      	movs	r1, #0
 8005d68:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8005d6c:	f7fc fdb8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8005d70:	2181      	movs	r1, #129	; 0x81
 8005d72:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8005d76:	f7fc fdb3 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8005d80:	f7fc fdae 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8005d84:	21a6      	movs	r1, #166	; 0xa6
 8005d86:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8005d8a:	f7fc fda9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8005d8e:	2100      	movs	r1, #0
 8005d90:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8005d94:	f7fc fda4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8005d98:	21e5      	movs	r1, #229	; 0xe5
 8005d9a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8005d9e:	f7fc fd9f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8005da2:	2101      	movs	r1, #1
 8005da4:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005da8:	f7fc fd9a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8005dac:	2113      	movs	r1, #19
 8005dae:	f24d 5011 	movw	r0, #54545	; 0xd511
 8005db2:	f7fc fd95 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8005db6:	2101      	movs	r1, #1
 8005db8:	f24d 5012 	movw	r0, #54546	; 0xd512
 8005dbc:	f7fc fd90 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8005dc0:	2154      	movs	r1, #84	; 0x54
 8005dc2:	f24d 5013 	movw	r0, #54547	; 0xd513
 8005dc6:	f7fc fd8b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	f24d 5014 	movw	r0, #54548	; 0xd514
 8005dd0:	f7fc fd86 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8005dd4:	2182      	movs	r1, #130	; 0x82
 8005dd6:	f24d 5015 	movw	r0, #54549	; 0xd515
 8005dda:	f7fc fd81 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8005dde:	2101      	movs	r1, #1
 8005de0:	f24d 5016 	movw	r0, #54550	; 0xd516
 8005de4:	f7fc fd7c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8005de8:	21ca      	movs	r1, #202	; 0xca
 8005dea:	f24d 5017 	movw	r0, #54551	; 0xd517
 8005dee:	f7fc fd77 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8005df2:	2102      	movs	r1, #2
 8005df4:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005df8:	f7fc fd72 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f24d 5019 	movw	r0, #54553	; 0xd519
 8005e02:	f7fc fd6d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8005e06:	2102      	movs	r1, #2
 8005e08:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8005e0c:	f7fc fd68 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8005e10:	2101      	movs	r1, #1
 8005e12:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8005e16:	f7fc fd63 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8005e20:	f7fc fd5e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8005e24:	2134      	movs	r1, #52	; 0x34
 8005e26:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8005e2a:	f7fc fd59 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8005e2e:	2102      	movs	r1, #2
 8005e30:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8005e34:	f7fc fd54 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8005e38:	2167      	movs	r1, #103	; 0x67
 8005e3a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8005e3e:	f7fc fd4f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8005e42:	2102      	movs	r1, #2
 8005e44:	f24d 5020 	movw	r0, #54560	; 0xd520
 8005e48:	f7fc fd4a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8005e4c:	2184      	movs	r1, #132	; 0x84
 8005e4e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8005e52:	f7fc fd45 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8005e56:	2102      	movs	r1, #2
 8005e58:	f24d 5022 	movw	r0, #54562	; 0xd522
 8005e5c:	f7fc fd40 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8005e60:	21a4      	movs	r1, #164	; 0xa4
 8005e62:	f24d 5023 	movw	r0, #54563	; 0xd523
 8005e66:	f7fc fd3b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005e70:	f7fc fd36 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8005e74:	21b7      	movs	r1, #183	; 0xb7
 8005e76:	f24d 5025 	movw	r0, #54565	; 0xd525
 8005e7a:	f7fc fd31 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8005e7e:	2102      	movs	r1, #2
 8005e80:	f24d 5026 	movw	r0, #54566	; 0xd526
 8005e84:	f7fc fd2c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8005e88:	21cf      	movs	r1, #207	; 0xcf
 8005e8a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8005e8e:	f7fc fd27 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8005e92:	2102      	movs	r1, #2
 8005e94:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005e98:	f7fc fd22 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8005e9c:	21de      	movs	r1, #222	; 0xde
 8005e9e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8005ea2:	f7fc fd1d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8005eac:	f7fc fd18 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8005eb0:	21f2      	movs	r1, #242	; 0xf2
 8005eb2:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8005eb6:	f7fc fd13 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8005eba:	2102      	movs	r1, #2
 8005ebc:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8005ec0:	f7fc fd0e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8005ec4:	21fe      	movs	r1, #254	; 0xfe
 8005ec6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8005eca:	f7fc fd09 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8005ece:	2103      	movs	r1, #3
 8005ed0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8005ed4:	f7fc fd04 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8005ed8:	2110      	movs	r1, #16
 8005eda:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8005ede:	f7fc fcff 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8005ee2:	2103      	movs	r1, #3
 8005ee4:	f24d 5030 	movw	r0, #54576	; 0xd530
 8005ee8:	f7fc fcfa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8005eec:	2133      	movs	r1, #51	; 0x33
 8005eee:	f24d 5031 	movw	r0, #54577	; 0xd531
 8005ef2:	f7fc fcf5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8005ef6:	2103      	movs	r1, #3
 8005ef8:	f24d 5032 	movw	r0, #54578	; 0xd532
 8005efc:	f7fc fcf0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8005f00:	216d      	movs	r1, #109	; 0x6d
 8005f02:	f24d 5033 	movw	r0, #54579	; 0xd533
 8005f06:	f7fc fceb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8005f10:	f7fc fce6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8005f14:	2133      	movs	r1, #51	; 0x33
 8005f16:	f24d 6001 	movw	r0, #54785	; 0xd601
 8005f1a:	f7fc fce1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8005f1e:	2100      	movs	r1, #0
 8005f20:	f24d 6002 	movw	r0, #54786	; 0xd602
 8005f24:	f7fc fcdc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8005f28:	2134      	movs	r1, #52	; 0x34
 8005f2a:	f24d 6003 	movw	r0, #54787	; 0xd603
 8005f2e:	f7fc fcd7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8005f32:	2100      	movs	r1, #0
 8005f34:	f24d 6004 	movw	r0, #54788	; 0xd604
 8005f38:	f7fc fcd2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8005f3c:	213a      	movs	r1, #58	; 0x3a
 8005f3e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8005f42:	f7fc fccd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8005f46:	2100      	movs	r1, #0
 8005f48:	f24d 6006 	movw	r0, #54790	; 0xd606
 8005f4c:	f7fc fcc8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8005f50:	214a      	movs	r1, #74	; 0x4a
 8005f52:	f24d 6007 	movw	r0, #54791	; 0xd607
 8005f56:	f7fc fcc3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8005f60:	f7fc fcbe 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8005f64:	215c      	movs	r1, #92	; 0x5c
 8005f66:	f24d 6009 	movw	r0, #54793	; 0xd609
 8005f6a:	f7fc fcb9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8005f6e:	2100      	movs	r1, #0
 8005f70:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8005f74:	f7fc fcb4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8005f78:	2181      	movs	r1, #129	; 0x81
 8005f7a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8005f7e:	f7fc fcaf 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8005f82:	2100      	movs	r1, #0
 8005f84:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005f88:	f7fc fcaa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8005f8c:	21a6      	movs	r1, #166	; 0xa6
 8005f8e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8005f92:	f7fc fca5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8005f96:	2100      	movs	r1, #0
 8005f98:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8005f9c:	f7fc fca0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8005fa0:	21e5      	movs	r1, #229	; 0xe5
 8005fa2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8005fa6:	f7fc fc9b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8005faa:	2101      	movs	r1, #1
 8005fac:	f24d 6010 	movw	r0, #54800	; 0xd610
 8005fb0:	f7fc fc96 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8005fb4:	2113      	movs	r1, #19
 8005fb6:	f24d 6011 	movw	r0, #54801	; 0xd611
 8005fba:	f7fc fc91 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	f24d 6012 	movw	r0, #54802	; 0xd612
 8005fc4:	f7fc fc8c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8005fc8:	2154      	movs	r1, #84	; 0x54
 8005fca:	f24d 6013 	movw	r0, #54803	; 0xd613
 8005fce:	f7fc fc87 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005fd8:	f7fc fc82 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8005fdc:	2182      	movs	r1, #130	; 0x82
 8005fde:	f24d 6015 	movw	r0, #54805	; 0xd615
 8005fe2:	f7fc fc7d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	f24d 6016 	movw	r0, #54806	; 0xd616
 8005fec:	f7fc fc78 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8005ff0:	21ca      	movs	r1, #202	; 0xca
 8005ff2:	f24d 6017 	movw	r0, #54807	; 0xd617
 8005ff6:	f7fc fc73 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006000:	f7fc fc6e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8006004:	2100      	movs	r1, #0
 8006006:	f24d 6019 	movw	r0, #54809	; 0xd619
 800600a:	f7fc fc69 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800600e:	2102      	movs	r1, #2
 8006010:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8006014:	f7fc fc64 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006018:	2101      	movs	r1, #1
 800601a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800601e:	f7fc fc5f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8006022:	2102      	movs	r1, #2
 8006024:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006028:	f7fc fc5a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800602c:	2134      	movs	r1, #52	; 0x34
 800602e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8006032:	f7fc fc55 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8006036:	2102      	movs	r1, #2
 8006038:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800603c:	f7fc fc50 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8006040:	2167      	movs	r1, #103	; 0x67
 8006042:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8006046:	f7fc fc4b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800604a:	2102      	movs	r1, #2
 800604c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8006050:	f7fc fc46 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8006054:	2184      	movs	r1, #132	; 0x84
 8006056:	f24d 6021 	movw	r0, #54817	; 0xd621
 800605a:	f7fc fc41 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800605e:	2102      	movs	r1, #2
 8006060:	f24d 6022 	movw	r0, #54818	; 0xd622
 8006064:	f7fc fc3c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8006068:	21a4      	movs	r1, #164	; 0xa4
 800606a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800606e:	f7fc fc37 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8006072:	2102      	movs	r1, #2
 8006074:	f24d 6024 	movw	r0, #54820	; 0xd624
 8006078:	f7fc fc32 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 800607c:	21b7      	movs	r1, #183	; 0xb7
 800607e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8006082:	f7fc fc2d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8006086:	2102      	movs	r1, #2
 8006088:	f24d 6026 	movw	r0, #54822	; 0xd626
 800608c:	f7fc fc28 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8006090:	21cf      	movs	r1, #207	; 0xcf
 8006092:	f24d 6027 	movw	r0, #54823	; 0xd627
 8006096:	f7fc fc23 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 800609a:	2102      	movs	r1, #2
 800609c:	f24d 6028 	movw	r0, #54824	; 0xd628
 80060a0:	f7fc fc1e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80060a4:	21de      	movs	r1, #222	; 0xde
 80060a6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80060aa:	f7fc fc19 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80060ae:	2102      	movs	r1, #2
 80060b0:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80060b4:	f7fc fc14 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80060b8:	21f2      	movs	r1, #242	; 0xf2
 80060ba:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80060be:	f7fc fc0f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80060c2:	2102      	movs	r1, #2
 80060c4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80060c8:	f7fc fc0a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80060cc:	21fe      	movs	r1, #254	; 0xfe
 80060ce:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80060d2:	f7fc fc05 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80060d6:	2103      	movs	r1, #3
 80060d8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80060dc:	f7fc fc00 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 80060e0:	2110      	movs	r1, #16
 80060e2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80060e6:	f7fc fbfb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 80060ea:	2103      	movs	r1, #3
 80060ec:	f24d 6030 	movw	r0, #54832	; 0xd630
 80060f0:	f7fc fbf6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80060f4:	2133      	movs	r1, #51	; 0x33
 80060f6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80060fa:	f7fc fbf1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 80060fe:	2103      	movs	r1, #3
 8006100:	f24d 6032 	movw	r0, #54834	; 0xd632
 8006104:	f7fc fbec 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006108:	216d      	movs	r1, #109	; 0x6d
 800610a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800610e:	f7fc fbe7 	bl	80028e0 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8006112:	2155      	movs	r1, #85	; 0x55
 8006114:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006118:	f7fc fbe2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800611c:	21aa      	movs	r1, #170	; 0xaa
 800611e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8006122:	f7fc fbdd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8006126:	2152      	movs	r1, #82	; 0x52
 8006128:	f24f 0002 	movw	r0, #61442	; 0xf002
 800612c:	f7fc fbd8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006130:	2108      	movs	r1, #8
 8006132:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006136:	f7fc fbd3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800613a:	2100      	movs	r1, #0
 800613c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8006140:	f7fc fbce 	bl	80028e0 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8006144:	21cc      	movs	r1, #204	; 0xcc
 8006146:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800614a:	f7fc fbc9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800614e:	2100      	movs	r1, #0
 8006150:	f24b 1001 	movw	r0, #45313	; 0xb101
 8006154:	f7fc fbc4 	bl	80028e0 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8006158:	2105      	movs	r1, #5
 800615a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800615e:	f7fc fbbf 	bl	80028e0 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8006162:	2170      	movs	r1, #112	; 0x70
 8006164:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8006168:	f7fc fbba 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800616c:	2170      	movs	r1, #112	; 0x70
 800616e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8006172:	f7fc fbb5 	bl	80028e0 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8006176:	2101      	movs	r1, #1
 8006178:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800617c:	f7fc fbb0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8006180:	2103      	movs	r1, #3
 8006182:	f64b 0001 	movw	r0, #47105	; 0xb801
 8006186:	f7fc fbab 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 800618a:	2103      	movs	r1, #3
 800618c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8006190:	f7fc fba6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8006194:	2103      	movs	r1, #3
 8006196:	f64b 0003 	movw	r0, #47107	; 0xb803
 800619a:	f7fc fba1 	bl	80028e0 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 800619e:	2102      	movs	r1, #2
 80061a0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80061a4:	f7fc fb9c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80061a8:	2100      	movs	r1, #0
 80061aa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80061ae:	f7fc fb97 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80061b2:	2100      	movs	r1, #0
 80061b4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80061b8:	f7fc fb92 	bl	80028e0 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80061bc:	21d0      	movs	r1, #208	; 0xd0
 80061be:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80061c2:	f7fc fb8d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80061c6:	2102      	movs	r1, #2
 80061c8:	f64c 1001 	movw	r0, #51457	; 0xc901
 80061cc:	f7fc fb88 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80061d0:	2150      	movs	r1, #80	; 0x50
 80061d2:	f64c 1002 	movw	r0, #51458	; 0xc902
 80061d6:	f7fc fb83 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80061da:	2150      	movs	r1, #80	; 0x50
 80061dc:	f64c 1003 	movw	r0, #51459	; 0xc903
 80061e0:	f7fc fb7e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 80061e4:	2150      	movs	r1, #80	; 0x50
 80061e6:	f64c 1004 	movw	r0, #51460	; 0xc904
 80061ea:	f7fc fb79 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 80061ee:	2100      	movs	r1, #0
 80061f0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80061f4:	f7fc fb74 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80061f8:	2155      	movs	r1, #85	; 0x55
 80061fa:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80061fe:	f7fc fb6f 	bl	80028e0 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8006202:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006206:	f7fc fadf 	bl	80027c8 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800620a:	2001      	movs	r0, #1
 800620c:	f7fa fc5c 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006210:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006214:	f7fc fad8 	bl	80027c8 <LCD_WR_REG>
 8006218:	f001 bd18 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800621c:	4bec      	ldr	r3, [pc, #944]	; (80065d0 <LCD_Init+0x27b8>)
 800621e:	889b      	ldrh	r3, [r3, #4]
 8006220:	f249 3225 	movw	r2, #37669	; 0x9325
 8006224:	4293      	cmp	r3, r2
 8006226:	f040 80d7 	bne.w	80063d8 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800622a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800622e:	20e5      	movs	r0, #229	; 0xe5
 8006230:	f7fc fb56 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8006234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006238:	2001      	movs	r0, #1
 800623a:	f7fc fb51 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800623e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006242:	2002      	movs	r0, #2
 8006244:	f7fc fb4c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006248:	f241 0130 	movw	r1, #4144	; 0x1030
 800624c:	2003      	movs	r0, #3
 800624e:	f7fc fb47 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006252:	2100      	movs	r1, #0
 8006254:	2004      	movs	r0, #4
 8006256:	f7fc fb43 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800625a:	f240 2102 	movw	r1, #514	; 0x202
 800625e:	2008      	movs	r0, #8
 8006260:	f7fc fb3e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006264:	2100      	movs	r1, #0
 8006266:	2009      	movs	r0, #9
 8006268:	f7fc fb3a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800626c:	2100      	movs	r1, #0
 800626e:	200a      	movs	r0, #10
 8006270:	f7fc fb36 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006274:	2100      	movs	r1, #0
 8006276:	200c      	movs	r0, #12
 8006278:	f7fc fb32 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800627c:	2100      	movs	r1, #0
 800627e:	200d      	movs	r0, #13
 8006280:	f7fc fb2e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006284:	2100      	movs	r1, #0
 8006286:	200f      	movs	r0, #15
 8006288:	f7fc fb2a 	bl	80028e0 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800628c:	2100      	movs	r1, #0
 800628e:	2010      	movs	r0, #16
 8006290:	f7fc fb26 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006294:	2107      	movs	r1, #7
 8006296:	2011      	movs	r0, #17
 8006298:	f7fc fb22 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800629c:	2100      	movs	r1, #0
 800629e:	2012      	movs	r0, #18
 80062a0:	f7fc fb1e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80062a4:	2100      	movs	r1, #0
 80062a6:	2013      	movs	r0, #19
 80062a8:	f7fc fb1a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80062ac:	2100      	movs	r1, #0
 80062ae:	2007      	movs	r0, #7
 80062b0:	f7fc fb16 	bl	80028e0 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80062b4:	f241 6190 	movw	r1, #5776	; 0x1690
 80062b8:	2010      	movs	r0, #16
 80062ba:	f7fc fb11 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80062be:	f240 2127 	movw	r1, #551	; 0x227
 80062c2:	2011      	movs	r0, #17
 80062c4:	f7fc fb0c 	bl	80028e0 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80062c8:	219d      	movs	r1, #157	; 0x9d
 80062ca:	2012      	movs	r0, #18
 80062cc:	f7fc fb08 	bl	80028e0 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80062d0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80062d4:	2013      	movs	r0, #19
 80062d6:	f7fc fb03 	bl	80028e0 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80062da:	2125      	movs	r1, #37	; 0x25
 80062dc:	2029      	movs	r0, #41	; 0x29
 80062de:	f7fc faff 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80062e2:	210d      	movs	r1, #13
 80062e4:	202b      	movs	r0, #43	; 0x2b
 80062e6:	f7fc fafb 	bl	80028e0 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80062ea:	2107      	movs	r1, #7
 80062ec:	2030      	movs	r0, #48	; 0x30
 80062ee:	f7fc faf7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80062f2:	f240 3103 	movw	r1, #771	; 0x303
 80062f6:	2031      	movs	r0, #49	; 0x31
 80062f8:	f7fc faf2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80062fc:	2103      	movs	r1, #3
 80062fe:	2032      	movs	r0, #50	; 0x32
 8006300:	f7fc faee 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8006304:	f240 2106 	movw	r1, #518	; 0x206
 8006308:	2035      	movs	r0, #53	; 0x35
 800630a:	f7fc fae9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800630e:	2108      	movs	r1, #8
 8006310:	2036      	movs	r0, #54	; 0x36
 8006312:	f7fc fae5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8006316:	f240 4106 	movw	r1, #1030	; 0x406
 800631a:	2037      	movs	r0, #55	; 0x37
 800631c:	f7fc fae0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8006320:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006324:	2038      	movs	r0, #56	; 0x38
 8006326:	f7fc fadb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800632a:	2107      	movs	r1, #7
 800632c:	2039      	movs	r0, #57	; 0x39
 800632e:	f7fc fad7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8006332:	f240 6102 	movw	r1, #1538	; 0x602
 8006336:	203c      	movs	r0, #60	; 0x3c
 8006338:	f7fc fad2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800633c:	2108      	movs	r1, #8
 800633e:	203d      	movs	r0, #61	; 0x3d
 8006340:	f7fc face 	bl	80028e0 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8006344:	2100      	movs	r1, #0
 8006346:	2050      	movs	r0, #80	; 0x50
 8006348:	f7fc faca 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800634c:	21ef      	movs	r1, #239	; 0xef
 800634e:	2051      	movs	r0, #81	; 0x51
 8006350:	f7fc fac6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006354:	2100      	movs	r1, #0
 8006356:	2052      	movs	r0, #82	; 0x52
 8006358:	f7fc fac2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800635c:	f240 113f 	movw	r1, #319	; 0x13f
 8006360:	2053      	movs	r0, #83	; 0x53
 8006362:	f7fc fabd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8006366:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800636a:	2060      	movs	r0, #96	; 0x60
 800636c:	f7fc fab8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006370:	2101      	movs	r1, #1
 8006372:	2061      	movs	r0, #97	; 0x61
 8006374:	f7fc fab4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006378:	2100      	movs	r1, #0
 800637a:	206a      	movs	r0, #106	; 0x6a
 800637c:	f7fc fab0 	bl	80028e0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8006380:	2100      	movs	r1, #0
 8006382:	2080      	movs	r0, #128	; 0x80
 8006384:	f7fc faac 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006388:	2100      	movs	r1, #0
 800638a:	2081      	movs	r0, #129	; 0x81
 800638c:	f7fc faa8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006390:	2100      	movs	r1, #0
 8006392:	2082      	movs	r0, #130	; 0x82
 8006394:	f7fc faa4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006398:	2100      	movs	r1, #0
 800639a:	2083      	movs	r0, #131	; 0x83
 800639c:	f7fc faa0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80063a0:	2100      	movs	r1, #0
 80063a2:	2084      	movs	r0, #132	; 0x84
 80063a4:	f7fc fa9c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80063a8:	2100      	movs	r1, #0
 80063aa:	2085      	movs	r0, #133	; 0x85
 80063ac:	f7fc fa98 	bl	80028e0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80063b0:	2110      	movs	r1, #16
 80063b2:	2090      	movs	r0, #144	; 0x90
 80063b4:	f7fc fa94 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80063b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063bc:	2092      	movs	r0, #146	; 0x92
 80063be:	f7fc fa8f 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80063c2:	f240 1133 	movw	r1, #307	; 0x133
 80063c6:	2007      	movs	r0, #7
 80063c8:	f7fc fa8a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80063cc:	2122      	movs	r1, #34	; 0x22
 80063ce:	2000      	movs	r0, #0
 80063d0:	f7fc fa86 	bl	80028e0 <LCD_WriteReg>
 80063d4:	f001 bc3a 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80063d8:	4b7d      	ldr	r3, [pc, #500]	; (80065d0 <LCD_Init+0x27b8>)
 80063da:	889b      	ldrh	r3, [r3, #4]
 80063dc:	f249 3228 	movw	r2, #37672	; 0x9328
 80063e0:	4293      	cmp	r3, r2
 80063e2:	f040 80f7 	bne.w	80065d4 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80063e6:	f241 018f 	movw	r1, #4239	; 0x108f
 80063ea:	20ec      	movs	r0, #236	; 0xec
 80063ec:	f7fc fa78 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80063f0:	f241 2134 	movw	r1, #4660	; 0x1234
 80063f4:	20ef      	movs	r0, #239	; 0xef
 80063f6:	f7fc fa73 	bl	80028e0 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80063fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063fe:	2001      	movs	r0, #1
 8006400:	f7fc fa6e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8006404:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006408:	2002      	movs	r0, #2
 800640a:	f7fc fa69 	bl	80028e0 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800640e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006412:	2003      	movs	r0, #3
 8006414:	f7fc fa64 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006418:	2100      	movs	r1, #0
 800641a:	2004      	movs	r0, #4
 800641c:	f7fc fa60 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006420:	f240 2102 	movw	r1, #514	; 0x202
 8006424:	2008      	movs	r0, #8
 8006426:	f7fc fa5b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800642a:	2100      	movs	r1, #0
 800642c:	2009      	movs	r0, #9
 800642e:	f7fc fa57 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8006432:	2100      	movs	r1, #0
 8006434:	200a      	movs	r0, #10
 8006436:	f7fc fa53 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800643a:	2101      	movs	r1, #1
 800643c:	200c      	movs	r0, #12
 800643e:	f7fc fa4f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8006442:	2100      	movs	r1, #0
 8006444:	200d      	movs	r0, #13
 8006446:	f7fc fa4b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800644a:	2100      	movs	r1, #0
 800644c:	200f      	movs	r0, #15
 800644e:	f7fc fa47 	bl	80028e0 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8006452:	2100      	movs	r1, #0
 8006454:	2010      	movs	r0, #16
 8006456:	f7fc fa43 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800645a:	2107      	movs	r1, #7
 800645c:	2011      	movs	r0, #17
 800645e:	f7fc fa3f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006462:	2100      	movs	r1, #0
 8006464:	2012      	movs	r0, #18
 8006466:	f7fc fa3b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800646a:	2100      	movs	r1, #0
 800646c:	2013      	movs	r0, #19
 800646e:	f7fc fa37 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8006472:	2101      	movs	r1, #1
 8006474:	2007      	movs	r0, #7
 8006476:	f7fc fa33 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 800647a:	2032      	movs	r0, #50	; 0x32
 800647c:	f7fa fb24 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8006480:	f241 4190 	movw	r1, #5264	; 0x1490
 8006484:	2010      	movs	r0, #16
 8006486:	f7fc fa2b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800648a:	f240 2127 	movw	r1, #551	; 0x227
 800648e:	2011      	movs	r0, #17
 8006490:	f7fc fa26 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006494:	2032      	movs	r0, #50	; 0x32
 8006496:	f7fa fb17 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800649a:	218a      	movs	r1, #138	; 0x8a
 800649c:	2012      	movs	r0, #18
 800649e:	f7fc fa1f 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 80064a2:	2032      	movs	r0, #50	; 0x32
 80064a4:	f7fa fb10 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80064a8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80064ac:	2013      	movs	r0, #19
 80064ae:	f7fc fa17 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80064b2:	2106      	movs	r1, #6
 80064b4:	2029      	movs	r0, #41	; 0x29
 80064b6:	f7fc fa13 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80064ba:	210d      	movs	r1, #13
 80064bc:	202b      	movs	r0, #43	; 0x2b
 80064be:	f7fc fa0f 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 80064c2:	2032      	movs	r0, #50	; 0x32
 80064c4:	f7fa fb00 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80064c8:	2100      	movs	r1, #0
 80064ca:	2020      	movs	r0, #32
 80064cc:	f7fc fa08 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80064d0:	2100      	movs	r1, #0
 80064d2:	2021      	movs	r0, #33	; 0x21
 80064d4:	f7fc fa04 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 80064d8:	2032      	movs	r0, #50	; 0x32
 80064da:	f7fa faf5 	bl	8000ac8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80064de:	2100      	movs	r1, #0
 80064e0:	2030      	movs	r0, #48	; 0x30
 80064e2:	f7fc f9fd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80064e6:	f240 6104 	movw	r1, #1540	; 0x604
 80064ea:	2031      	movs	r0, #49	; 0x31
 80064ec:	f7fc f9f8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80064f0:	f240 3105 	movw	r1, #773	; 0x305
 80064f4:	2032      	movs	r0, #50	; 0x32
 80064f6:	f7fc f9f3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80064fa:	2100      	movs	r1, #0
 80064fc:	2035      	movs	r0, #53	; 0x35
 80064fe:	f7fc f9ef 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8006502:	f640 4109 	movw	r1, #3081	; 0xc09
 8006506:	2036      	movs	r0, #54	; 0x36
 8006508:	f7fc f9ea 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800650c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006510:	2037      	movs	r0, #55	; 0x37
 8006512:	f7fc f9e5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8006516:	f240 3101 	movw	r1, #769	; 0x301
 800651a:	2038      	movs	r0, #56	; 0x38
 800651c:	f7fc f9e0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006520:	f240 7107 	movw	r1, #1799	; 0x707
 8006524:	2039      	movs	r0, #57	; 0x39
 8006526:	f7fc f9db 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800652a:	2100      	movs	r1, #0
 800652c:	203c      	movs	r0, #60	; 0x3c
 800652e:	f7fc f9d7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8006532:	f640 210a 	movw	r1, #2570	; 0xa0a
 8006536:	203d      	movs	r0, #61	; 0x3d
 8006538:	f7fc f9d2 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 800653c:	2032      	movs	r0, #50	; 0x32
 800653e:	f7fa fac3 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8006542:	2100      	movs	r1, #0
 8006544:	2050      	movs	r0, #80	; 0x50
 8006546:	f7fc f9cb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800654a:	21ef      	movs	r1, #239	; 0xef
 800654c:	2051      	movs	r0, #81	; 0x51
 800654e:	f7fc f9c7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8006552:	2100      	movs	r1, #0
 8006554:	2052      	movs	r0, #82	; 0x52
 8006556:	f7fc f9c3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800655a:	f240 113f 	movw	r1, #319	; 0x13f
 800655e:	2053      	movs	r0, #83	; 0x53
 8006560:	f7fc f9be 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8006564:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006568:	2060      	movs	r0, #96	; 0x60
 800656a:	f7fc f9b9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800656e:	2101      	movs	r1, #1
 8006570:	2061      	movs	r0, #97	; 0x61
 8006572:	f7fc f9b5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006576:	2100      	movs	r1, #0
 8006578:	206a      	movs	r0, #106	; 0x6a
 800657a:	f7fc f9b1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800657e:	2100      	movs	r1, #0
 8006580:	2080      	movs	r0, #128	; 0x80
 8006582:	f7fc f9ad 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006586:	2100      	movs	r1, #0
 8006588:	2081      	movs	r0, #129	; 0x81
 800658a:	f7fc f9a9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800658e:	2100      	movs	r1, #0
 8006590:	2082      	movs	r0, #130	; 0x82
 8006592:	f7fc f9a5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006596:	2100      	movs	r1, #0
 8006598:	2083      	movs	r0, #131	; 0x83
 800659a:	f7fc f9a1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800659e:	2100      	movs	r1, #0
 80065a0:	2084      	movs	r0, #132	; 0x84
 80065a2:	f7fc f99d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80065a6:	2100      	movs	r1, #0
 80065a8:	2085      	movs	r0, #133	; 0x85
 80065aa:	f7fc f999 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80065ae:	2110      	movs	r1, #16
 80065b0:	2090      	movs	r0, #144	; 0x90
 80065b2:	f7fc f995 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80065b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065ba:	2092      	movs	r0, #146	; 0x92
 80065bc:	f7fc f990 	bl	80028e0 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80065c0:	f240 1133 	movw	r1, #307	; 0x133
 80065c4:	2007      	movs	r0, #7
 80065c6:	f7fc f98b 	bl	80028e0 <LCD_WriteReg>
 80065ca:	f001 bb3f 	b.w	8007c4c <LCD_Init+0x3e34>
 80065ce:	bf00      	nop
 80065d0:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0x9320) //测试OK.
 80065d4:	4bce      	ldr	r3, [pc, #824]	; (8006910 <LCD_Init+0x2af8>)
 80065d6:	889b      	ldrh	r3, [r3, #4]
 80065d8:	f249 3220 	movw	r2, #37664	; 0x9320
 80065dc:	4293      	cmp	r3, r2
 80065de:	f040 80ad 	bne.w	800673c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80065e2:	2100      	movs	r1, #0
 80065e4:	2000      	movs	r0, #0
 80065e6:	f7fc f97b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80065ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065ee:	2001      	movs	r0, #1
 80065f0:	f7fc f976 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80065f4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80065f8:	2002      	movs	r0, #2
 80065fa:	f7fc f971 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80065fe:	f241 0130 	movw	r1, #4144	; 0x1030
 8006602:	2003      	movs	r0, #3
 8006604:	f7fc f96c 	bl	80028e0 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8006608:	2100      	movs	r1, #0
 800660a:	2004      	movs	r0, #4
 800660c:	f7fc f968 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8006610:	f240 2102 	movw	r1, #514	; 0x202
 8006614:	2008      	movs	r0, #8
 8006616:	f7fc f963 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800661a:	2100      	movs	r1, #0
 800661c:	2009      	movs	r0, #9
 800661e:	f7fc f95f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8006622:	2100      	movs	r1, #0
 8006624:	200a      	movs	r0, #10
 8006626:	f7fc f95b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800662a:	2101      	movs	r1, #1
 800662c:	200c      	movs	r0, #12
 800662e:	f7fc f957 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8006632:	2100      	movs	r1, #0
 8006634:	200d      	movs	r0, #13
 8006636:	f7fc f953 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800663a:	2100      	movs	r1, #0
 800663c:	200f      	movs	r0, #15
 800663e:	f7fc f94f 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006642:	2032      	movs	r0, #50	; 0x32
 8006644:	f7fa fa40 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8006648:	f240 1101 	movw	r1, #257	; 0x101
 800664c:	2007      	movs	r0, #7
 800664e:	f7fc f947 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006652:	2032      	movs	r0, #50	; 0x32
 8006654:	f7fa fa38 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8006658:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800665c:	2010      	movs	r0, #16
 800665e:	f7fc f93f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8006662:	2107      	movs	r1, #7
 8006664:	2011      	movs	r0, #17
 8006666:	f7fc f93b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800666a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800666e:	2012      	movs	r0, #18
 8006670:	f7fc f936 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8006674:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006678:	2013      	movs	r0, #19
 800667a:	f7fc f931 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800667e:	2100      	movs	r1, #0
 8006680:	2029      	movs	r0, #41	; 0x29
 8006682:	f7fc f92d 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8006686:	f244 0110 	movw	r1, #16400	; 0x4010
 800668a:	202b      	movs	r0, #43	; 0x2b
 800668c:	f7fc f928 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8006690:	2100      	movs	r1, #0
 8006692:	2050      	movs	r0, #80	; 0x50
 8006694:	f7fc f924 	bl	80028e0 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006698:	21ef      	movs	r1, #239	; 0xef
 800669a:	2051      	movs	r0, #81	; 0x51
 800669c:	f7fc f920 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80066a0:	2100      	movs	r1, #0
 80066a2:	2052      	movs	r0, #82	; 0x52
 80066a4:	f7fc f91c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80066a8:	f240 113f 	movw	r1, #319	; 0x13f
 80066ac:	2053      	movs	r0, #83	; 0x53
 80066ae:	f7fc f917 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80066b2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80066b6:	2060      	movs	r0, #96	; 0x60
 80066b8:	f7fc f912 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80066bc:	2101      	movs	r1, #1
 80066be:	2061      	movs	r0, #97	; 0x61
 80066c0:	f7fc f90e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80066c4:	2100      	movs	r1, #0
 80066c6:	206a      	movs	r0, #106	; 0x6a
 80066c8:	f7fc f90a 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80066cc:	2100      	movs	r1, #0
 80066ce:	2080      	movs	r0, #128	; 0x80
 80066d0:	f7fc f906 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80066d4:	2100      	movs	r1, #0
 80066d6:	2081      	movs	r0, #129	; 0x81
 80066d8:	f7fc f902 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80066dc:	2100      	movs	r1, #0
 80066de:	2082      	movs	r0, #130	; 0x82
 80066e0:	f7fc f8fe 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80066e4:	2100      	movs	r1, #0
 80066e6:	2083      	movs	r0, #131	; 0x83
 80066e8:	f7fc f8fa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80066ec:	2100      	movs	r1, #0
 80066ee:	2084      	movs	r0, #132	; 0x84
 80066f0:	f7fc f8f6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80066f4:	2100      	movs	r1, #0
 80066f6:	2085      	movs	r0, #133	; 0x85
 80066f8:	f7fc f8f2 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80066fc:	2110      	movs	r1, #16
 80066fe:	2090      	movs	r0, #144	; 0x90
 8006700:	f7fc f8ee 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8006704:	2100      	movs	r1, #0
 8006706:	2092      	movs	r0, #146	; 0x92
 8006708:	f7fc f8ea 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800670c:	2101      	movs	r1, #1
 800670e:	2093      	movs	r0, #147	; 0x93
 8006710:	f7fc f8e6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8006714:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006718:	2095      	movs	r0, #149	; 0x95
 800671a:	f7fc f8e1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800671e:	2100      	movs	r1, #0
 8006720:	2097      	movs	r0, #151	; 0x97
 8006722:	f7fc f8dd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8006726:	2100      	movs	r1, #0
 8006728:	2098      	movs	r0, #152	; 0x98
 800672a:	f7fc f8d9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800672e:	f240 1173 	movw	r1, #371	; 0x173
 8006732:	2007      	movs	r0, #7
 8006734:	f7fc f8d4 	bl	80028e0 <LCD_WriteReg>
 8006738:	f001 ba88 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800673c:	4b74      	ldr	r3, [pc, #464]	; (8006910 <LCD_Init+0x2af8>)
 800673e:	889b      	ldrh	r3, [r3, #4]
 8006740:	f249 3231 	movw	r2, #37681	; 0x9331
 8006744:	4293      	cmp	r3, r2
 8006746:	f040 80e5 	bne.w	8006914 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800674a:	f241 0114 	movw	r1, #4116	; 0x1014
 800674e:	20e7      	movs	r0, #231	; 0xe7
 8006750:	f7fc f8c6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8006754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006758:	2001      	movs	r0, #1
 800675a:	f7fc f8c1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800675e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006762:	2002      	movs	r0, #2
 8006764:	f7fc f8bc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8006768:	f241 0138 	movw	r1, #4152	; 0x1038
 800676c:	2003      	movs	r0, #3
 800676e:	f7fc f8b7 	bl	80028e0 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8006772:	f240 2102 	movw	r1, #514	; 0x202
 8006776:	2008      	movs	r0, #8
 8006778:	f7fc f8b2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800677c:	2100      	movs	r1, #0
 800677e:	2009      	movs	r0, #9
 8006780:	f7fc f8ae 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8006784:	2100      	movs	r1, #0
 8006786:	200a      	movs	r0, #10
 8006788:	f7fc f8aa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800678c:	2100      	movs	r1, #0
 800678e:	200c      	movs	r0, #12
 8006790:	f7fc f8a6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8006794:	2100      	movs	r1, #0
 8006796:	200d      	movs	r0, #13
 8006798:	f7fc f8a2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800679c:	2100      	movs	r1, #0
 800679e:	200f      	movs	r0, #15
 80067a0:	f7fc f89e 	bl	80028e0 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80067a4:	2100      	movs	r1, #0
 80067a6:	2010      	movs	r0, #16
 80067a8:	f7fc f89a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80067ac:	2107      	movs	r1, #7
 80067ae:	2011      	movs	r0, #17
 80067b0:	f7fc f896 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80067b4:	2100      	movs	r1, #0
 80067b6:	2012      	movs	r0, #18
 80067b8:	f7fc f892 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80067bc:	2100      	movs	r1, #0
 80067be:	2013      	movs	r0, #19
 80067c0:	f7fc f88e 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80067c4:	20c8      	movs	r0, #200	; 0xc8
 80067c6:	f7fa f97f 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80067ca:	f241 6190 	movw	r1, #5776	; 0x1690
 80067ce:	2010      	movs	r0, #16
 80067d0:	f7fc f886 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80067d4:	f240 2127 	movw	r1, #551	; 0x227
 80067d8:	2011      	movs	r0, #17
 80067da:	f7fc f881 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80067de:	2032      	movs	r0, #50	; 0x32
 80067e0:	f7fa f972 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80067e4:	210c      	movs	r1, #12
 80067e6:	2012      	movs	r0, #18
 80067e8:	f7fc f87a 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80067ec:	2032      	movs	r0, #50	; 0x32
 80067ee:	f7fa f96b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80067f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f6:	2013      	movs	r0, #19
 80067f8:	f7fc f872 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80067fc:	2111      	movs	r1, #17
 80067fe:	2029      	movs	r0, #41	; 0x29
 8006800:	f7fc f86e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8006804:	210b      	movs	r1, #11
 8006806:	202b      	movs	r0, #43	; 0x2b
 8006808:	f7fc f86a 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800680c:	2032      	movs	r0, #50	; 0x32
 800680e:	f7fa f95b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8006812:	2100      	movs	r1, #0
 8006814:	2020      	movs	r0, #32
 8006816:	f7fc f863 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800681a:	f240 113f 	movw	r1, #319	; 0x13f
 800681e:	2021      	movs	r0, #33	; 0x21
 8006820:	f7fc f85e 	bl	80028e0 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8006824:	2100      	movs	r1, #0
 8006826:	2030      	movs	r0, #48	; 0x30
 8006828:	f7fc f85a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800682c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006830:	2031      	movs	r0, #49	; 0x31
 8006832:	f7fc f855 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8006836:	2100      	movs	r1, #0
 8006838:	2032      	movs	r0, #50	; 0x32
 800683a:	f7fc f851 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800683e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006842:	2035      	movs	r0, #53	; 0x35
 8006844:	f7fc f84c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8006848:	f241 610a 	movw	r1, #5642	; 0x160a
 800684c:	2036      	movs	r0, #54	; 0x36
 800684e:	f7fc f847 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8006852:	f240 7107 	movw	r1, #1799	; 0x707
 8006856:	2037      	movs	r0, #55	; 0x37
 8006858:	f7fc f842 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800685c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006860:	2038      	movs	r0, #56	; 0x38
 8006862:	f7fc f83d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006866:	f240 7107 	movw	r1, #1799	; 0x707
 800686a:	2039      	movs	r0, #57	; 0x39
 800686c:	f7fc f838 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006870:	f240 4102 	movw	r1, #1026	; 0x402
 8006874:	203c      	movs	r0, #60	; 0x3c
 8006876:	f7fc f833 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800687a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800687e:	203d      	movs	r0, #61	; 0x3d
 8006880:	f7fc f82e 	bl	80028e0 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8006884:	2100      	movs	r1, #0
 8006886:	2050      	movs	r0, #80	; 0x50
 8006888:	f7fc f82a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800688c:	21ef      	movs	r1, #239	; 0xef
 800688e:	2051      	movs	r0, #81	; 0x51
 8006890:	f7fc f826 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8006894:	2100      	movs	r1, #0
 8006896:	2052      	movs	r0, #82	; 0x52
 8006898:	f7fc f822 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800689c:	f240 113f 	movw	r1, #319	; 0x13f
 80068a0:	2053      	movs	r0, #83	; 0x53
 80068a2:	f7fc f81d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80068a6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80068aa:	2060      	movs	r0, #96	; 0x60
 80068ac:	f7fc f818 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80068b0:	2101      	movs	r1, #1
 80068b2:	2061      	movs	r0, #97	; 0x61
 80068b4:	f7fc f814 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80068b8:	2100      	movs	r1, #0
 80068ba:	206a      	movs	r0, #106	; 0x6a
 80068bc:	f7fc f810 	bl	80028e0 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80068c0:	2100      	movs	r1, #0
 80068c2:	2080      	movs	r0, #128	; 0x80
 80068c4:	f7fc f80c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80068c8:	2100      	movs	r1, #0
 80068ca:	2081      	movs	r0, #129	; 0x81
 80068cc:	f7fc f808 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80068d0:	2100      	movs	r1, #0
 80068d2:	2082      	movs	r0, #130	; 0x82
 80068d4:	f7fc f804 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80068d8:	2100      	movs	r1, #0
 80068da:	2083      	movs	r0, #131	; 0x83
 80068dc:	f7fc f800 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80068e0:	2100      	movs	r1, #0
 80068e2:	2084      	movs	r0, #132	; 0x84
 80068e4:	f7fb fffc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80068e8:	2100      	movs	r1, #0
 80068ea:	2085      	movs	r0, #133	; 0x85
 80068ec:	f7fb fff8 	bl	80028e0 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80068f0:	2110      	movs	r1, #16
 80068f2:	2090      	movs	r0, #144	; 0x90
 80068f4:	f7fb fff4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80068f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068fc:	2092      	movs	r0, #146	; 0x92
 80068fe:	f7fb ffef 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8006902:	f240 1133 	movw	r1, #307	; 0x133
 8006906:	2007      	movs	r0, #7
 8006908:	f7fb ffea 	bl	80028e0 <LCD_WriteReg>
 800690c:	f001 b99e 	b.w	8007c4c <LCD_Init+0x3e34>
 8006910:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0x5408) {
 8006914:	4be2      	ldr	r3, [pc, #904]	; (8006ca0 <LCD_Init+0x2e88>)
 8006916:	889b      	ldrh	r3, [r3, #4]
 8006918:	f245 4208 	movw	r2, #21512	; 0x5408
 800691c:	4293      	cmp	r3, r2
 800691e:	f040 80a3 	bne.w	8006a68 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8006922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006926:	2001      	movs	r0, #1
 8006928:	f7fb ffda 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800692c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006930:	2002      	movs	r0, #2
 8006932:	f7fb ffd5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8006936:	f241 0130 	movw	r1, #4144	; 0x1030
 800693a:	2003      	movs	r0, #3
 800693c:	f7fb ffd0 	bl	80028e0 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8006940:	2100      	movs	r1, #0
 8006942:	2004      	movs	r0, #4
 8006944:	f7fb ffcc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8006948:	f240 2107 	movw	r1, #519	; 0x207
 800694c:	2008      	movs	r0, #8
 800694e:	f7fb ffc7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8006952:	2100      	movs	r1, #0
 8006954:	2009      	movs	r0, #9
 8006956:	f7fb ffc3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800695a:	2100      	movs	r1, #0
 800695c:	200a      	movs	r0, #10
 800695e:	f7fb ffbf 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8006962:	2100      	movs	r1, #0
 8006964:	200c      	movs	r0, #12
 8006966:	f7fb ffbb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800696a:	2100      	movs	r1, #0
 800696c:	200d      	movs	r0, #13
 800696e:	f7fb ffb7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8006972:	2100      	movs	r1, #0
 8006974:	200f      	movs	r0, #15
 8006976:	f7fb ffb3 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 800697a:	2014      	movs	r0, #20
 800697c:	f7fa f8a4 	bl	8000ac8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8006980:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8006984:	2010      	movs	r0, #16
 8006986:	f7fb ffab 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800698a:	2101      	movs	r1, #1
 800698c:	2011      	movs	r0, #17
 800698e:	f7fb ffa7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8006992:	2101      	movs	r1, #1
 8006994:	2017      	movs	r0, #23
 8006996:	f7fb ffa3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800699a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800699e:	2012      	movs	r0, #18
 80069a0:	f7fb ff9e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80069a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069a8:	2013      	movs	r0, #19
 80069aa:	f7fb ff99 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80069ae:	2109      	movs	r1, #9
 80069b0:	2029      	movs	r0, #41	; 0x29
 80069b2:	f7fb ff95 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80069b6:	2109      	movs	r1, #9
 80069b8:	202a      	movs	r0, #42	; 0x2a
 80069ba:	f7fb ff91 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80069be:	2100      	movs	r1, #0
 80069c0:	20a4      	movs	r0, #164	; 0xa4
 80069c2:	f7fb ff8d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80069c6:	2100      	movs	r1, #0
 80069c8:	2050      	movs	r0, #80	; 0x50
 80069ca:	f7fb ff89 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80069ce:	21ef      	movs	r1, #239	; 0xef
 80069d0:	2051      	movs	r0, #81	; 0x51
 80069d2:	f7fb ff85 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80069d6:	2100      	movs	r1, #0
 80069d8:	2052      	movs	r0, #82	; 0x52
 80069da:	f7fb ff81 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80069de:	f240 113f 	movw	r1, #319	; 0x13f
 80069e2:	2053      	movs	r0, #83	; 0x53
 80069e4:	f7fb ff7c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80069e8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80069ec:	2060      	movs	r0, #96	; 0x60
 80069ee:	f7fb ff77 	bl	80028e0 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80069f2:	2101      	movs	r1, #1
 80069f4:	2061      	movs	r0, #97	; 0x61
 80069f6:	f7fb ff73 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 80069fa:	2100      	movs	r1, #0
 80069fc:	206a      	movs	r0, #106	; 0x6a
 80069fe:	f7fb ff6f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8006a02:	2100      	movs	r1, #0
 8006a04:	2080      	movs	r0, #128	; 0x80
 8006a06:	f7fb ff6b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	2081      	movs	r0, #129	; 0x81
 8006a0e:	f7fb ff67 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8006a12:	2100      	movs	r1, #0
 8006a14:	2082      	movs	r0, #130	; 0x82
 8006a16:	f7fb ff63 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	2083      	movs	r0, #131	; 0x83
 8006a1e:	f7fb ff5f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8006a22:	2100      	movs	r1, #0
 8006a24:	2084      	movs	r0, #132	; 0x84
 8006a26:	f7fb ff5b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	2085      	movs	r0, #133	; 0x85
 8006a2e:	f7fb ff57 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8006a32:	2113      	movs	r1, #19
 8006a34:	2090      	movs	r0, #144	; 0x90
 8006a36:	f7fb ff53 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2092      	movs	r0, #146	; 0x92
 8006a3e:	f7fb ff4f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8006a42:	2103      	movs	r1, #3
 8006a44:	2093      	movs	r0, #147	; 0x93
 8006a46:	f7fb ff4b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8006a4a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006a4e:	2095      	movs	r0, #149	; 0x95
 8006a50:	f7fb ff46 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8006a54:	f240 1173 	movw	r1, #371	; 0x173
 8006a58:	2007      	movs	r0, #7
 8006a5a:	f7fb ff41 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006a5e:	2032      	movs	r0, #50	; 0x32
 8006a60:	f7fa f832 	bl	8000ac8 <HAL_Delay>
 8006a64:	f001 b8f2 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8006a68:	4b8d      	ldr	r3, [pc, #564]	; (8006ca0 <LCD_Init+0x2e88>)
 8006a6a:	889b      	ldrh	r3, [r3, #4]
 8006a6c:	f241 5205 	movw	r2, #5381	; 0x1505
 8006a70:	4293      	cmp	r3, r2
 8006a72:	f040 8117 	bne.w	8006ca4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8006a76:	2100      	movs	r1, #0
 8006a78:	2007      	movs	r0, #7
 8006a7a:	f7fb ff31 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006a7e:	2032      	movs	r0, #50	; 0x32
 8006a80:	f7fa f822 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8006a84:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006a88:	2012      	movs	r0, #18
 8006a8a:	f7fb ff29 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8006a8e:	2101      	movs	r1, #1
 8006a90:	20a4      	movs	r0, #164	; 0xa4
 8006a92:	f7fb ff25 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8006a96:	210f      	movs	r1, #15
 8006a98:	2008      	movs	r0, #8
 8006a9a:	f7fb ff21 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8006a9e:	2108      	movs	r1, #8
 8006aa0:	200a      	movs	r0, #10
 8006aa2:	f7fb ff1d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8006aa6:	2108      	movs	r1, #8
 8006aa8:	200d      	movs	r0, #13
 8006aaa:	f7fb ff19 	bl	80028e0 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8006aae:	f240 7107 	movw	r1, #1799	; 0x707
 8006ab2:	2030      	movs	r0, #48	; 0x30
 8006ab4:	f7fb ff14 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8006ab8:	2107      	movs	r1, #7
 8006aba:	2031      	movs	r0, #49	; 0x31
 8006abc:	f7fb ff10 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8006ac0:	f240 6103 	movw	r1, #1539	; 0x603
 8006ac4:	2032      	movs	r0, #50	; 0x32
 8006ac6:	f7fb ff0b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8006aca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006ace:	2033      	movs	r0, #51	; 0x33
 8006ad0:	f7fb ff06 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8006ad4:	f240 2102 	movw	r1, #514	; 0x202
 8006ad8:	2034      	movs	r0, #52	; 0x34
 8006ada:	f7fb ff01 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8006ade:	2102      	movs	r1, #2
 8006ae0:	2035      	movs	r0, #53	; 0x35
 8006ae2:	f7fb fefd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8006ae6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8006aea:	2036      	movs	r0, #54	; 0x36
 8006aec:	f7fb fef8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8006af0:	f240 7107 	movw	r1, #1799	; 0x707
 8006af4:	2037      	movs	r0, #55	; 0x37
 8006af6:	f7fb fef3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8006afa:	2100      	movs	r1, #0
 8006afc:	2038      	movs	r0, #56	; 0x38
 8006afe:	f7fb feef 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8006b02:	2100      	movs	r1, #0
 8006b04:	2039      	movs	r0, #57	; 0x39
 8006b06:	f7fb feeb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8006b0a:	f240 7107 	movw	r1, #1799	; 0x707
 8006b0e:	203a      	movs	r0, #58	; 0x3a
 8006b10:	f7fb fee6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8006b14:	2100      	movs	r1, #0
 8006b16:	203b      	movs	r0, #59	; 0x3b
 8006b18:	f7fb fee2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8006b1c:	2107      	movs	r1, #7
 8006b1e:	203c      	movs	r0, #60	; 0x3c
 8006b20:	f7fb fede 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8006b24:	2100      	movs	r1, #0
 8006b26:	203d      	movs	r0, #61	; 0x3d
 8006b28:	f7fb feda 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006b2c:	2032      	movs	r0, #50	; 0x32
 8006b2e:	f7f9 ffcb 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8006b32:	2101      	movs	r1, #1
 8006b34:	2007      	movs	r0, #7
 8006b36:	f7fb fed3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	2017      	movs	r0, #23
 8006b3e:	f7fb fecf 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(50);
 8006b42:	2032      	movs	r0, #50	; 0x32
 8006b44:	f7f9 ffc0 	bl	8000ac8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8006b48:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f7fb fec7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8006b52:	f240 2117 	movw	r1, #535	; 0x217
 8006b56:	2011      	movs	r0, #17
 8006b58:	f7fb fec2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8006b5c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006b60:	2012      	movs	r0, #18
 8006b62:	f7fb febd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8006b66:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006b6a:	2013      	movs	r0, #19
 8006b6c:	f7fb feb8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8006b70:	2100      	movs	r1, #0
 8006b72:	202a      	movs	r0, #42	; 0x2a
 8006b74:	f7fb feb4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006b78:	210a      	movs	r1, #10
 8006b7a:	2029      	movs	r0, #41	; 0x29
 8006b7c:	f7fb feb0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8006b80:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006b84:	2012      	movs	r0, #18
 8006b86:	f7fb feab 	bl	80028e0 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2050      	movs	r0, #80	; 0x50
 8006b8e:	f7fb fea7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006b92:	21ef      	movs	r1, #239	; 0xef
 8006b94:	2051      	movs	r0, #81	; 0x51
 8006b96:	f7fb fea3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2052      	movs	r0, #82	; 0x52
 8006b9e:	f7fb fe9f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006ba2:	f240 113f 	movw	r1, #319	; 0x13f
 8006ba6:	2053      	movs	r0, #83	; 0x53
 8006ba8:	f7fb fe9a 	bl	80028e0 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8006bac:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006bb0:	2060      	movs	r0, #96	; 0x60
 8006bb2:	f7fb fe95 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	2061      	movs	r0, #97	; 0x61
 8006bba:	f7fb fe91 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	206a      	movs	r0, #106	; 0x6a
 8006bc2:	f7fb fe8d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2080      	movs	r0, #128	; 0x80
 8006bca:	f7fb fe89 	bl	80028e0 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8006bce:	2100      	movs	r1, #0
 8006bd0:	2081      	movs	r0, #129	; 0x81
 8006bd2:	f7fb fe85 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2082      	movs	r0, #130	; 0x82
 8006bda:	f7fb fe81 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006bde:	2100      	movs	r1, #0
 8006be0:	2083      	movs	r0, #131	; 0x83
 8006be2:	f7fb fe7d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006be6:	2100      	movs	r1, #0
 8006be8:	2084      	movs	r0, #132	; 0x84
 8006bea:	f7fb fe79 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006bee:	2100      	movs	r1, #0
 8006bf0:	2085      	movs	r0, #133	; 0x85
 8006bf2:	f7fb fe75 	bl	80028e0 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8006bf6:	2113      	movs	r1, #19
 8006bf8:	2090      	movs	r0, #144	; 0x90
 8006bfa:	f7fb fe71 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006bfe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006c02:	2092      	movs	r0, #146	; 0x92
 8006c04:	f7fb fe6c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8006c08:	2105      	movs	r1, #5
 8006c0a:	2093      	movs	r0, #147	; 0x93
 8006c0c:	f7fb fe68 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8006c10:	2100      	movs	r1, #0
 8006c12:	2095      	movs	r0, #149	; 0x95
 8006c14:	f7fb fe64 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	2097      	movs	r0, #151	; 0x97
 8006c1c:	f7fb fe60 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8006c20:	2100      	movs	r1, #0
 8006c22:	2098      	movs	r0, #152	; 0x98
 8006c24:	f7fb fe5c 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8006c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f7fb fe57 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006c32:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006c36:	2002      	movs	r0, #2
 8006c38:	f7fb fe52 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006c3c:	f241 0138 	movw	r1, #4152	; 0x1038
 8006c40:	2003      	movs	r0, #3
 8006c42:	f7fb fe4d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006c46:	2100      	movs	r1, #0
 8006c48:	2004      	movs	r0, #4
 8006c4a:	f7fb fe49 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006c4e:	2100      	movs	r1, #0
 8006c50:	200c      	movs	r0, #12
 8006c52:	f7fb fe45 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006c56:	2100      	movs	r1, #0
 8006c58:	200f      	movs	r0, #15
 8006c5a:	f7fb fe41 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8006c5e:	2100      	movs	r1, #0
 8006c60:	2020      	movs	r0, #32
 8006c62:	f7fb fe3d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006c66:	2100      	movs	r1, #0
 8006c68:	2021      	movs	r0, #33	; 0x21
 8006c6a:	f7fb fe39 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8006c6e:	2121      	movs	r1, #33	; 0x21
 8006c70:	2007      	movs	r0, #7
 8006c72:	f7fb fe35 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006c76:	2014      	movs	r0, #20
 8006c78:	f7f9 ff26 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006c7c:	2161      	movs	r1, #97	; 0x61
 8006c7e:	2007      	movs	r0, #7
 8006c80:	f7fb fe2e 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006c84:	2014      	movs	r0, #20
 8006c86:	f7f9 ff1f 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8006c8a:	f240 1173 	movw	r1, #371	; 0x173
 8006c8e:	2007      	movs	r0, #7
 8006c90:	f7fb fe26 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006c94:	2014      	movs	r0, #20
 8006c96:	f7f9 ff17 	bl	8000ac8 <HAL_Delay>
 8006c9a:	f000 bfd7 	b.w	8007c4c <LCD_Init+0x3e34>
 8006c9e:	bf00      	nop
 8006ca0:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0xB505) {
 8006ca4:	4bf0      	ldr	r3, [pc, #960]	; (8007068 <LCD_Init+0x3250>)
 8006ca6:	889b      	ldrh	r3, [r3, #4]
 8006ca8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8006cac:	4293      	cmp	r3, r2
 8006cae:	f040 8103 	bne.w	8006eb8 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f7fb fe13 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006cba:	2100      	movs	r1, #0
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f7fb fe0f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f7fb fe0b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f7fb fe07 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	20a4      	movs	r0, #164	; 0xa4
 8006cd6:	f7fb fe03 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006cda:	2014      	movs	r0, #20
 8006cdc:	f7f9 fef4 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006ce0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006ce4:	2060      	movs	r0, #96	; 0x60
 8006ce6:	f7fb fdfb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006cea:	f240 2102 	movw	r1, #514	; 0x202
 8006cee:	2008      	movs	r0, #8
 8006cf0:	f7fb fdf6 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8006cf4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006cf8:	2030      	movs	r0, #48	; 0x30
 8006cfa:	f7fb fdf1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8006cfe:	f243 7115 	movw	r1, #14101	; 0x3715
 8006d02:	2031      	movs	r0, #49	; 0x31
 8006d04:	f7fb fdec 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8006d08:	f240 6104 	movw	r1, #1540	; 0x604
 8006d0c:	2032      	movs	r0, #50	; 0x32
 8006d0e:	f7fb fde7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8006d12:	f640 6116 	movw	r1, #3606	; 0xe16
 8006d16:	2033      	movs	r0, #51	; 0x33
 8006d18:	f7fb fde2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8006d1c:	f242 2111 	movw	r1, #8721	; 0x2211
 8006d20:	2034      	movs	r0, #52	; 0x34
 8006d22:	f7fb fddd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8006d26:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8006d2a:	2035      	movs	r0, #53	; 0x35
 8006d2c:	f7fb fdd8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8006d30:	f248 5107 	movw	r1, #34055	; 0x8507
 8006d34:	2036      	movs	r0, #54	; 0x36
 8006d36:	f7fb fdd3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8006d3a:	f241 4107 	movw	r1, #5127	; 0x1407
 8006d3e:	2037      	movs	r0, #55	; 0x37
 8006d40:	f7fb fdce 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8006d44:	f241 4103 	movw	r1, #5123	; 0x1403
 8006d48:	2038      	movs	r0, #56	; 0x38
 8006d4a:	f7fb fdc9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8006d4e:	2120      	movs	r1, #32
 8006d50:	2039      	movs	r0, #57	; 0x39
 8006d52:	f7fb fdc5 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8006d56:	211a      	movs	r1, #26
 8006d58:	2090      	movs	r0, #144	; 0x90
 8006d5a:	f7fb fdc1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8006d5e:	2100      	movs	r1, #0
 8006d60:	2010      	movs	r0, #16
 8006d62:	f7fb fdbd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006d66:	2107      	movs	r1, #7
 8006d68:	2011      	movs	r0, #17
 8006d6a:	f7fb fdb9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2012      	movs	r0, #18
 8006d72:	f7fb fdb5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006d76:	2100      	movs	r1, #0
 8006d78:	2013      	movs	r0, #19
 8006d7a:	f7fb fdb1 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006d7e:	2014      	movs	r0, #20
 8006d80:	f7f9 fea2 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8006d84:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f7fb fda9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8006d8e:	f240 1137 	movw	r1, #311	; 0x137
 8006d92:	2011      	movs	r0, #17
 8006d94:	f7fb fda4 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006d98:	2014      	movs	r0, #20
 8006d9a:	f7f9 fe95 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8006d9e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006da2:	2012      	movs	r0, #18
 8006da4:	f7fb fd9c 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006da8:	2014      	movs	r0, #20
 8006daa:	f7f9 fe8d 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8006dae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006db2:	2013      	movs	r0, #19
 8006db4:	f7fb fd94 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8006db8:	2180      	movs	r1, #128	; 0x80
 8006dba:	202a      	movs	r0, #42	; 0x2a
 8006dbc:	f7fb fd90 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8006dc0:	2148      	movs	r1, #72	; 0x48
 8006dc2:	2029      	movs	r0, #41	; 0x29
 8006dc4:	f7fb fd8c 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006dc8:	2014      	movs	r0, #20
 8006dca:	f7f9 fe7d 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8006dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	f7fb fd84 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006dd8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006ddc:	2002      	movs	r0, #2
 8006dde:	f7fb fd7f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006de2:	f241 0138 	movw	r1, #4152	; 0x1038
 8006de6:	2003      	movs	r0, #3
 8006de8:	f7fb fd7a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006dec:	f240 2102 	movw	r1, #514	; 0x202
 8006df0:	2008      	movs	r0, #8
 8006df2:	f7fb fd75 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8006df6:	2100      	movs	r1, #0
 8006df8:	200a      	movs	r0, #10
 8006dfa:	f7fb fd71 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8006dfe:	2100      	movs	r1, #0
 8006e00:	200c      	movs	r0, #12
 8006e02:	f7fb fd6d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8006e06:	2100      	movs	r1, #0
 8006e08:	200d      	movs	r0, #13
 8006e0a:	f7fb fd69 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8006e0e:	2130      	movs	r1, #48	; 0x30
 8006e10:	200e      	movs	r0, #14
 8006e12:	f7fb fd65 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8006e16:	2100      	movs	r1, #0
 8006e18:	2050      	movs	r0, #80	; 0x50
 8006e1a:	f7fb fd61 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8006e1e:	21ef      	movs	r1, #239	; 0xef
 8006e20:	2051      	movs	r0, #81	; 0x51
 8006e22:	f7fb fd5d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006e26:	2100      	movs	r1, #0
 8006e28:	2052      	movs	r0, #82	; 0x52
 8006e2a:	f7fb fd59 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8006e2e:	f240 113f 	movw	r1, #319	; 0x13f
 8006e32:	2053      	movs	r0, #83	; 0x53
 8006e34:	f7fb fd54 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8006e38:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006e3c:	2060      	movs	r0, #96	; 0x60
 8006e3e:	f7fb fd4f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006e42:	2101      	movs	r1, #1
 8006e44:	2061      	movs	r0, #97	; 0x61
 8006e46:	f7fb fd4b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	206a      	movs	r0, #106	; 0x6a
 8006e4e:	f7fb fd47 	bl	80028e0 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8006e52:	2111      	movs	r1, #17
 8006e54:	2090      	movs	r0, #144	; 0x90
 8006e56:	f7fb fd43 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006e5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e5e:	2092      	movs	r0, #146	; 0x92
 8006e60:	f7fb fd3e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8006e64:	f240 4102 	movw	r1, #1026	; 0x402
 8006e68:	2093      	movs	r0, #147	; 0x93
 8006e6a:	f7fb fd39 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8006e6e:	2102      	movs	r1, #2
 8006e70:	2094      	movs	r0, #148	; 0x94
 8006e72:	f7fb fd35 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006e76:	2014      	movs	r0, #20
 8006e78:	f7f9 fe26 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	2007      	movs	r0, #7
 8006e80:	f7fb fd2e 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006e84:	2014      	movs	r0, #20
 8006e86:	f7f9 fe1f 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006e8a:	2161      	movs	r1, #97	; 0x61
 8006e8c:	2007      	movs	r0, #7
 8006e8e:	f7fb fd27 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8006e92:	f240 1173 	movw	r1, #371	; 0x173
 8006e96:	2007      	movs	r0, #7
 8006e98:	f7fb fd22 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	2020      	movs	r0, #32
 8006ea0:	f7fb fd1e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	2021      	movs	r0, #33	; 0x21
 8006ea8:	f7fb fd1a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8006eac:	2122      	movs	r1, #34	; 0x22
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7fb fd16 	bl	80028e0 <LCD_WriteReg>
 8006eb4:	f000 beca 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8006eb8:	4b6b      	ldr	r3, [pc, #428]	; (8007068 <LCD_Init+0x3250>)
 8006eba:	889b      	ldrh	r3, [r3, #4]
 8006ebc:	f24c 5205 	movw	r2, #50437	; 0xc505
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	f040 80d3 	bne.w	800706c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7fb fd09 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006ece:	2100      	movs	r1, #0
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	f7fb fd05 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006ed6:	2014      	movs	r0, #20
 8006ed8:	f7f9 fdf6 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8006edc:	2100      	movs	r1, #0
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f7fb fcfe 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f7fb fcfa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006eec:	2100      	movs	r1, #0
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7fb fcf6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f7fb fcf2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8006efc:	2101      	movs	r1, #1
 8006efe:	20a4      	movs	r0, #164	; 0xa4
 8006f00:	f7fb fcee 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8006f04:	2014      	movs	r0, #20
 8006f06:	f7f9 fddf 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006f0a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006f0e:	2060      	movs	r0, #96	; 0x60
 8006f10:	f7fb fce6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8006f14:	f640 0106 	movw	r1, #2054	; 0x806
 8006f18:	2008      	movs	r0, #8
 8006f1a:	f7fb fce1 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8006f1e:	f240 7103 	movw	r1, #1795	; 0x703
 8006f22:	2030      	movs	r0, #48	; 0x30
 8006f24:	f7fb fcdc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8006f28:	2101      	movs	r1, #1
 8006f2a:	2031      	movs	r0, #49	; 0x31
 8006f2c:	f7fb fcd8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8006f30:	2104      	movs	r1, #4
 8006f32:	2032      	movs	r0, #50	; 0x32
 8006f34:	f7fb fcd4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8006f38:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006f3c:	2033      	movs	r0, #51	; 0x33
 8006f3e:	f7fb fccf 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8006f42:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006f46:	2034      	movs	r0, #52	; 0x34
 8006f48:	f7fb fcca 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8006f4c:	f240 1103 	movw	r1, #259	; 0x103
 8006f50:	2035      	movs	r0, #53	; 0x35
 8006f52:	f7fb fcc5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8006f56:	211f      	movs	r1, #31
 8006f58:	2036      	movs	r0, #54	; 0x36
 8006f5a:	f7fb fcc1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8006f5e:	f240 7103 	movw	r1, #1795	; 0x703
 8006f62:	2037      	movs	r0, #55	; 0x37
 8006f64:	f7fb fcbc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	2038      	movs	r0, #56	; 0x38
 8006f6c:	f7fb fcb8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8006f70:	2104      	movs	r1, #4
 8006f72:	2039      	movs	r0, #57	; 0x39
 8006f74:	f7fb fcb4 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8006f78:	2115      	movs	r1, #21
 8006f7a:	2090      	movs	r0, #144	; 0x90
 8006f7c:	f7fb fcb0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8006f80:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006f84:	2010      	movs	r0, #16
 8006f86:	f7fb fcab 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8006f8a:	f240 2147 	movw	r1, #583	; 0x247
 8006f8e:	2011      	movs	r0, #17
 8006f90:	f7fb fca6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8006f94:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006f98:	2012      	movs	r0, #18
 8006f9a:	f7fb fca1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8006f9e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8006fa2:	2013      	movs	r0, #19
 8006fa4:	f7fb fc9c 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(120);
 8006fa8:	2078      	movs	r0, #120	; 0x78
 8006faa:	f7f9 fd8d 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8006fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f7fb fc94 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8006fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fbc:	2002      	movs	r0, #2
 8006fbe:	f7fb fc8f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006fc2:	f241 0130 	movw	r1, #4144	; 0x1030
 8006fc6:	2003      	movs	r0, #3
 8006fc8:	f7fb fc8a 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8006fcc:	2108      	movs	r1, #8
 8006fce:	200a      	movs	r0, #10
 8006fd0:	f7fb fc86 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	200c      	movs	r0, #12
 8006fd8:	f7fb fc82 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8006fdc:	2120      	movs	r1, #32
 8006fde:	200e      	movs	r0, #14
 8006fe0:	f7fb fc7e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	200f      	movs	r0, #15
 8006fe8:	f7fb fc7a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8006fec:	2100      	movs	r1, #0
 8006fee:	2020      	movs	r0, #32
 8006ff0:	f7fb fc76 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	2021      	movs	r0, #33	; 0x21
 8006ff8:	f7fb fc72 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8006ffc:	213d      	movs	r1, #61	; 0x3d
 8006ffe:	202a      	movs	r0, #42	; 0x2a
 8007000:	f7fb fc6e 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(20);
 8007004:	2014      	movs	r0, #20
 8007006:	f7f9 fd5f 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800700a:	212d      	movs	r1, #45	; 0x2d
 800700c:	2029      	movs	r0, #41	; 0x29
 800700e:	f7fb fc67 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007012:	2100      	movs	r1, #0
 8007014:	2050      	movs	r0, #80	; 0x50
 8007016:	f7fb fc63 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800701a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800701e:	2051      	movs	r0, #81	; 0x51
 8007020:	f7fb fc5e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007024:	2100      	movs	r1, #0
 8007026:	2052      	movs	r0, #82	; 0x52
 8007028:	f7fb fc5a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800702c:	f240 113f 	movw	r1, #319	; 0x13f
 8007030:	2053      	movs	r0, #83	; 0x53
 8007032:	f7fb fc55 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8007036:	2100      	movs	r1, #0
 8007038:	2061      	movs	r0, #97	; 0x61
 800703a:	f7fb fc51 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800703e:	2100      	movs	r1, #0
 8007040:	206a      	movs	r0, #106	; 0x6a
 8007042:	f7fb fc4d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8007046:	f44f 7140 	mov.w	r1, #768	; 0x300
 800704a:	2092      	movs	r0, #146	; 0x92
 800704c:	f7fb fc48 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8007050:	2105      	movs	r1, #5
 8007052:	2093      	movs	r0, #147	; 0x93
 8007054:	f7fb fc44 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8007058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800705c:	2007      	movs	r0, #7
 800705e:	f7fb fc3f 	bl	80028e0 <LCD_WriteReg>
 8007062:	f000 bdf3 	b.w	8007c4c <LCD_Init+0x3e34>
 8007066:	bf00      	nop
 8007068:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 800706c:	4bc2      	ldr	r3, [pc, #776]	; (8007378 <LCD_Init+0x3560>)
 800706e:	889b      	ldrh	r3, [r3, #4]
 8007070:	f648 1289 	movw	r2, #35209	; 0x8989
 8007074:	4293      	cmp	r3, r2
 8007076:	f040 80bc 	bne.w	80071f2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 800707a:	2101      	movs	r1, #1
 800707c:	2000      	movs	r0, #0
 800707e:	f7fb fc2f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8007082:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8007086:	2003      	movs	r0, #3
 8007088:	f7fb fc2a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800708c:	2100      	movs	r1, #0
 800708e:	200c      	movs	r0, #12
 8007090:	f7fb fc26 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8007094:	f640 010c 	movw	r1, #2060	; 0x80c
 8007098:	200d      	movs	r0, #13
 800709a:	f7fb fc21 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 800709e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80070a2:	200e      	movs	r0, #14
 80070a4:	f7fb fc1c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80070a8:	21b0      	movs	r1, #176	; 0xb0
 80070aa:	201e      	movs	r0, #30
 80070ac:	f7fb fc18 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80070b0:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80070b4:	2001      	movs	r0, #1
 80070b6:	f7fb fc13 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80070ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070be:	2002      	movs	r0, #2
 80070c0:	f7fb fc0e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80070c4:	2100      	movs	r1, #0
 80070c6:	2010      	movs	r0, #16
 80070c8:	f7fb fc0a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80070cc:	f246 0178 	movw	r1, #24696	; 0x6078
 80070d0:	2011      	movs	r0, #17
 80070d2:	f7fb fc05 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80070d6:	2100      	movs	r1, #0
 80070d8:	2005      	movs	r0, #5
 80070da:	f7fb fc01 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80070de:	2100      	movs	r1, #0
 80070e0:	2006      	movs	r0, #6
 80070e2:	f7fb fbfd 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 80070e6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80070ea:	2016      	movs	r0, #22
 80070ec:	f7fb fbf8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80070f0:	2103      	movs	r1, #3
 80070f2:	2017      	movs	r0, #23
 80070f4:	f7fb fbf4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 80070f8:	f240 2133 	movw	r1, #563	; 0x233
 80070fc:	2007      	movs	r0, #7
 80070fe:	f7fb fbef 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8007102:	2100      	movs	r1, #0
 8007104:	200b      	movs	r0, #11
 8007106:	f7fb fbeb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800710a:	2100      	movs	r1, #0
 800710c:	200f      	movs	r0, #15
 800710e:	f7fb fbe7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8007112:	2100      	movs	r1, #0
 8007114:	2041      	movs	r0, #65	; 0x41
 8007116:	f7fb fbe3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800711a:	2100      	movs	r1, #0
 800711c:	2042      	movs	r0, #66	; 0x42
 800711e:	f7fb fbdf 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8007122:	2100      	movs	r1, #0
 8007124:	2048      	movs	r0, #72	; 0x48
 8007126:	f7fb fbdb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800712a:	f240 113f 	movw	r1, #319	; 0x13f
 800712e:	2049      	movs	r0, #73	; 0x49
 8007130:	f7fb fbd6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8007134:	2100      	movs	r1, #0
 8007136:	204a      	movs	r0, #74	; 0x4a
 8007138:	f7fb fbd2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800713c:	2100      	movs	r1, #0
 800713e:	204b      	movs	r0, #75	; 0x4b
 8007140:	f7fb fbce 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8007144:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8007148:	2044      	movs	r0, #68	; 0x44
 800714a:	f7fb fbc9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800714e:	2100      	movs	r1, #0
 8007150:	2045      	movs	r0, #69	; 0x45
 8007152:	f7fb fbc5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8007156:	f240 113f 	movw	r1, #319	; 0x13f
 800715a:	2046      	movs	r0, #70	; 0x46
 800715c:	f7fb fbc0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8007160:	f240 7107 	movw	r1, #1799	; 0x707
 8007164:	2030      	movs	r0, #48	; 0x30
 8007166:	f7fb fbbb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800716a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800716e:	2031      	movs	r0, #49	; 0x31
 8007170:	f7fb fbb6 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8007174:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007178:	2032      	movs	r0, #50	; 0x32
 800717a:	f7fb fbb1 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800717e:	f240 5102 	movw	r1, #1282	; 0x502
 8007182:	2033      	movs	r0, #51	; 0x33
 8007184:	f7fb fbac 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8007188:	f240 5107 	movw	r1, #1287	; 0x507
 800718c:	2034      	movs	r0, #52	; 0x34
 800718e:	f7fb fba7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8007192:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007196:	2035      	movs	r0, #53	; 0x35
 8007198:	f7fb fba2 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 800719c:	f44f 7101 	mov.w	r1, #516	; 0x204
 80071a0:	2036      	movs	r0, #54	; 0x36
 80071a2:	f7fb fb9d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80071a6:	f240 5102 	movw	r1, #1282	; 0x502
 80071aa:	2037      	movs	r0, #55	; 0x37
 80071ac:	f7fb fb98 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80071b0:	f240 3102 	movw	r1, #770	; 0x302
 80071b4:	203a      	movs	r0, #58	; 0x3a
 80071b6:	f7fb fb93 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80071ba:	f240 3102 	movw	r1, #770	; 0x302
 80071be:	203b      	movs	r0, #59	; 0x3b
 80071c0:	f7fb fb8e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80071c4:	2100      	movs	r1, #0
 80071c6:	2023      	movs	r0, #35	; 0x23
 80071c8:	f7fb fb8a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80071cc:	2100      	movs	r1, #0
 80071ce:	2024      	movs	r0, #36	; 0x24
 80071d0:	f7fb fb86 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80071d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071d8:	2025      	movs	r0, #37	; 0x25
 80071da:	f7fb fb81 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80071de:	2100      	movs	r1, #0
 80071e0:	204f      	movs	r0, #79	; 0x4f
 80071e2:	f7fb fb7d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 80071e6:	2100      	movs	r1, #0
 80071e8:	204e      	movs	r0, #78	; 0x4e
 80071ea:	f7fb fb79 	bl	80028e0 <LCD_WriteReg>
 80071ee:	f000 bd2d 	b.w	8007c4c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80071f2:	4b61      	ldr	r3, [pc, #388]	; (8007378 <LCD_Init+0x3560>)
 80071f4:	889b      	ldrh	r3, [r3, #4]
 80071f6:	f244 5231 	movw	r2, #17713	; 0x4531
 80071fa:	4293      	cmp	r3, r2
 80071fc:	f040 80be 	bne.w	800737c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007200:	2101      	movs	r1, #1
 8007202:	2000      	movs	r0, #0
 8007204:	f7fb fb6c 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(10);
 8007208:	200a      	movs	r0, #10
 800720a:	f7f9 fc5d 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800720e:	f241 6128 	movw	r1, #5672	; 0x1628
 8007212:	2010      	movs	r0, #16
 8007214:	f7fb fb64 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007218:	210e      	movs	r1, #14
 800721a:	2012      	movs	r0, #18
 800721c:	f7fb fb60 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007220:	f640 2139 	movw	r1, #2617	; 0xa39
 8007224:	2013      	movs	r0, #19
 8007226:	f7fb fb5b 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(10);
 800722a:	200a      	movs	r0, #10
 800722c:	f7f9 fc4c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007230:	2140      	movs	r1, #64	; 0x40
 8007232:	2011      	movs	r0, #17
 8007234:	f7fb fb54 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8007238:	2150      	movs	r1, #80	; 0x50
 800723a:	2015      	movs	r0, #21
 800723c:	f7fb fb50 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(10);
 8007240:	200a      	movs	r0, #10
 8007242:	f7f9 fc41 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8007246:	211e      	movs	r1, #30
 8007248:	2012      	movs	r0, #18
 800724a:	f7fb fb49 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(10);
 800724e:	200a      	movs	r0, #10
 8007250:	f7f9 fc3a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8007254:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8007258:	2010      	movs	r0, #16
 800725a:	f7fb fb41 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800725e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8007262:	2013      	movs	r0, #19
 8007264:	f7fb fb3c 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(10);
 8007268:	200a      	movs	r0, #10
 800726a:	f7f9 fc2d 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800726e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007272:	2001      	movs	r0, #1
 8007274:	f7fb fb34 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007278:	f44f 7140 	mov.w	r1, #768	; 0x300
 800727c:	2002      	movs	r0, #2
 800727e:	f7fb fb2f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8007282:	f241 0138 	movw	r1, #4152	; 0x1038
 8007286:	2003      	movs	r0, #3
 8007288:	f7fb fb2a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800728c:	f240 2102 	movw	r1, #514	; 0x202
 8007290:	2008      	movs	r0, #8
 8007292:	f7fb fb25 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007296:	2108      	movs	r1, #8
 8007298:	200a      	movs	r0, #10
 800729a:	f7fb fb21 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800729e:	2100      	movs	r1, #0
 80072a0:	2030      	movs	r0, #48	; 0x30
 80072a2:	f7fb fb1d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80072a6:	f240 4102 	movw	r1, #1026	; 0x402
 80072aa:	2031      	movs	r0, #49	; 0x31
 80072ac:	f7fb fb18 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80072b0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80072b4:	2032      	movs	r0, #50	; 0x32
 80072b6:	f7fb fb13 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80072ba:	f240 5103 	movw	r1, #1283	; 0x503
 80072be:	2033      	movs	r0, #51	; 0x33
 80072c0:	f7fb fb0e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80072c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80072c8:	2034      	movs	r0, #52	; 0x34
 80072ca:	f7fb fb09 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80072ce:	f240 3101 	movw	r1, #769	; 0x301
 80072d2:	2035      	movs	r0, #53	; 0x35
 80072d4:	f7fb fb04 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80072d8:	f240 7107 	movw	r1, #1799	; 0x707
 80072dc:	2036      	movs	r0, #54	; 0x36
 80072de:	f7fb faff 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80072e2:	f240 3105 	movw	r1, #773	; 0x305
 80072e6:	2037      	movs	r0, #55	; 0x37
 80072e8:	f7fb fafa 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80072ec:	f44f 7102 	mov.w	r1, #520	; 0x208
 80072f0:	2038      	movs	r0, #56	; 0x38
 80072f2:	f7fb faf5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80072f6:	f640 710b 	movw	r1, #3851	; 0xf0b
 80072fa:	2039      	movs	r0, #57	; 0x39
 80072fc:	f7fb faf0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007300:	2102      	movs	r1, #2
 8007302:	2041      	movs	r0, #65	; 0x41
 8007304:	f7fb faec 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007308:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800730c:	2060      	movs	r0, #96	; 0x60
 800730e:	f7fb fae7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007312:	2101      	movs	r1, #1
 8007314:	2061      	movs	r0, #97	; 0x61
 8007316:	f7fb fae3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800731a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800731e:	2090      	movs	r0, #144	; 0x90
 8007320:	f7fb fade 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8007324:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007328:	2092      	movs	r0, #146	; 0x92
 800732a:	f7fb fad9 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800732e:	2104      	movs	r1, #4
 8007330:	2093      	movs	r0, #147	; 0x93
 8007332:	f7fb fad5 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8007336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800733a:	20a0      	movs	r0, #160	; 0xa0
 800733c:	f7fb fad0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007340:	2101      	movs	r1, #1
 8007342:	2007      	movs	r0, #7
 8007344:	f7fb facc 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007348:	2121      	movs	r1, #33	; 0x21
 800734a:	2007      	movs	r0, #7
 800734c:	f7fb fac8 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007350:	2123      	movs	r1, #35	; 0x23
 8007352:	2007      	movs	r0, #7
 8007354:	f7fb fac4 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007358:	2133      	movs	r1, #51	; 0x33
 800735a:	2007      	movs	r0, #7
 800735c:	f7fb fac0 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007360:	f240 1133 	movw	r1, #307	; 0x133
 8007364:	2007      	movs	r0, #7
 8007366:	f7fb fabb 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800736a:	2100      	movs	r1, #0
 800736c:	20a0      	movs	r0, #160	; 0xa0
 800736e:	f7fb fab7 	bl	80028e0 <LCD_WriteReg>
 8007372:	f000 bc6b 	b.w	8007c4c <LCD_Init+0x3e34>
 8007376:	bf00      	nop
 8007378:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0x4535) {
 800737c:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <LCD_Init+0x36d4>)
 800737e:	889b      	ldrh	r3, [r3, #4]
 8007380:	f244 5235 	movw	r2, #17717	; 0x4535
 8007384:	4293      	cmp	r3, r2
 8007386:	f040 80b3 	bne.w	80074f0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800738a:	2130      	movs	r1, #48	; 0x30
 800738c:	2015      	movs	r0, #21
 800738e:	f7fb faa7 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8007392:	2110      	movs	r1, #16
 8007394:	209a      	movs	r0, #154	; 0x9a
 8007396:	f7fb faa3 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800739a:	2120      	movs	r1, #32
 800739c:	2011      	movs	r0, #17
 800739e:	f7fb fa9f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80073a2:	f243 4128 	movw	r1, #13352	; 0x3428
 80073a6:	2010      	movs	r0, #16
 80073a8:	f7fb fa9a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80073ac:	2102      	movs	r1, #2
 80073ae:	2012      	movs	r0, #18
 80073b0:	f7fb fa96 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80073b4:	f241 0138 	movw	r1, #4152	; 0x1038
 80073b8:	2013      	movs	r0, #19
 80073ba:	f7fb fa91 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(40);
 80073be:	2028      	movs	r0, #40	; 0x28
 80073c0:	f7f9 fb82 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80073c4:	2112      	movs	r1, #18
 80073c6:	2012      	movs	r0, #18
 80073c8:	f7fb fa8a 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(40);
 80073cc:	2028      	movs	r0, #40	; 0x28
 80073ce:	f7f9 fb7b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80073d2:	f243 4120 	movw	r1, #13344	; 0x3420
 80073d6:	2010      	movs	r0, #16
 80073d8:	f7fb fa82 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80073dc:	f243 0138 	movw	r1, #12344	; 0x3038
 80073e0:	2013      	movs	r0, #19
 80073e2:	f7fb fa7d 	bl	80028e0 <LCD_WriteReg>
		HAL_Delay(70);
 80073e6:	2046      	movs	r0, #70	; 0x46
 80073e8:	f7f9 fb6e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80073ec:	2100      	movs	r1, #0
 80073ee:	2030      	movs	r0, #48	; 0x30
 80073f0:	f7fb fa76 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80073f4:	f240 4102 	movw	r1, #1026	; 0x402
 80073f8:	2031      	movs	r0, #49	; 0x31
 80073fa:	f7fb fa71 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80073fe:	f240 3107 	movw	r1, #775	; 0x307
 8007402:	2032      	movs	r0, #50	; 0x32
 8007404:	f7fb fa6c 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8007408:	f44f 7141 	mov.w	r1, #772	; 0x304
 800740c:	2033      	movs	r0, #51	; 0x33
 800740e:	f7fb fa67 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8007412:	2104      	movs	r1, #4
 8007414:	2034      	movs	r0, #52	; 0x34
 8007416:	f7fb fa63 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800741a:	f240 4101 	movw	r1, #1025	; 0x401
 800741e:	2035      	movs	r0, #53	; 0x35
 8007420:	f7fb fa5e 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007424:	f240 7107 	movw	r1, #1799	; 0x707
 8007428:	2036      	movs	r0, #54	; 0x36
 800742a:	f7fb fa59 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800742e:	f240 3105 	movw	r1, #773	; 0x305
 8007432:	2037      	movs	r0, #55	; 0x37
 8007434:	f7fb fa54 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8007438:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800743c:	2038      	movs	r0, #56	; 0x38
 800743e:	f7fb fa4f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8007442:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007446:	2039      	movs	r0, #57	; 0x39
 8007448:	f7fb fa4a 	bl	80028e0 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800744c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007450:	2001      	movs	r0, #1
 8007452:	f7fb fa45 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007456:	f44f 7140 	mov.w	r1, #768	; 0x300
 800745a:	2002      	movs	r0, #2
 800745c:	f7fb fa40 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8007460:	f241 0130 	movw	r1, #4144	; 0x1030
 8007464:	2003      	movs	r0, #3
 8007466:	f7fb fa3b 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800746a:	f640 0108 	movw	r1, #2056	; 0x808
 800746e:	2008      	movs	r0, #8
 8007470:	f7fb fa36 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007474:	2108      	movs	r1, #8
 8007476:	200a      	movs	r0, #10
 8007478:	f7fb fa32 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800747c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007480:	2060      	movs	r0, #96	; 0x60
 8007482:	f7fb fa2d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007486:	2101      	movs	r1, #1
 8007488:	2061      	movs	r0, #97	; 0x61
 800748a:	f7fb fa29 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800748e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007492:	2090      	movs	r0, #144	; 0x90
 8007494:	f7fb fa24 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8007498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800749c:	2092      	movs	r0, #146	; 0x92
 800749e:	f7fb fa1f 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80074a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074a6:	2093      	movs	r0, #147	; 0x93
 80074a8:	f7fb fa1a 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80074ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80074b0:	20a0      	movs	r0, #160	; 0xa0
 80074b2:	f7fb fa15 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80074b6:	2110      	movs	r1, #16
 80074b8:	20a3      	movs	r0, #163	; 0xa3
 80074ba:	f7fb fa11 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80074be:	2101      	movs	r1, #1
 80074c0:	2007      	movs	r0, #7
 80074c2:	f7fb fa0d 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80074c6:	2121      	movs	r1, #33	; 0x21
 80074c8:	2007      	movs	r0, #7
 80074ca:	f7fb fa09 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80074ce:	2123      	movs	r1, #35	; 0x23
 80074d0:	2007      	movs	r0, #7
 80074d2:	f7fb fa05 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80074d6:	2133      	movs	r1, #51	; 0x33
 80074d8:	2007      	movs	r0, #7
 80074da:	f7fb fa01 	bl	80028e0 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80074de:	f240 1133 	movw	r1, #307	; 0x133
 80074e2:	2007      	movs	r0, #7
 80074e4:	f7fb f9fc 	bl	80028e0 <LCD_WriteReg>
 80074e8:	e3b0      	b.n	8007c4c <LCD_Init+0x3e34>
 80074ea:	bf00      	nop
 80074ec:	200000a0 	.word	0x200000a0
	} else if (lcddev.id == 0X1963) {
 80074f0:	4ba8      	ldr	r3, [pc, #672]	; (8007794 <LCD_Init+0x397c>)
 80074f2:	889b      	ldrh	r3, [r3, #4]
 80074f4:	f641 1263 	movw	r2, #6499	; 0x1963
 80074f8:	4293      	cmp	r3, r2
 80074fa:	f040 83a7 	bne.w	8007c4c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80074fe:	20e2      	movs	r0, #226	; 0xe2
 8007500:	f7fb f962 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8007504:	4ba4      	ldr	r3, [pc, #656]	; (8007798 <LCD_Init+0x3980>)
 8007506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800750a:	611a      	str	r2, [r3, #16]
 800750c:	4ba2      	ldr	r3, [pc, #648]	; (8007798 <LCD_Init+0x3980>)
 800750e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007512:	615a      	str	r2, [r3, #20]
 8007514:	4ba1      	ldr	r3, [pc, #644]	; (800779c <LCD_Init+0x3984>)
 8007516:	221d      	movs	r2, #29
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	4b9f      	ldr	r3, [pc, #636]	; (8007798 <LCD_Init+0x3980>)
 800751c:	2280      	movs	r2, #128	; 0x80
 800751e:	615a      	str	r2, [r3, #20]
 8007520:	4b9d      	ldr	r3, [pc, #628]	; (8007798 <LCD_Init+0x3980>)
 8007522:	2280      	movs	r2, #128	; 0x80
 8007524:	611a      	str	r2, [r3, #16]
 8007526:	4b9c      	ldr	r3, [pc, #624]	; (8007798 <LCD_Init+0x3980>)
 8007528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800752c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800752e:	4b9a      	ldr	r3, [pc, #616]	; (8007798 <LCD_Init+0x3980>)
 8007530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007534:	611a      	str	r2, [r3, #16]
 8007536:	4b98      	ldr	r3, [pc, #608]	; (8007798 <LCD_Init+0x3980>)
 8007538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753c:	615a      	str	r2, [r3, #20]
 800753e:	4b97      	ldr	r3, [pc, #604]	; (800779c <LCD_Init+0x3984>)
 8007540:	2202      	movs	r2, #2
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	4b94      	ldr	r3, [pc, #592]	; (8007798 <LCD_Init+0x3980>)
 8007546:	2280      	movs	r2, #128	; 0x80
 8007548:	615a      	str	r2, [r3, #20]
 800754a:	4b93      	ldr	r3, [pc, #588]	; (8007798 <LCD_Init+0x3980>)
 800754c:	2280      	movs	r2, #128	; 0x80
 800754e:	611a      	str	r2, [r3, #16]
 8007550:	4b91      	ldr	r3, [pc, #580]	; (8007798 <LCD_Init+0x3980>)
 8007552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007556:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8007558:	4b8f      	ldr	r3, [pc, #572]	; (8007798 <LCD_Init+0x3980>)
 800755a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800755e:	611a      	str	r2, [r3, #16]
 8007560:	4b8d      	ldr	r3, [pc, #564]	; (8007798 <LCD_Init+0x3980>)
 8007562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007566:	615a      	str	r2, [r3, #20]
 8007568:	4b8c      	ldr	r3, [pc, #560]	; (800779c <LCD_Init+0x3984>)
 800756a:	2204      	movs	r2, #4
 800756c:	60da      	str	r2, [r3, #12]
 800756e:	4b8a      	ldr	r3, [pc, #552]	; (8007798 <LCD_Init+0x3980>)
 8007570:	2280      	movs	r2, #128	; 0x80
 8007572:	615a      	str	r2, [r3, #20]
 8007574:	4b88      	ldr	r3, [pc, #544]	; (8007798 <LCD_Init+0x3980>)
 8007576:	2280      	movs	r2, #128	; 0x80
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	4b87      	ldr	r3, [pc, #540]	; (8007798 <LCD_Init+0x3980>)
 800757c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007580:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8007582:	2001      	movs	r0, #1
 8007584:	f7f9 faa0 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8007588:	20e0      	movs	r0, #224	; 0xe0
 800758a:	f7fb f91d 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800758e:	4b82      	ldr	r3, [pc, #520]	; (8007798 <LCD_Init+0x3980>)
 8007590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007594:	611a      	str	r2, [r3, #16]
 8007596:	4b80      	ldr	r3, [pc, #512]	; (8007798 <LCD_Init+0x3980>)
 8007598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800759c:	615a      	str	r2, [r3, #20]
 800759e:	4b7f      	ldr	r3, [pc, #508]	; (800779c <LCD_Init+0x3984>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	60da      	str	r2, [r3, #12]
 80075a4:	4b7c      	ldr	r3, [pc, #496]	; (8007798 <LCD_Init+0x3980>)
 80075a6:	2280      	movs	r2, #128	; 0x80
 80075a8:	615a      	str	r2, [r3, #20]
 80075aa:	4b7b      	ldr	r3, [pc, #492]	; (8007798 <LCD_Init+0x3980>)
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	611a      	str	r2, [r3, #16]
 80075b0:	4b79      	ldr	r3, [pc, #484]	; (8007798 <LCD_Init+0x3980>)
 80075b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075b6:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80075b8:	200a      	movs	r0, #10
 80075ba:	f7f9 fa85 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80075be:	20e0      	movs	r0, #224	; 0xe0
 80075c0:	f7fb f902 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80075c4:	4b74      	ldr	r3, [pc, #464]	; (8007798 <LCD_Init+0x3980>)
 80075c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ca:	611a      	str	r2, [r3, #16]
 80075cc:	4b72      	ldr	r3, [pc, #456]	; (8007798 <LCD_Init+0x3980>)
 80075ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d2:	615a      	str	r2, [r3, #20]
 80075d4:	4b71      	ldr	r3, [pc, #452]	; (800779c <LCD_Init+0x3984>)
 80075d6:	2203      	movs	r2, #3
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	4b6f      	ldr	r3, [pc, #444]	; (8007798 <LCD_Init+0x3980>)
 80075dc:	2280      	movs	r2, #128	; 0x80
 80075de:	615a      	str	r2, [r3, #20]
 80075e0:	4b6d      	ldr	r3, [pc, #436]	; (8007798 <LCD_Init+0x3980>)
 80075e2:	2280      	movs	r2, #128	; 0x80
 80075e4:	611a      	str	r2, [r3, #16]
 80075e6:	4b6c      	ldr	r3, [pc, #432]	; (8007798 <LCD_Init+0x3980>)
 80075e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ec:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80075ee:	200c      	movs	r0, #12
 80075f0:	f7f9 fa6a 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80075f4:	2001      	movs	r0, #1
 80075f6:	f7fb f8e7 	bl	80027c8 <LCD_WR_REG>
		HAL_Delay(10);
 80075fa:	200a      	movs	r0, #10
 80075fc:	f7f9 fa64 	bl	8000ac8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007600:	20e6      	movs	r0, #230	; 0xe6
 8007602:	f7fb f8e1 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8007606:	4b64      	ldr	r3, [pc, #400]	; (8007798 <LCD_Init+0x3980>)
 8007608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800760c:	611a      	str	r2, [r3, #16]
 800760e:	4b62      	ldr	r3, [pc, #392]	; (8007798 <LCD_Init+0x3980>)
 8007610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007614:	615a      	str	r2, [r3, #20]
 8007616:	4b61      	ldr	r3, [pc, #388]	; (800779c <LCD_Init+0x3984>)
 8007618:	222f      	movs	r2, #47	; 0x2f
 800761a:	60da      	str	r2, [r3, #12]
 800761c:	4b5e      	ldr	r3, [pc, #376]	; (8007798 <LCD_Init+0x3980>)
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	615a      	str	r2, [r3, #20]
 8007622:	4b5d      	ldr	r3, [pc, #372]	; (8007798 <LCD_Init+0x3980>)
 8007624:	2280      	movs	r2, #128	; 0x80
 8007626:	611a      	str	r2, [r3, #16]
 8007628:	4b5b      	ldr	r3, [pc, #364]	; (8007798 <LCD_Init+0x3980>)
 800762a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800762e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007630:	4b59      	ldr	r3, [pc, #356]	; (8007798 <LCD_Init+0x3980>)
 8007632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007636:	611a      	str	r2, [r3, #16]
 8007638:	4b57      	ldr	r3, [pc, #348]	; (8007798 <LCD_Init+0x3980>)
 800763a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800763e:	615a      	str	r2, [r3, #20]
 8007640:	4b56      	ldr	r3, [pc, #344]	; (800779c <LCD_Init+0x3984>)
 8007642:	22ff      	movs	r2, #255	; 0xff
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	4b54      	ldr	r3, [pc, #336]	; (8007798 <LCD_Init+0x3980>)
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	615a      	str	r2, [r3, #20]
 800764c:	4b52      	ldr	r3, [pc, #328]	; (8007798 <LCD_Init+0x3980>)
 800764e:	2280      	movs	r2, #128	; 0x80
 8007650:	611a      	str	r2, [r3, #16]
 8007652:	4b51      	ldr	r3, [pc, #324]	; (8007798 <LCD_Init+0x3980>)
 8007654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007658:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800765a:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <LCD_Init+0x3980>)
 800765c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007660:	611a      	str	r2, [r3, #16]
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <LCD_Init+0x3980>)
 8007664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007668:	615a      	str	r2, [r3, #20]
 800766a:	4b4c      	ldr	r3, [pc, #304]	; (800779c <LCD_Init+0x3984>)
 800766c:	22ff      	movs	r2, #255	; 0xff
 800766e:	60da      	str	r2, [r3, #12]
 8007670:	4b49      	ldr	r3, [pc, #292]	; (8007798 <LCD_Init+0x3980>)
 8007672:	2280      	movs	r2, #128	; 0x80
 8007674:	615a      	str	r2, [r3, #20]
 8007676:	4b48      	ldr	r3, [pc, #288]	; (8007798 <LCD_Init+0x3980>)
 8007678:	2280      	movs	r2, #128	; 0x80
 800767a:	611a      	str	r2, [r3, #16]
 800767c:	4b46      	ldr	r3, [pc, #280]	; (8007798 <LCD_Init+0x3980>)
 800767e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007682:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8007684:	20b0      	movs	r0, #176	; 0xb0
 8007686:	f7fb f89f 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800768a:	4b43      	ldr	r3, [pc, #268]	; (8007798 <LCD_Init+0x3980>)
 800768c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007690:	611a      	str	r2, [r3, #16]
 8007692:	4b41      	ldr	r3, [pc, #260]	; (8007798 <LCD_Init+0x3980>)
 8007694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007698:	615a      	str	r2, [r3, #20]
 800769a:	4b40      	ldr	r3, [pc, #256]	; (800779c <LCD_Init+0x3984>)
 800769c:	2220      	movs	r2, #32
 800769e:	60da      	str	r2, [r3, #12]
 80076a0:	4b3d      	ldr	r3, [pc, #244]	; (8007798 <LCD_Init+0x3980>)
 80076a2:	2280      	movs	r2, #128	; 0x80
 80076a4:	615a      	str	r2, [r3, #20]
 80076a6:	4b3c      	ldr	r3, [pc, #240]	; (8007798 <LCD_Init+0x3980>)
 80076a8:	2280      	movs	r2, #128	; 0x80
 80076aa:	611a      	str	r2, [r3, #16]
 80076ac:	4b3a      	ldr	r3, [pc, #232]	; (8007798 <LCD_Init+0x3980>)
 80076ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80076b4:	4b38      	ldr	r3, [pc, #224]	; (8007798 <LCD_Init+0x3980>)
 80076b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ba:	611a      	str	r2, [r3, #16]
 80076bc:	4b36      	ldr	r3, [pc, #216]	; (8007798 <LCD_Init+0x3980>)
 80076be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c2:	615a      	str	r2, [r3, #20]
 80076c4:	4b35      	ldr	r3, [pc, #212]	; (800779c <LCD_Init+0x3984>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	60da      	str	r2, [r3, #12]
 80076ca:	4b33      	ldr	r3, [pc, #204]	; (8007798 <LCD_Init+0x3980>)
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	615a      	str	r2, [r3, #20]
 80076d0:	4b31      	ldr	r3, [pc, #196]	; (8007798 <LCD_Init+0x3980>)
 80076d2:	2280      	movs	r2, #128	; 0x80
 80076d4:	611a      	str	r2, [r3, #16]
 80076d6:	4b30      	ldr	r3, [pc, #192]	; (8007798 <LCD_Init+0x3980>)
 80076d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076dc:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80076de:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <LCD_Init+0x3980>)
 80076e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076e4:	611a      	str	r2, [r3, #16]
 80076e6:	4b2c      	ldr	r3, [pc, #176]	; (8007798 <LCD_Init+0x3980>)
 80076e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ec:	615a      	str	r2, [r3, #20]
 80076ee:	4b2b      	ldr	r3, [pc, #172]	; (800779c <LCD_Init+0x3984>)
 80076f0:	2203      	movs	r2, #3
 80076f2:	60da      	str	r2, [r3, #12]
 80076f4:	4b28      	ldr	r3, [pc, #160]	; (8007798 <LCD_Init+0x3980>)
 80076f6:	2280      	movs	r2, #128	; 0x80
 80076f8:	615a      	str	r2, [r3, #20]
 80076fa:	4b27      	ldr	r3, [pc, #156]	; (8007798 <LCD_Init+0x3980>)
 80076fc:	2280      	movs	r2, #128	; 0x80
 80076fe:	611a      	str	r2, [r3, #16]
 8007700:	4b25      	ldr	r3, [pc, #148]	; (8007798 <LCD_Init+0x3980>)
 8007702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007706:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8007708:	4b23      	ldr	r3, [pc, #140]	; (8007798 <LCD_Init+0x3980>)
 800770a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800770e:	611a      	str	r2, [r3, #16]
 8007710:	4b21      	ldr	r3, [pc, #132]	; (8007798 <LCD_Init+0x3980>)
 8007712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007716:	615a      	str	r2, [r3, #20]
 8007718:	4b20      	ldr	r3, [pc, #128]	; (800779c <LCD_Init+0x3984>)
 800771a:	f240 321f 	movw	r2, #799	; 0x31f
 800771e:	60da      	str	r2, [r3, #12]
 8007720:	4b1d      	ldr	r3, [pc, #116]	; (8007798 <LCD_Init+0x3980>)
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	615a      	str	r2, [r3, #20]
 8007726:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <LCD_Init+0x3980>)
 8007728:	2280      	movs	r2, #128	; 0x80
 800772a:	611a      	str	r2, [r3, #16]
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <LCD_Init+0x3980>)
 800772e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007732:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8007734:	4b18      	ldr	r3, [pc, #96]	; (8007798 <LCD_Init+0x3980>)
 8007736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800773a:	611a      	str	r2, [r3, #16]
 800773c:	4b16      	ldr	r3, [pc, #88]	; (8007798 <LCD_Init+0x3980>)
 800773e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007742:	615a      	str	r2, [r3, #20]
 8007744:	4b15      	ldr	r3, [pc, #84]	; (800779c <LCD_Init+0x3984>)
 8007746:	2201      	movs	r2, #1
 8007748:	60da      	str	r2, [r3, #12]
 800774a:	4b13      	ldr	r3, [pc, #76]	; (8007798 <LCD_Init+0x3980>)
 800774c:	2280      	movs	r2, #128	; 0x80
 800774e:	615a      	str	r2, [r3, #20]
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <LCD_Init+0x3980>)
 8007752:	2280      	movs	r2, #128	; 0x80
 8007754:	611a      	str	r2, [r3, #16]
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <LCD_Init+0x3980>)
 8007758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <LCD_Init+0x3980>)
 8007760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007764:	611a      	str	r2, [r3, #16]
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <LCD_Init+0x3980>)
 8007768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800776c:	615a      	str	r2, [r3, #20]
 800776e:	4b0b      	ldr	r3, [pc, #44]	; (800779c <LCD_Init+0x3984>)
 8007770:	f240 12df 	movw	r2, #479	; 0x1df
 8007774:	60da      	str	r2, [r3, #12]
 8007776:	4b08      	ldr	r3, [pc, #32]	; (8007798 <LCD_Init+0x3980>)
 8007778:	2280      	movs	r2, #128	; 0x80
 800777a:	615a      	str	r2, [r3, #20]
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <LCD_Init+0x3980>)
 800777e:	2280      	movs	r2, #128	; 0x80
 8007780:	611a      	str	r2, [r3, #16]
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <LCD_Init+0x3980>)
 8007784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007788:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800778a:	4b03      	ldr	r3, [pc, #12]	; (8007798 <LCD_Init+0x3980>)
 800778c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007790:	e006      	b.n	80077a0 <LCD_Init+0x3988>
 8007792:	bf00      	nop
 8007794:	200000a0 	.word	0x200000a0
 8007798:	40011000 	.word	0x40011000
 800779c:	40010c00 	.word	0x40010c00
 80077a0:	611a      	str	r2, [r3, #16]
 80077a2:	4ba3      	ldr	r3, [pc, #652]	; (8007a30 <LCD_Init+0x3c18>)
 80077a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a8:	615a      	str	r2, [r3, #20]
 80077aa:	4ba2      	ldr	r3, [pc, #648]	; (8007a34 <LCD_Init+0x3c1c>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	4b9f      	ldr	r3, [pc, #636]	; (8007a30 <LCD_Init+0x3c18>)
 80077b2:	2280      	movs	r2, #128	; 0x80
 80077b4:	615a      	str	r2, [r3, #20]
 80077b6:	4b9e      	ldr	r3, [pc, #632]	; (8007a30 <LCD_Init+0x3c18>)
 80077b8:	2280      	movs	r2, #128	; 0x80
 80077ba:	611a      	str	r2, [r3, #16]
 80077bc:	4b9c      	ldr	r3, [pc, #624]	; (8007a30 <LCD_Init+0x3c18>)
 80077be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80077c4:	20b4      	movs	r0, #180	; 0xb4
 80077c6:	f7fa ffff 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80077ca:	4b99      	ldr	r3, [pc, #612]	; (8007a30 <LCD_Init+0x3c18>)
 80077cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077d0:	611a      	str	r2, [r3, #16]
 80077d2:	4b97      	ldr	r3, [pc, #604]	; (8007a30 <LCD_Init+0x3c18>)
 80077d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d8:	615a      	str	r2, [r3, #20]
 80077da:	4b96      	ldr	r3, [pc, #600]	; (8007a34 <LCD_Init+0x3c1c>)
 80077dc:	2204      	movs	r2, #4
 80077de:	60da      	str	r2, [r3, #12]
 80077e0:	4b93      	ldr	r3, [pc, #588]	; (8007a30 <LCD_Init+0x3c18>)
 80077e2:	2280      	movs	r2, #128	; 0x80
 80077e4:	615a      	str	r2, [r3, #20]
 80077e6:	4b92      	ldr	r3, [pc, #584]	; (8007a30 <LCD_Init+0x3c18>)
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	611a      	str	r2, [r3, #16]
 80077ec:	4b90      	ldr	r3, [pc, #576]	; (8007a30 <LCD_Init+0x3c18>)
 80077ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80077f4:	4b8e      	ldr	r3, [pc, #568]	; (8007a30 <LCD_Init+0x3c18>)
 80077f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077fa:	611a      	str	r2, [r3, #16]
 80077fc:	4b8c      	ldr	r3, [pc, #560]	; (8007a30 <LCD_Init+0x3c18>)
 80077fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007802:	615a      	str	r2, [r3, #20]
 8007804:	4b8b      	ldr	r3, [pc, #556]	; (8007a34 <LCD_Init+0x3c1c>)
 8007806:	f240 421f 	movw	r2, #1055	; 0x41f
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	4b88      	ldr	r3, [pc, #544]	; (8007a30 <LCD_Init+0x3c18>)
 800780e:	2280      	movs	r2, #128	; 0x80
 8007810:	615a      	str	r2, [r3, #20]
 8007812:	4b87      	ldr	r3, [pc, #540]	; (8007a30 <LCD_Init+0x3c18>)
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	611a      	str	r2, [r3, #16]
 8007818:	4b85      	ldr	r3, [pc, #532]	; (8007a30 <LCD_Init+0x3c18>)
 800781a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8007820:	4b83      	ldr	r3, [pc, #524]	; (8007a30 <LCD_Init+0x3c18>)
 8007822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007826:	611a      	str	r2, [r3, #16]
 8007828:	4b81      	ldr	r3, [pc, #516]	; (8007a30 <LCD_Init+0x3c18>)
 800782a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800782e:	615a      	str	r2, [r3, #20]
 8007830:	4b80      	ldr	r3, [pc, #512]	; (8007a34 <LCD_Init+0x3c1c>)
 8007832:	2200      	movs	r2, #0
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	4b7e      	ldr	r3, [pc, #504]	; (8007a30 <LCD_Init+0x3c18>)
 8007838:	2280      	movs	r2, #128	; 0x80
 800783a:	615a      	str	r2, [r3, #20]
 800783c:	4b7c      	ldr	r3, [pc, #496]	; (8007a30 <LCD_Init+0x3c18>)
 800783e:	2280      	movs	r2, #128	; 0x80
 8007840:	611a      	str	r2, [r3, #16]
 8007842:	4b7b      	ldr	r3, [pc, #492]	; (8007a30 <LCD_Init+0x3c18>)
 8007844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007848:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800784a:	4b79      	ldr	r3, [pc, #484]	; (8007a30 <LCD_Init+0x3c18>)
 800784c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007850:	611a      	str	r2, [r3, #16]
 8007852:	4b77      	ldr	r3, [pc, #476]	; (8007a30 <LCD_Init+0x3c18>)
 8007854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007858:	615a      	str	r2, [r3, #20]
 800785a:	4b76      	ldr	r3, [pc, #472]	; (8007a34 <LCD_Init+0x3c1c>)
 800785c:	222e      	movs	r2, #46	; 0x2e
 800785e:	60da      	str	r2, [r3, #12]
 8007860:	4b73      	ldr	r3, [pc, #460]	; (8007a30 <LCD_Init+0x3c18>)
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	615a      	str	r2, [r3, #20]
 8007866:	4b72      	ldr	r3, [pc, #456]	; (8007a30 <LCD_Init+0x3c18>)
 8007868:	2280      	movs	r2, #128	; 0x80
 800786a:	611a      	str	r2, [r3, #16]
 800786c:	4b70      	ldr	r3, [pc, #448]	; (8007a30 <LCD_Init+0x3c18>)
 800786e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007872:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8007874:	4b6e      	ldr	r3, [pc, #440]	; (8007a30 <LCD_Init+0x3c18>)
 8007876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787a:	611a      	str	r2, [r3, #16]
 800787c:	4b6c      	ldr	r3, [pc, #432]	; (8007a30 <LCD_Init+0x3c18>)
 800787e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007882:	615a      	str	r2, [r3, #20]
 8007884:	4b6b      	ldr	r3, [pc, #428]	; (8007a34 <LCD_Init+0x3c1c>)
 8007886:	2200      	movs	r2, #0
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	4b69      	ldr	r3, [pc, #420]	; (8007a30 <LCD_Init+0x3c18>)
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	615a      	str	r2, [r3, #20]
 8007890:	4b67      	ldr	r3, [pc, #412]	; (8007a30 <LCD_Init+0x3c18>)
 8007892:	2280      	movs	r2, #128	; 0x80
 8007894:	611a      	str	r2, [r3, #16]
 8007896:	4b66      	ldr	r3, [pc, #408]	; (8007a30 <LCD_Init+0x3c18>)
 8007898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800789e:	4b64      	ldr	r3, [pc, #400]	; (8007a30 <LCD_Init+0x3c18>)
 80078a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078a4:	611a      	str	r2, [r3, #16]
 80078a6:	4b62      	ldr	r3, [pc, #392]	; (8007a30 <LCD_Init+0x3c18>)
 80078a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ac:	615a      	str	r2, [r3, #20]
 80078ae:	4b61      	ldr	r3, [pc, #388]	; (8007a34 <LCD_Init+0x3c1c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	60da      	str	r2, [r3, #12]
 80078b4:	4b5e      	ldr	r3, [pc, #376]	; (8007a30 <LCD_Init+0x3c18>)
 80078b6:	2280      	movs	r2, #128	; 0x80
 80078b8:	615a      	str	r2, [r3, #20]
 80078ba:	4b5d      	ldr	r3, [pc, #372]	; (8007a30 <LCD_Init+0x3c18>)
 80078bc:	2280      	movs	r2, #128	; 0x80
 80078be:	611a      	str	r2, [r3, #16]
 80078c0:	4b5b      	ldr	r3, [pc, #364]	; (8007a30 <LCD_Init+0x3c18>)
 80078c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80078c8:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <LCD_Init+0x3c18>)
 80078ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078ce:	611a      	str	r2, [r3, #16]
 80078d0:	4b57      	ldr	r3, [pc, #348]	; (8007a30 <LCD_Init+0x3c18>)
 80078d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d6:	615a      	str	r2, [r3, #20]
 80078d8:	4b56      	ldr	r3, [pc, #344]	; (8007a34 <LCD_Init+0x3c1c>)
 80078da:	2200      	movs	r2, #0
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	4b54      	ldr	r3, [pc, #336]	; (8007a30 <LCD_Init+0x3c18>)
 80078e0:	2280      	movs	r2, #128	; 0x80
 80078e2:	615a      	str	r2, [r3, #20]
 80078e4:	4b52      	ldr	r3, [pc, #328]	; (8007a30 <LCD_Init+0x3c18>)
 80078e6:	2280      	movs	r2, #128	; 0x80
 80078e8:	611a      	str	r2, [r3, #16]
 80078ea:	4b51      	ldr	r3, [pc, #324]	; (8007a30 <LCD_Init+0x3c18>)
 80078ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80078f2:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <LCD_Init+0x3c18>)
 80078f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078f8:	611a      	str	r2, [r3, #16]
 80078fa:	4b4d      	ldr	r3, [pc, #308]	; (8007a30 <LCD_Init+0x3c18>)
 80078fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007900:	615a      	str	r2, [r3, #20]
 8007902:	4b4c      	ldr	r3, [pc, #304]	; (8007a34 <LCD_Init+0x3c1c>)
 8007904:	2200      	movs	r2, #0
 8007906:	60da      	str	r2, [r3, #12]
 8007908:	4b49      	ldr	r3, [pc, #292]	; (8007a30 <LCD_Init+0x3c18>)
 800790a:	2280      	movs	r2, #128	; 0x80
 800790c:	615a      	str	r2, [r3, #20]
 800790e:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <LCD_Init+0x3c18>)
 8007910:	2280      	movs	r2, #128	; 0x80
 8007912:	611a      	str	r2, [r3, #16]
 8007914:	4b46      	ldr	r3, [pc, #280]	; (8007a30 <LCD_Init+0x3c18>)
 8007916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 800791c:	20b6      	movs	r0, #182	; 0xb6
 800791e:	f7fa ff53 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8007922:	4b43      	ldr	r3, [pc, #268]	; (8007a30 <LCD_Init+0x3c18>)
 8007924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007928:	611a      	str	r2, [r3, #16]
 800792a:	4b41      	ldr	r3, [pc, #260]	; (8007a30 <LCD_Init+0x3c18>)
 800792c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007930:	615a      	str	r2, [r3, #20]
 8007932:	4b40      	ldr	r3, [pc, #256]	; (8007a34 <LCD_Init+0x3c1c>)
 8007934:	2202      	movs	r2, #2
 8007936:	60da      	str	r2, [r3, #12]
 8007938:	4b3d      	ldr	r3, [pc, #244]	; (8007a30 <LCD_Init+0x3c18>)
 800793a:	2280      	movs	r2, #128	; 0x80
 800793c:	615a      	str	r2, [r3, #20]
 800793e:	4b3c      	ldr	r3, [pc, #240]	; (8007a30 <LCD_Init+0x3c18>)
 8007940:	2280      	movs	r2, #128	; 0x80
 8007942:	611a      	str	r2, [r3, #16]
 8007944:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <LCD_Init+0x3c18>)
 8007946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800794a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800794c:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <LCD_Init+0x3c18>)
 800794e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007952:	611a      	str	r2, [r3, #16]
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <LCD_Init+0x3c18>)
 8007956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795a:	615a      	str	r2, [r3, #20]
 800795c:	4b35      	ldr	r3, [pc, #212]	; (8007a34 <LCD_Init+0x3c1c>)
 800795e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	4b32      	ldr	r3, [pc, #200]	; (8007a30 <LCD_Init+0x3c18>)
 8007966:	2280      	movs	r2, #128	; 0x80
 8007968:	615a      	str	r2, [r3, #20]
 800796a:	4b31      	ldr	r3, [pc, #196]	; (8007a30 <LCD_Init+0x3c18>)
 800796c:	2280      	movs	r2, #128	; 0x80
 800796e:	611a      	str	r2, [r3, #16]
 8007970:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <LCD_Init+0x3c18>)
 8007972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007976:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8007978:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <LCD_Init+0x3c18>)
 800797a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800797e:	611a      	str	r2, [r3, #16]
 8007980:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <LCD_Init+0x3c18>)
 8007982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007986:	615a      	str	r2, [r3, #20]
 8007988:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <LCD_Init+0x3c1c>)
 800798a:	2200      	movs	r2, #0
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	4b28      	ldr	r3, [pc, #160]	; (8007a30 <LCD_Init+0x3c18>)
 8007990:	2280      	movs	r2, #128	; 0x80
 8007992:	615a      	str	r2, [r3, #20]
 8007994:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <LCD_Init+0x3c18>)
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	611a      	str	r2, [r3, #16]
 800799a:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <LCD_Init+0x3c18>)
 800799c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80079a2:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <LCD_Init+0x3c18>)
 80079a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a8:	611a      	str	r2, [r3, #16]
 80079aa:	4b21      	ldr	r3, [pc, #132]	; (8007a30 <LCD_Init+0x3c18>)
 80079ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b0:	615a      	str	r2, [r3, #20]
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <LCD_Init+0x3c1c>)
 80079b4:	2217      	movs	r2, #23
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <LCD_Init+0x3c18>)
 80079ba:	2280      	movs	r2, #128	; 0x80
 80079bc:	615a      	str	r2, [r3, #20]
 80079be:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <LCD_Init+0x3c18>)
 80079c0:	2280      	movs	r2, #128	; 0x80
 80079c2:	611a      	str	r2, [r3, #16]
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <LCD_Init+0x3c18>)
 80079c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80079cc:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <LCD_Init+0x3c18>)
 80079ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079d2:	611a      	str	r2, [r3, #16]
 80079d4:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <LCD_Init+0x3c18>)
 80079d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079da:	615a      	str	r2, [r3, #20]
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <LCD_Init+0x3c1c>)
 80079de:	2215      	movs	r2, #21
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <LCD_Init+0x3c18>)
 80079e4:	2280      	movs	r2, #128	; 0x80
 80079e6:	615a      	str	r2, [r3, #20]
 80079e8:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <LCD_Init+0x3c18>)
 80079ea:	2280      	movs	r2, #128	; 0x80
 80079ec:	611a      	str	r2, [r3, #16]
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <LCD_Init+0x3c18>)
 80079f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <LCD_Init+0x3c18>)
 80079f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079fc:	611a      	str	r2, [r3, #16]
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <LCD_Init+0x3c18>)
 8007a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a04:	615a      	str	r2, [r3, #20]
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <LCD_Init+0x3c1c>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	60da      	str	r2, [r3, #12]
 8007a0c:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <LCD_Init+0x3c18>)
 8007a0e:	2280      	movs	r2, #128	; 0x80
 8007a10:	615a      	str	r2, [r3, #20]
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <LCD_Init+0x3c18>)
 8007a14:	2280      	movs	r2, #128	; 0x80
 8007a16:	611a      	str	r2, [r3, #16]
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <LCD_Init+0x3c18>)
 8007a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a1e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007a20:	4b03      	ldr	r3, [pc, #12]	; (8007a30 <LCD_Init+0x3c18>)
 8007a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a26:	611a      	str	r2, [r3, #16]
 8007a28:	4b01      	ldr	r3, [pc, #4]	; (8007a30 <LCD_Init+0x3c18>)
 8007a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a2e:	e003      	b.n	8007a38 <LCD_Init+0x3c20>
 8007a30:	40011000 	.word	0x40011000
 8007a34:	40010c00 	.word	0x40010c00
 8007a38:	615a      	str	r2, [r3, #20]
 8007a3a:	4b8b      	ldr	r3, [pc, #556]	; (8007c68 <LCD_Init+0x3e50>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	4b8a      	ldr	r3, [pc, #552]	; (8007c6c <LCD_Init+0x3e54>)
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	615a      	str	r2, [r3, #20]
 8007a46:	4b89      	ldr	r3, [pc, #548]	; (8007c6c <LCD_Init+0x3e54>)
 8007a48:	2280      	movs	r2, #128	; 0x80
 8007a4a:	611a      	str	r2, [r3, #16]
 8007a4c:	4b87      	ldr	r3, [pc, #540]	; (8007c6c <LCD_Init+0x3e54>)
 8007a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a52:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8007a54:	20f0      	movs	r0, #240	; 0xf0
 8007a56:	f7fa feb7 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8007a5a:	4b84      	ldr	r3, [pc, #528]	; (8007c6c <LCD_Init+0x3e54>)
 8007a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a60:	611a      	str	r2, [r3, #16]
 8007a62:	4b82      	ldr	r3, [pc, #520]	; (8007c6c <LCD_Init+0x3e54>)
 8007a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a68:	615a      	str	r2, [r3, #20]
 8007a6a:	4b7f      	ldr	r3, [pc, #508]	; (8007c68 <LCD_Init+0x3e50>)
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	4b7e      	ldr	r3, [pc, #504]	; (8007c6c <LCD_Init+0x3e54>)
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	615a      	str	r2, [r3, #20]
 8007a76:	4b7d      	ldr	r3, [pc, #500]	; (8007c6c <LCD_Init+0x3e54>)
 8007a78:	2280      	movs	r2, #128	; 0x80
 8007a7a:	611a      	str	r2, [r3, #16]
 8007a7c:	4b7b      	ldr	r3, [pc, #492]	; (8007c6c <LCD_Init+0x3e54>)
 8007a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a82:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8007a84:	2029      	movs	r0, #41	; 0x29
 8007a86:	f7fa fe9f 	bl	80027c8 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8007a8a:	20d0      	movs	r0, #208	; 0xd0
 8007a8c:	f7fa fe9c 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8007a90:	4b76      	ldr	r3, [pc, #472]	; (8007c6c <LCD_Init+0x3e54>)
 8007a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a96:	611a      	str	r2, [r3, #16]
 8007a98:	4b74      	ldr	r3, [pc, #464]	; (8007c6c <LCD_Init+0x3e54>)
 8007a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a9e:	615a      	str	r2, [r3, #20]
 8007aa0:	4b71      	ldr	r3, [pc, #452]	; (8007c68 <LCD_Init+0x3e50>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	60da      	str	r2, [r3, #12]
 8007aa6:	4b71      	ldr	r3, [pc, #452]	; (8007c6c <LCD_Init+0x3e54>)
 8007aa8:	2280      	movs	r2, #128	; 0x80
 8007aaa:	615a      	str	r2, [r3, #20]
 8007aac:	4b6f      	ldr	r3, [pc, #444]	; (8007c6c <LCD_Init+0x3e54>)
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	611a      	str	r2, [r3, #16]
 8007ab2:	4b6e      	ldr	r3, [pc, #440]	; (8007c6c <LCD_Init+0x3e54>)
 8007ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab8:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8007aba:	20be      	movs	r0, #190	; 0xbe
 8007abc:	f7fa fe84 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8007ac0:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <LCD_Init+0x3e54>)
 8007ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ac6:	611a      	str	r2, [r3, #16]
 8007ac8:	4b68      	ldr	r3, [pc, #416]	; (8007c6c <LCD_Init+0x3e54>)
 8007aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ace:	615a      	str	r2, [r3, #20]
 8007ad0:	4b65      	ldr	r3, [pc, #404]	; (8007c68 <LCD_Init+0x3e50>)
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	4b65      	ldr	r3, [pc, #404]	; (8007c6c <LCD_Init+0x3e54>)
 8007ad8:	2280      	movs	r2, #128	; 0x80
 8007ada:	615a      	str	r2, [r3, #20]
 8007adc:	4b63      	ldr	r3, [pc, #396]	; (8007c6c <LCD_Init+0x3e54>)
 8007ade:	2280      	movs	r2, #128	; 0x80
 8007ae0:	611a      	str	r2, [r3, #16]
 8007ae2:	4b62      	ldr	r3, [pc, #392]	; (8007c6c <LCD_Init+0x3e54>)
 8007ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8007aea:	4b60      	ldr	r3, [pc, #384]	; (8007c6c <LCD_Init+0x3e54>)
 8007aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007af0:	611a      	str	r2, [r3, #16]
 8007af2:	4b5e      	ldr	r3, [pc, #376]	; (8007c6c <LCD_Init+0x3e54>)
 8007af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af8:	615a      	str	r2, [r3, #20]
 8007afa:	4b5b      	ldr	r3, [pc, #364]	; (8007c68 <LCD_Init+0x3e50>)
 8007afc:	22fe      	movs	r2, #254	; 0xfe
 8007afe:	60da      	str	r2, [r3, #12]
 8007b00:	4b5a      	ldr	r3, [pc, #360]	; (8007c6c <LCD_Init+0x3e54>)
 8007b02:	2280      	movs	r2, #128	; 0x80
 8007b04:	615a      	str	r2, [r3, #20]
 8007b06:	4b59      	ldr	r3, [pc, #356]	; (8007c6c <LCD_Init+0x3e54>)
 8007b08:	2280      	movs	r2, #128	; 0x80
 8007b0a:	611a      	str	r2, [r3, #16]
 8007b0c:	4b57      	ldr	r3, [pc, #348]	; (8007c6c <LCD_Init+0x3e54>)
 8007b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b12:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8007b14:	4b55      	ldr	r3, [pc, #340]	; (8007c6c <LCD_Init+0x3e54>)
 8007b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b1a:	611a      	str	r2, [r3, #16]
 8007b1c:	4b53      	ldr	r3, [pc, #332]	; (8007c6c <LCD_Init+0x3e54>)
 8007b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b22:	615a      	str	r2, [r3, #20]
 8007b24:	4b50      	ldr	r3, [pc, #320]	; (8007c68 <LCD_Init+0x3e50>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	4b50      	ldr	r3, [pc, #320]	; (8007c6c <LCD_Init+0x3e54>)
 8007b2c:	2280      	movs	r2, #128	; 0x80
 8007b2e:	615a      	str	r2, [r3, #20]
 8007b30:	4b4e      	ldr	r3, [pc, #312]	; (8007c6c <LCD_Init+0x3e54>)
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	611a      	str	r2, [r3, #16]
 8007b36:	4b4d      	ldr	r3, [pc, #308]	; (8007c6c <LCD_Init+0x3e54>)
 8007b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8007b3e:	4b4b      	ldr	r3, [pc, #300]	; (8007c6c <LCD_Init+0x3e54>)
 8007b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b44:	611a      	str	r2, [r3, #16]
 8007b46:	4b49      	ldr	r3, [pc, #292]	; (8007c6c <LCD_Init+0x3e54>)
 8007b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b4c:	615a      	str	r2, [r3, #20]
 8007b4e:	4b46      	ldr	r3, [pc, #280]	; (8007c68 <LCD_Init+0x3e50>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	60da      	str	r2, [r3, #12]
 8007b54:	4b45      	ldr	r3, [pc, #276]	; (8007c6c <LCD_Init+0x3e54>)
 8007b56:	2280      	movs	r2, #128	; 0x80
 8007b58:	615a      	str	r2, [r3, #20]
 8007b5a:	4b44      	ldr	r3, [pc, #272]	; (8007c6c <LCD_Init+0x3e54>)
 8007b5c:	2280      	movs	r2, #128	; 0x80
 8007b5e:	611a      	str	r2, [r3, #16]
 8007b60:	4b42      	ldr	r3, [pc, #264]	; (8007c6c <LCD_Init+0x3e54>)
 8007b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8007b68:	4b40      	ldr	r3, [pc, #256]	; (8007c6c <LCD_Init+0x3e54>)
 8007b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b6e:	611a      	str	r2, [r3, #16]
 8007b70:	4b3e      	ldr	r3, [pc, #248]	; (8007c6c <LCD_Init+0x3e54>)
 8007b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b76:	615a      	str	r2, [r3, #20]
 8007b78:	4b3b      	ldr	r3, [pc, #236]	; (8007c68 <LCD_Init+0x3e50>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	4b3b      	ldr	r3, [pc, #236]	; (8007c6c <LCD_Init+0x3e54>)
 8007b80:	2280      	movs	r2, #128	; 0x80
 8007b82:	615a      	str	r2, [r3, #20]
 8007b84:	4b39      	ldr	r3, [pc, #228]	; (8007c6c <LCD_Init+0x3e54>)
 8007b86:	2280      	movs	r2, #128	; 0x80
 8007b88:	611a      	str	r2, [r3, #16]
 8007b8a:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <LCD_Init+0x3e54>)
 8007b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b90:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8007b92:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <LCD_Init+0x3e54>)
 8007b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	4b34      	ldr	r3, [pc, #208]	; (8007c6c <LCD_Init+0x3e54>)
 8007b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba0:	615a      	str	r2, [r3, #20]
 8007ba2:	4b31      	ldr	r3, [pc, #196]	; (8007c68 <LCD_Init+0x3e50>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	60da      	str	r2, [r3, #12]
 8007ba8:	4b30      	ldr	r3, [pc, #192]	; (8007c6c <LCD_Init+0x3e54>)
 8007baa:	2280      	movs	r2, #128	; 0x80
 8007bac:	615a      	str	r2, [r3, #20]
 8007bae:	4b2f      	ldr	r3, [pc, #188]	; (8007c6c <LCD_Init+0x3e54>)
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	611a      	str	r2, [r3, #16]
 8007bb4:	4b2d      	ldr	r3, [pc, #180]	; (8007c6c <LCD_Init+0x3e54>)
 8007bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8007bbc:	20b8      	movs	r0, #184	; 0xb8
 8007bbe:	f7fa fe03 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8007bc2:	4b2a      	ldr	r3, [pc, #168]	; (8007c6c <LCD_Init+0x3e54>)
 8007bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bc8:	611a      	str	r2, [r3, #16]
 8007bca:	4b28      	ldr	r3, [pc, #160]	; (8007c6c <LCD_Init+0x3e54>)
 8007bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd0:	615a      	str	r2, [r3, #20]
 8007bd2:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <LCD_Init+0x3e50>)
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <LCD_Init+0x3e54>)
 8007bda:	2280      	movs	r2, #128	; 0x80
 8007bdc:	615a      	str	r2, [r3, #20]
 8007bde:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <LCD_Init+0x3e54>)
 8007be0:	2280      	movs	r2, #128	; 0x80
 8007be2:	611a      	str	r2, [r3, #16]
 8007be4:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <LCD_Init+0x3e54>)
 8007be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8007bec:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <LCD_Init+0x3e54>)
 8007bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bf2:	611a      	str	r2, [r3, #16]
 8007bf4:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <LCD_Init+0x3e54>)
 8007bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfa:	615a      	str	r2, [r3, #20]
 8007bfc:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <LCD_Init+0x3e50>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	60da      	str	r2, [r3, #12]
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <LCD_Init+0x3e54>)
 8007c04:	2280      	movs	r2, #128	; 0x80
 8007c06:	615a      	str	r2, [r3, #20]
 8007c08:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <LCD_Init+0x3e54>)
 8007c0a:	2280      	movs	r2, #128	; 0x80
 8007c0c:	611a      	str	r2, [r3, #16]
 8007c0e:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <LCD_Init+0x3e54>)
 8007c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c14:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8007c16:	20ba      	movs	r0, #186	; 0xba
 8007c18:	f7fa fdd6 	bl	80027c8 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8007c1c:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <LCD_Init+0x3e54>)
 8007c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c22:	611a      	str	r2, [r3, #16]
 8007c24:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <LCD_Init+0x3e54>)
 8007c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c2a:	615a      	str	r2, [r3, #20]
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <LCD_Init+0x3e50>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	60da      	str	r2, [r3, #12]
 8007c32:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <LCD_Init+0x3e54>)
 8007c34:	2280      	movs	r2, #128	; 0x80
 8007c36:	615a      	str	r2, [r3, #20]
 8007c38:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <LCD_Init+0x3e54>)
 8007c3a:	2280      	movs	r2, #128	; 0x80
 8007c3c:	611a      	str	r2, [r3, #16]
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	; (8007c6c <LCD_Init+0x3e54>)
 8007c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c44:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8007c46:	2064      	movs	r0, #100	; 0x64
 8007c48:	f7fb ff36 	bl	8003ab8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	f7fb ffd7 	bl	8003c00 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <LCD_Init+0x3e58>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8007c58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007c5c:	f000 f80a 	bl	8007c74 <LCD_Clear>
}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40010c00 	.word	0x40010c00
 8007c6c:	40011000 	.word	0x40011000
 8007c70:	422201a8 	.word	0x422201a8

08007c74 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8007c82:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <LCD_Clear+0xb8>)
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8007c88:	4b28      	ldr	r3, [pc, #160]	; (8007d2c <LCD_Clear+0xb8>)
 8007c8a:	885b      	ldrh	r3, [r3, #2]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <LCD_Clear+0xb8>)
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	f646 0204 	movw	r2, #26628	; 0x6804
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d11a      	bne.n	8007cd8 <LCD_Clear+0x64>
 8007ca2:	4b22      	ldr	r3, [pc, #136]	; (8007d2c <LCD_Clear+0xb8>)
 8007ca4:	799b      	ldrb	r3, [r3, #6]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d116      	bne.n	8007cd8 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8007caa:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <LCD_Clear+0xb8>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007cb0:	4b1e      	ldr	r3, [pc, #120]	; (8007d2c <LCD_Clear+0xb8>)
 8007cb2:	222a      	movs	r2, #42	; 0x2a
 8007cb4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8007cb6:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <LCD_Clear+0xb8>)
 8007cb8:	222b      	movs	r2, #43	; 0x2b
 8007cba:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f7fa fe54 	bl	800296c <LCD_SetCursor>
		lcddev.dir = 1;
 8007cc4:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <LCD_Clear+0xb8>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007cca:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <LCD_Clear+0xb8>)
 8007ccc:	222b      	movs	r2, #43	; 0x2b
 8007cce:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <LCD_Clear+0xb8>)
 8007cd2:	222a      	movs	r2, #42	; 0x2a
 8007cd4:	819a      	strh	r2, [r3, #12]
 8007cd6:	e003      	b.n	8007ce0 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8007cd8:	2100      	movs	r1, #0
 8007cda:	2000      	movs	r0, #0
 8007cdc:	f7fa fe46 	bl	800296c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8007ce0:	f7fa fe38 	bl	8002954 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e017      	b.n	8007d1a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8007cea:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <LCD_Clear+0xbc>)
 8007cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cf0:	611a      	str	r2, [r3, #16]
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <LCD_Clear+0xbc>)
 8007cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf8:	615a      	str	r2, [r3, #20]
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	; (8007d34 <LCD_Clear+0xc0>)
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	60d3      	str	r3, [r2, #12]
 8007d00:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <LCD_Clear+0xbc>)
 8007d02:	2280      	movs	r2, #128	; 0x80
 8007d04:	615a      	str	r2, [r3, #20]
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <LCD_Clear+0xbc>)
 8007d08:	2280      	movs	r2, #128	; 0x80
 8007d0a:	611a      	str	r2, [r3, #16]
 8007d0c:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <LCD_Clear+0xbc>)
 8007d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d12:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d3e3      	bcc.n	8007cea <LCD_Clear+0x76>
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200000a0 	.word	0x200000a0
 8007d30:	40011000 	.word	0x40011000
 8007d34:	40010c00 	.word	0x40010c00

08007d38 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8007d38:	b590      	push	{r4, r7, lr}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4623      	mov	r3, r4
 8007d48:	80fb      	strh	r3, [r7, #6]
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	80bb      	strh	r3, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	807b      	strh	r3, [r7, #2]
 8007d52:	4613      	mov	r3, r2
 8007d54:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8007d5a:	4b3a      	ldr	r3, [pc, #232]	; (8007e44 <LCD_Fill+0x10c>)
 8007d5c:	889b      	ldrh	r3, [r3, #4]
 8007d5e:	f646 0204 	movw	r2, #26628	; 0x6804
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d133      	bne.n	8007dce <LCD_Fill+0x96>
 8007d66:	4b37      	ldr	r3, [pc, #220]	; (8007e44 <LCD_Fill+0x10c>)
 8007d68:	799b      	ldrb	r3, [r3, #6]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d12f      	bne.n	8007dce <LCD_Fill+0x96>
			{
		temp = sx;
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8007d72:	88bb      	ldrh	r3, [r7, #4]
 8007d74:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8007d76:	4b33      	ldr	r3, [pc, #204]	; (8007e44 <LCD_Fill+0x10c>)
 8007d78:	881a      	ldrh	r2, [r3, #0]
 8007d7a:	887b      	ldrh	r3, [r7, #2]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8007d84:	883b      	ldrh	r3, [r7, #0]
 8007d86:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8007d88:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <LCD_Fill+0x10c>)
 8007d8a:	881a      	ldrh	r2, [r3, #0]
 8007d8c:	893b      	ldrh	r3, [r7, #8]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8007d96:	4b2b      	ldr	r3, [pc, #172]	; (8007e44 <LCD_Fill+0x10c>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007d9c:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <LCD_Fill+0x10c>)
 8007d9e:	222a      	movs	r2, #42	; 0x2a
 8007da0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8007da2:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <LCD_Fill+0x10c>)
 8007da4:	222b      	movs	r2, #43	; 0x2b
 8007da6:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8007da8:	883c      	ldrh	r4, [r7, #0]
 8007daa:	887a      	ldrh	r2, [r7, #2]
 8007dac:	88b9      	ldrh	r1, [r7, #4]
 8007dae:	88f8      	ldrh	r0, [r7, #6]
 8007db0:	8c3b      	ldrh	r3, [r7, #32]
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	4623      	mov	r3, r4
 8007db6:	f7ff ffbf 	bl	8007d38 <LCD_Fill>
		lcddev.dir = 1;
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <LCD_Fill+0x10c>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007dc0:	4b20      	ldr	r3, [pc, #128]	; (8007e44 <LCD_Fill+0x10c>)
 8007dc2:	222b      	movs	r2, #43	; 0x2b
 8007dc4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <LCD_Fill+0x10c>)
 8007dc8:	222a      	movs	r2, #42	; 0x2a
 8007dca:	819a      	strh	r2, [r3, #12]
 8007dcc:	e036      	b.n	8007e3c <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8007dce:	887a      	ldrh	r2, [r7, #2]
 8007dd0:	88fb      	ldrh	r3, [r7, #6]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8007dda:	88bb      	ldrh	r3, [r7, #4]
 8007ddc:	81fb      	strh	r3, [r7, #14]
 8007dde:	e029      	b.n	8007e34 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8007de0:	89fa      	ldrh	r2, [r7, #14]
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fa fdc0 	bl	800296c <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8007dec:	f7fa fdb2 	bl	8002954 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8007df0:	2300      	movs	r3, #0
 8007df2:	81bb      	strh	r3, [r7, #12]
 8007df4:	e017      	b.n	8007e26 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <LCD_Fill+0x110>)
 8007df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dfc:	611a      	str	r2, [r3, #16]
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <LCD_Fill+0x110>)
 8007e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e04:	615a      	str	r2, [r3, #20]
 8007e06:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <LCD_Fill+0x114>)
 8007e08:	8c3b      	ldrh	r3, [r7, #32]
 8007e0a:	60d3      	str	r3, [r2, #12]
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <LCD_Fill+0x110>)
 8007e0e:	2280      	movs	r2, #128	; 0x80
 8007e10:	615a      	str	r2, [r3, #20]
 8007e12:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <LCD_Fill+0x110>)
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	611a      	str	r2, [r3, #16]
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <LCD_Fill+0x110>)
 8007e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1e:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8007e20:	89bb      	ldrh	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	81bb      	strh	r3, [r7, #12]
 8007e26:	89ba      	ldrh	r2, [r7, #12]
 8007e28:	897b      	ldrh	r3, [r7, #10]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d3e3      	bcc.n	8007df6 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8007e2e:	89fb      	ldrh	r3, [r7, #14]
 8007e30:	3301      	adds	r3, #1
 8007e32:	81fb      	strh	r3, [r7, #14]
 8007e34:	89fa      	ldrh	r2, [r7, #14]
 8007e36:	883b      	ldrh	r3, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d9d1      	bls.n	8007de0 <LCD_Fill+0xa8>
		}
	}
}
 8007e3c:	bf00      	nop
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd90      	pop	{r4, r7, pc}
 8007e44:	200000a0 	.word	0x200000a0
 8007e48:	40011000 	.word	0x40011000
 8007e4c:	40010c00 	.word	0x40010c00

08007e50 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8007e50:	b590      	push	{r4, r7, lr}
 8007e52:	b08d      	sub	sp, #52	; 0x34
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4623      	mov	r3, r4
 8007e60:	80fb      	strh	r3, [r7, #6]
 8007e62:	4603      	mov	r3, r0
 8007e64:	80bb      	strh	r3, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	807b      	strh	r3, [r7, #2]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e72:	2300      	movs	r3, #0
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8007e7e:	883a      	ldrh	r2, [r7, #0]
 8007e80:	88bb      	ldrh	r3, [r7, #4]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8007e8a:	88bb      	ldrh	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dd02      	ble.n	8007e9a <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e00b      	b.n	8007eb2 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e005      	b.n	8007eb2 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	425b      	negs	r3, r3
 8007eb0:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd02      	ble.n	8007ebe <LCD_DrawLine+0x6e>
		incy = 1;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	e00b      	b.n	8007ed6 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	e005      	b.n	8007ed6 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	425b      	negs	r3, r3
 8007ed4:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8007ed6:	6a3a      	ldr	r2, [r7, #32]
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	dd02      	ble.n	8007ee4 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	e001      	b.n	8007ee8 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8007ee8:	2300      	movs	r3, #0
 8007eea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007eec:	e02a      	b.n	8007f44 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	b292      	uxth	r2, r2
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fb fb15 	bl	8003528 <LCD_DrawPoint>
		xerr += delta_x;
 8007efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	4413      	add	r3, r2
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8007f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8007f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	dd07      	ble.n	8007f26 <LCD_DrawLine+0xd6>
			xerr -= distance;
 8007f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	4413      	add	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8007f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	dd07      	ble.n	8007f3e <LCD_DrawLine+0xee>
			yerr -= distance;
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8007f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f40:	3301      	adds	r3, #1
 8007f42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	ddcf      	ble.n	8007eee <LCD_DrawLine+0x9e>
		}
	}
}
 8007f4e:	bf00      	nop
 8007f50:	3734      	adds	r7, #52	; 0x34
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd90      	pop	{r4, r7, pc}

08007f56 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8007f56:	b590      	push	{r4, r7, lr}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	461a      	mov	r2, r3
 8007f64:	4623      	mov	r3, r4
 8007f66:	80fb      	strh	r3, [r7, #6]
 8007f68:	4603      	mov	r3, r0
 8007f6a:	80bb      	strh	r3, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	807b      	strh	r3, [r7, #2]
 8007f70:	4613      	mov	r3, r2
 8007f72:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 8007f74:	88bb      	ldrh	r3, [r7, #4]
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	88b9      	ldrh	r1, [r7, #4]
 8007f7a:	88f8      	ldrh	r0, [r7, #6]
 8007f7c:	f7ff ff68 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8007f80:	883b      	ldrh	r3, [r7, #0]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	88b9      	ldrh	r1, [r7, #4]
 8007f86:	88f8      	ldrh	r0, [r7, #6]
 8007f88:	f7ff ff62 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 8007f8c:	883b      	ldrh	r3, [r7, #0]
 8007f8e:	887a      	ldrh	r2, [r7, #2]
 8007f90:	8839      	ldrh	r1, [r7, #0]
 8007f92:	88f8      	ldrh	r0, [r7, #6]
 8007f94:	f7ff ff5c 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 8007f98:	883b      	ldrh	r3, [r7, #0]
 8007f9a:	887a      	ldrh	r2, [r7, #2]
 8007f9c:	88b9      	ldrh	r1, [r7, #4]
 8007f9e:	8878      	ldrh	r0, [r7, #2]
 8007fa0:	f7ff ff56 	bl	8007e50 <LCD_DrawLine>
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd90      	pop	{r4, r7, pc}

08007fac <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8007fac:	b590      	push	{r4, r7, lr}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4623      	mov	r3, r4
 8007fbc:	80fb      	strh	r3, [r7, #6]
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	80bb      	strh	r3, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8007fca:	88bb      	ldrh	r3, [r7, #4]
 8007fcc:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8007fce:	78bb      	ldrb	r3, [r7, #2]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	78bb      	ldrb	r3, [r7, #2]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	4413      	add	r3, r2
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	78ba      	ldrb	r2, [r7, #2]
 8007fee:	0852      	lsrs	r2, r2, #1
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	3b20      	subs	r3, #32
 8007ffc:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8007ffe:	2300      	movs	r3, #0
 8008000:	737b      	strb	r3, [r7, #13]
 8008002:	e069      	b.n	80080d8 <LCD_ShowChar+0x12c>
		if (size == 12)
 8008004:	78bb      	ldrb	r3, [r7, #2]
 8008006:	2b0c      	cmp	r3, #12
 8008008:	d10b      	bne.n	8008022 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	7b79      	ldrb	r1, [r7, #13]
 800800e:	4838      	ldr	r0, [pc, #224]	; (80080f0 <LCD_ShowChar+0x144>)
 8008010:	4613      	mov	r3, r2
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4403      	add	r3, r0
 800801a:	440b      	add	r3, r1
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	e019      	b.n	8008056 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8008022:	78bb      	ldrb	r3, [r7, #2]
 8008024:	2b10      	cmp	r3, #16
 8008026:	d108      	bne.n	800803a <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	7b7b      	ldrb	r3, [r7, #13]
 800802c:	4931      	ldr	r1, [pc, #196]	; (80080f4 <LCD_ShowChar+0x148>)
 800802e:	0112      	lsls	r2, r2, #4
 8008030:	440a      	add	r2, r1
 8008032:	4413      	add	r3, r2
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	73fb      	strb	r3, [r7, #15]
 8008038:	e00d      	b.n	8008056 <LCD_ShowChar+0xaa>
		else if (size == 24)
 800803a:	78bb      	ldrb	r3, [r7, #2]
 800803c:	2b18      	cmp	r3, #24
 800803e:	d150      	bne.n	80080e2 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	7b79      	ldrb	r1, [r7, #13]
 8008044:	482c      	ldr	r0, [pc, #176]	; (80080f8 <LCD_ShowChar+0x14c>)
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4403      	add	r3, r0
 8008050:	440b      	add	r3, r1
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8008056:	2300      	movs	r3, #0
 8008058:	73bb      	strb	r3, [r7, #14]
 800805a:	e035      	b.n	80080c8 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 800805c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da07      	bge.n	8008074 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8008064:	4b25      	ldr	r3, [pc, #148]	; (80080fc <LCD_ShowChar+0x150>)
 8008066:	881a      	ldrh	r2, [r3, #0]
 8008068:	88b9      	ldrh	r1, [r7, #4]
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	4618      	mov	r0, r3
 800806e:	f7fb fa8b 	bl	8003588 <LCD_Fast_DrawPoint>
 8008072:	e00a      	b.n	800808a <LCD_ShowChar+0xde>
			else if (mode == 0)
 8008074:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800807c:	4b20      	ldr	r3, [pc, #128]	; (8008100 <LCD_ShowChar+0x154>)
 800807e:	881a      	ldrh	r2, [r3, #0]
 8008080:	88b9      	ldrh	r1, [r7, #4]
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	4618      	mov	r0, r3
 8008086:	f7fb fa7f 	bl	8003588 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
			y++;
 8008090:	88bb      	ldrh	r3, [r7, #4]
 8008092:	3301      	adds	r3, #1
 8008094:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <LCD_ShowChar+0x158>)
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	88ba      	ldrh	r2, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d222      	bcs.n	80080e6 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 80080a0:	88ba      	ldrh	r2, [r7, #4]
 80080a2:	897b      	ldrh	r3, [r7, #10]
 80080a4:	1ad2      	subs	r2, r2, r3
 80080a6:	78bb      	ldrb	r3, [r7, #2]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d10a      	bne.n	80080c2 <LCD_ShowChar+0x116>
				y = y0;
 80080ac:	897b      	ldrh	r3, [r7, #10]
 80080ae:	80bb      	strh	r3, [r7, #4]
				x++;
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	3301      	adds	r3, #1
 80080b4:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <LCD_ShowChar+0x158>)
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d307      	bcc.n	80080d0 <LCD_ShowChar+0x124>
					return;	//超区域了
 80080c0:	e012      	b.n	80080e8 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	3301      	adds	r3, #1
 80080c6:	73bb      	strb	r3, [r7, #14]
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b07      	cmp	r3, #7
 80080cc:	d9c6      	bls.n	800805c <LCD_ShowChar+0xb0>
 80080ce:	e000      	b.n	80080d2 <LCD_ShowChar+0x126>
				break;
 80080d0:	bf00      	nop
	for (t = 0; t < csize; t++) {
 80080d2:	7b7b      	ldrb	r3, [r7, #13]
 80080d4:	3301      	adds	r3, #1
 80080d6:	737b      	strb	r3, [r7, #13]
 80080d8:	7b7a      	ldrb	r2, [r7, #13]
 80080da:	7a7b      	ldrb	r3, [r7, #9]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d391      	bcc.n	8008004 <LCD_ShowChar+0x58>
 80080e0:	e002      	b.n	80080e8 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 80080e2:	bf00      	nop
 80080e4:	e000      	b.n	80080e8 <LCD_ShowChar+0x13c>
				return;		//超区域了
 80080e6:	bf00      	nop
			}
		}
	}
}
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd90      	pop	{r4, r7, pc}
 80080ee:	bf00      	nop
 80080f0:	08009f78 	.word	0x08009f78
 80080f4:	0800a3ec 	.word	0x0800a3ec
 80080f8:	0800a9dc 	.word	0x0800a9dc
 80080fc:	2000008c 	.word	0x2000008c
 8008100:	20000006 	.word	0x20000006
 8008104:	200000a0 	.word	0x200000a0

08008108 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	460a      	mov	r2, r1
 8008112:	71fb      	strb	r3, [r7, #7]
 8008114:	4613      	mov	r3, r2
 8008116:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8008118:	2301      	movs	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
	while (n--)
 800811c:	e004      	b.n	8008128 <LCD_Pow+0x20>
		result *= m;
 800811e:	79fa      	ldrb	r2, [r7, #7]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	fb02 f303 	mul.w	r3, r2, r3
 8008126:	60fb      	str	r3, [r7, #12]
	while (n--)
 8008128:	79bb      	ldrb	r3, [r7, #6]
 800812a:	1e5a      	subs	r2, r3, #1
 800812c:	71ba      	strb	r2, [r7, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f5      	bne.n	800811e <LCD_Pow+0x16>
	return result;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
	...

08008140 <LCD_ShowxNum>:
//mode:
//[7]:0 without leading zeros; 1 with leading zeros.
//[6:1]: reserve
//[0]: similar as it in LCD_ShowChar, 0 for wipe away and 1 for opposite
void LCD_ShowxNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size, uint8_t mode) {
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af02      	add	r7, sp, #8
 8008146:	60ba      	str	r2, [r7, #8]
 8008148:	461a      	mov	r2, r3
 800814a:	4603      	mov	r3, r0
 800814c:	81fb      	strh	r3, [r7, #14]
 800814e:	460b      	mov	r3, r1
 8008150:	81bb      	strh	r3, [r7, #12]
 8008152:	4613      	mov	r3, r2
 8008154:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]
 800815e:	e07e      	b.n	800825e <LCD_ShowxNum+0x11e>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 8008160:	79fa      	ldrb	r2, [r7, #7]
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	b2db      	uxtb	r3, r3
 8008168:	3b01      	subs	r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	200a      	movs	r0, #10
 8008170:	f7ff ffca 	bl	8008108 <LCD_Pow>
 8008174:	4602      	mov	r2, r0
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	fbb3 f1f2 	udiv	r1, r3, r2
 800817c:	4b3c      	ldr	r3, [pc, #240]	; (8008270 <LCD_ShowxNum+0x130>)
 800817e:	fba3 2301 	umull	r2, r3, r3, r1
 8008182:	08da      	lsrs	r2, r3, #3
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	1aca      	subs	r2, r1, r3
 800818e:	4613      	mov	r3, r2
 8008190:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d143      	bne.n	8008220 <LCD_ShowxNum+0xe0>
 8008198:	7dfa      	ldrb	r2, [r7, #23]
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	3b01      	subs	r3, #1
 800819e:	429a      	cmp	r2, r3
 80081a0:	da3e      	bge.n	8008220 <LCD_ShowxNum+0xe0>
			if (temp == 0) {
 80081a2:	7d7b      	ldrb	r3, [r7, #21]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d139      	bne.n	800821c <LCD_ShowxNum+0xdc>
				if (mode & 0X80)
 80081a8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da1a      	bge.n	80081e6 <LCD_ShowxNum+0xa6>
					LCD_ShowChar(x + (size / 2) * t, y, '0', size, mode & 0X01);
 80081b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	7dfa      	ldrb	r2, [r7, #23]
 80081bc:	b292      	uxth	r2, r2
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	89fb      	ldrh	r3, [r7, #14]
 80081c6:	4413      	add	r3, r2
 80081c8:	b298      	uxth	r0, r3
 80081ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80081d8:	89b9      	ldrh	r1, [r7, #12]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	2230      	movs	r2, #48	; 0x30
 80081e0:	f7ff fee4 	bl	8007fac <LCD_ShowChar>
				else
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
				continue;
 80081e4:	e038      	b.n	8008258 <LCD_ShowxNum+0x118>
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
 80081e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	7dfa      	ldrb	r2, [r7, #23]
 80081f2:	b292      	uxth	r2, r2
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	89fb      	ldrh	r3, [r7, #14]
 80081fc:	4413      	add	r3, r2
 80081fe:	b298      	uxth	r0, r3
 8008200:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800820e:	89b9      	ldrh	r1, [r7, #12]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	2220      	movs	r2, #32
 8008216:	f7ff fec9 	bl	8007fac <LCD_ShowChar>
				continue;
 800821a:	e01d      	b.n	8008258 <LCD_ShowxNum+0x118>
			} else
				enshow = 1;
 800821c:	2301      	movs	r3, #1
 800821e:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, mode & 0X01);
 8008220:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	b29b      	uxth	r3, r3
 800822a:	7dfa      	ldrb	r2, [r7, #23]
 800822c:	b292      	uxth	r2, r2
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	b29a      	uxth	r2, r3
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	4413      	add	r3, r2
 8008238:	b298      	uxth	r0, r3
 800823a:	7d7b      	ldrb	r3, [r7, #21]
 800823c:	3330      	adds	r3, #48	; 0x30
 800823e:	b2da      	uxtb	r2, r3
 8008240:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800824e:	89b9      	ldrh	r1, [r7, #12]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	4623      	mov	r3, r4
 8008254:	f7ff feaa 	bl	8007fac <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	3301      	adds	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
 800825e:	7dfa      	ldrb	r2, [r7, #23]
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	429a      	cmp	r2, r3
 8008264:	f4ff af7c 	bcc.w	8008160 <LCD_ShowxNum+0x20>
	}
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	bd90      	pop	{r4, r7, pc}
 8008270:	cccccccd 	.word	0xcccccccd

08008274 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8008274:	b590      	push	{r4, r7, lr}
 8008276:	b087      	sub	sp, #28
 8008278:	af02      	add	r7, sp, #8
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	461a      	mov	r2, r3
 8008282:	4623      	mov	r3, r4
 8008284:	80fb      	strh	r3, [r7, #6]
 8008286:	4603      	mov	r3, r0
 8008288:	80bb      	strh	r3, [r7, #4]
 800828a:	460b      	mov	r3, r1
 800828c:	807b      	strh	r3, [r7, #2]
 800828e:	4613      	mov	r3, r2
 8008290:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	73fb      	strb	r3, [r7, #15]
	width += x;
 8008296:	887a      	ldrh	r2, [r7, #2]
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	4413      	add	r3, r2
 800829c:	807b      	strh	r3, [r7, #2]
	height += y;
 800829e:	883a      	ldrh	r2, [r7, #0]
 80082a0:	88bb      	ldrh	r3, [r7, #4]
 80082a2:	4413      	add	r3, r2
 80082a4:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80082a6:	e025      	b.n	80082f4 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80082a8:	88fa      	ldrh	r2, [r7, #6]
 80082aa:	887b      	ldrh	r3, [r7, #2]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d307      	bcc.n	80082c0 <LCD_ShowString+0x4c>
			x = x0;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	80fb      	strh	r3, [r7, #6]
			y += size;
 80082b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	88bb      	ldrh	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80082c0:	88ba      	ldrh	r2, [r7, #4]
 80082c2:	883b      	ldrh	r3, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d21e      	bcs.n	8008306 <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	781a      	ldrb	r2, [r3, #0]
 80082cc:	f897 4020 	ldrb.w	r4, [r7, #32]
 80082d0:	88b9      	ldrh	r1, [r7, #4]
 80082d2:	88f8      	ldrh	r0, [r7, #6]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	4623      	mov	r3, r4
 80082da:	f7ff fe67 	bl	8007fac <LCD_ShowChar>
		x += size / 2;
 80082de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	4413      	add	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
		p++;
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	3301      	adds	r3, #1
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b7e      	cmp	r3, #126	; 0x7e
 80082fa:	d805      	bhi.n	8008308 <LCD_ShowString+0x94>
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b1f      	cmp	r3, #31
 8008302:	d8d1      	bhi.n	80082a8 <LCD_ShowString+0x34>
	}
}
 8008304:	e000      	b.n	8008308 <LCD_ShowString+0x94>
			break;	//退出
 8008306:	bf00      	nop
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bd90      	pop	{r4, r7, pc}

08008310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008314:	f7f8 fb76 	bl	8000a04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008318:	f000 f92c 	bl	8008574 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	LCD_Init();
 800831c:	f7fb fd7c 	bl	8003e18 <LCD_Init>
	BACK_COLOR = WHITE;
 8008320:	4b8b      	ldr	r3, [pc, #556]	; (8008550 <main+0x240>)
 8008322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008326:	801a      	strh	r2, [r3, #0]
	POINT_COLOR = BLACK;  // black font colour
 8008328:	4b8a      	ldr	r3, [pc, #552]	; (8008554 <main+0x244>)
 800832a:	2200      	movs	r2, #0
 800832c:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);
 800832e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008332:	f7ff fc9f 	bl	8007c74 <LCD_Clear>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008336:	f7fa f9a5 	bl	8002684 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800833a:	f001 f887 	bl	800944c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	Welcome:

	LCD_Clear(WHITE);
 800833e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008342:	f7ff fc97 	bl	8007c74 <LCD_Clear>

	// Firstly DOWN two LED lights
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8008346:	2201      	movs	r2, #1
 8008348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800834c:	4882      	ldr	r0, [pc, #520]	; (8008558 <main+0x248>)
 800834e:	f7f8 ff74 	bl	800123a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008352:	2201      	movs	r2, #1
 8008354:	2104      	movs	r1, #4
 8008356:	4881      	ldr	r0, [pc, #516]	; (800855c <main+0x24c>)
 8008358:	f7f8 ff6f 	bl	800123a <HAL_GPIO_WritePin>

	draw_start_page();  // Draw welcome stage
 800835c:	f7f9 ff3a 	bl	80021d4 <draw_start_page>
	init_interface_info();  // initialize game data
 8008360:	f000 f94e 	bl	8008600 <init_interface_info>

	// Light UP LED0 (red)
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800836a:	487b      	ldr	r0, [pc, #492]	; (8008558 <main+0x248>)
 800836c:	f7f8 ff65 	bl	800123a <HAL_GPIO_WritePin>
	skip_via_KEY0();
 8008370:	f000 ff72 	bl	8009258 <skip_via_KEY0>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8008374:	2201      	movs	r2, #1
 8008376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800837a:	4877      	ldr	r0, [pc, #476]	; (8008558 <main+0x248>)
 800837c:	f7f8 ff5d 	bl	800123a <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8008380:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008384:	f7ff fc76 	bl	8007c74 <LCD_Clear>

	draw_stage_init(1);
 8008388:	2001      	movs	r0, #1
 800838a:	f7f9 ff83 	bl	8002294 <draw_stage_init>
	HAL_Delay(3000);
 800838e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008392:	f7f8 fb99 	bl	8000ac8 <HAL_Delay>
	LCD_Clear(WHITE);
 8008396:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800839a:	f7ff fc6b 	bl	8007c74 <LCD_Clear>

	init_play_interface();  // Draw main game stage
 800839e:	f7f9 ff4f 	bl	8002240 <init_play_interface>
	draw_all_through_struct();  //惰性渲染相关的东西
 80083a2:	f000 f993 	bl	80086cc <draw_all_through_struct>
	HAL_Delay(1000);
 80083a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083aa:	f7f8 fb8d 	bl	8000ac8 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		// Exit loop if all lives lost
		if (data.life == 0)
 80083ae:	4b6c      	ldr	r3, [pc, #432]	; (8008560 <main+0x250>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80ab 	beq.w	800850e <main+0x1fe>
			break;

		if (data.score == STG3_SCORE) {
 80083b8:	4b69      	ldr	r3, [pc, #420]	; (8008560 <main+0x250>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b32      	cmp	r3, #50	; 0x32
 80083be:	d103      	bne.n	80083c8 <main+0xb8>
			data.pass = 1;
 80083c0:	4b67      	ldr	r3, [pc, #412]	; (8008560 <main+0x250>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	611a      	str	r2, [r3, #16]
			break;
 80083c6:	e0a3      	b.n	8008510 <main+0x200>
		}

		// Stage switch
		if ((data.score == STG1_SCORE || data.score == STG2_SCORE)
 80083c8:	4b65      	ldr	r3, [pc, #404]	; (8008560 <main+0x250>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b0a      	cmp	r3, #10
 80083ce:	d003      	beq.n	80083d8 <main+0xc8>
 80083d0:	4b63      	ldr	r3, [pc, #396]	; (8008560 <main+0x250>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b1e      	cmp	r3, #30
 80083d6:	d168      	bne.n	80084aa <main+0x19a>
				&& data.clear == 0) {
 80083d8:	4b61      	ldr	r3, [pc, #388]	; (8008560 <main+0x250>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d164      	bne.n	80084aa <main+0x19a>
			data.level++;
 80083e0:	4b5f      	ldr	r3, [pc, #380]	; (8008560 <main+0x250>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	3301      	adds	r3, #1
 80083e6:	4a5e      	ldr	r2, [pc, #376]	; (8008560 <main+0x250>)
 80083e8:	6093      	str	r3, [r2, #8]

			clear_all_enemy_plane(data.self_plane, data.enemy_planes);
 80083ea:	495e      	ldr	r1, [pc, #376]	; (8008564 <main+0x254>)
 80083ec:	485e      	ldr	r0, [pc, #376]	; (8008568 <main+0x258>)
 80083ee:	f000 fea5 	bl	800913c <clear_all_enemy_plane>

			data.clear = 1;
 80083f2:	4b5b      	ldr	r3, [pc, #364]	; (8008560 <main+0x250>)
 80083f4:	2201      	movs	r2, #1
 80083f6:	60da      	str	r2, [r3, #12]
			data.self_plane[0] = 120;
 80083f8:	4b59      	ldr	r3, [pc, #356]	; (8008560 <main+0x250>)
 80083fa:	2278      	movs	r2, #120	; 0x78
 80083fc:	619a      	str	r2, [r3, #24]
			data.self_plane[1] = 290;
 80083fe:	4b58      	ldr	r3, [pc, #352]	; (8008560 <main+0x250>)
 8008400:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008404:	61da      	str	r2, [r3, #28]
			if (data.score == STG1_SCORE) {
 8008406:	4b56      	ldr	r3, [pc, #344]	; (8008560 <main+0x250>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b0a      	cmp	r3, #10
 800840c:	d124      	bne.n	8008458 <main+0x148>
				draw_stage_clear(1);
 800840e:	2001      	movs	r0, #1
 8008410:	f7f9 ff80 	bl	8002314 <draw_stage_clear>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008414:	2200      	movs	r2, #0
 8008416:	2104      	movs	r1, #4
 8008418:	4850      	ldr	r0, [pc, #320]	; (800855c <main+0x24c>)
 800841a:	f7f8 ff0e 	bl	800123a <HAL_GPIO_WritePin>
				skip_via_KEY0();
 800841e:	f000 ff1b 	bl	8009258 <skip_via_KEY0>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008422:	2201      	movs	r2, #1
 8008424:	2104      	movs	r1, #4
 8008426:	484d      	ldr	r0, [pc, #308]	; (800855c <main+0x24c>)
 8008428:	f7f8 ff07 	bl	800123a <HAL_GPIO_WritePin>
				draw_stage_init(2);
 800842c:	2002      	movs	r0, #2
 800842e:	f7f9 ff31 	bl	8002294 <draw_stage_init>
				HAL_Delay(3000);
 8008432:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008436:	f7f8 fb47 	bl	8000ac8 <HAL_Delay>
				LCD_Clear(WHITE);
 800843a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800843e:	f7ff fc19 	bl	8007c74 <LCD_Clear>
				init_play_interface();
 8008442:	f7f9 fefd 	bl	8002240 <init_play_interface>
				draw_all_through_struct();
 8008446:	f000 f941 	bl	80086cc <draw_all_through_struct>
				data.speed = 8;
 800844a:	4b45      	ldr	r3, [pc, #276]	; (8008560 <main+0x250>)
 800844c:	2208      	movs	r2, #8
 800844e:	615a      	str	r2, [r3, #20]
				HAL_Delay(1000);
 8008450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008454:	f7f8 fb38 	bl	8000ac8 <HAL_Delay>

			}
			if (data.score == STG2_SCORE) {
 8008458:	4b41      	ldr	r3, [pc, #260]	; (8008560 <main+0x250>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b1e      	cmp	r3, #30
 800845e:	d124      	bne.n	80084aa <main+0x19a>
				draw_stage_clear(2);
 8008460:	2002      	movs	r0, #2
 8008462:	f7f9 ff57 	bl	8002314 <draw_stage_clear>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008466:	2200      	movs	r2, #0
 8008468:	2104      	movs	r1, #4
 800846a:	483c      	ldr	r0, [pc, #240]	; (800855c <main+0x24c>)
 800846c:	f7f8 fee5 	bl	800123a <HAL_GPIO_WritePin>
				skip_via_KEY0();
 8008470:	f000 fef2 	bl	8009258 <skip_via_KEY0>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008474:	2201      	movs	r2, #1
 8008476:	2104      	movs	r1, #4
 8008478:	4838      	ldr	r0, [pc, #224]	; (800855c <main+0x24c>)
 800847a:	f7f8 fede 	bl	800123a <HAL_GPIO_WritePin>
				draw_stage_init(3);
 800847e:	2003      	movs	r0, #3
 8008480:	f7f9 ff08 	bl	8002294 <draw_stage_init>
				HAL_Delay(3000);
 8008484:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008488:	f7f8 fb1e 	bl	8000ac8 <HAL_Delay>
				LCD_Clear(WHITE);
 800848c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008490:	f7ff fbf0 	bl	8007c74 <LCD_Clear>
				init_play_interface();
 8008494:	f7f9 fed4 	bl	8002240 <init_play_interface>
				draw_all_through_struct();
 8008498:	f000 f918 	bl	80086cc <draw_all_through_struct>
				data.speed = 1;
 800849c:	4b30      	ldr	r3, [pc, #192]	; (8008560 <main+0x250>)
 800849e:	2201      	movs	r2, #1
 80084a0:	615a      	str	r2, [r3, #20]
				HAL_Delay(1000);
 80084a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084a6:	f7f8 fb0f 	bl	8000ac8 <HAL_Delay>

			}
		}

		if (data.score != STG1_SCORE && data.score != STG2_SCORE
 80084aa:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <main+0x250>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b0a      	cmp	r3, #10
 80084b0:	d00a      	beq.n	80084c8 <main+0x1b8>
 80084b2:	4b2b      	ldr	r3, [pc, #172]	; (8008560 <main+0x250>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b1e      	cmp	r3, #30
 80084b8:	d006      	beq.n	80084c8 <main+0x1b8>
				&& data.clear == 1) {
 80084ba:	4b29      	ldr	r3, [pc, #164]	; (8008560 <main+0x250>)
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d102      	bne.n	80084c8 <main+0x1b8>
			data.clear = 0;
 80084c2:	4b27      	ldr	r3, [pc, #156]	; (8008560 <main+0x250>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	60da      	str	r2, [r3, #12]
		}

		move_selfPlane(data.self_plane, data.self_buttles);
 80084c8:	4928      	ldr	r1, [pc, #160]	; (800856c <main+0x25c>)
 80084ca:	4827      	ldr	r0, [pc, #156]	; (8008568 <main+0x258>)
 80084cc:	f000 fb52 	bl	8008b74 <move_selfPlane>
		update_SelfButtles(data.self_buttles);
 80084d0:	4826      	ldr	r0, [pc, #152]	; (800856c <main+0x25c>)
 80084d2:	f000 fbe3 	bl	8008c9c <update_SelfButtles>

		update_enemy_planes(data.enemy_planes);
 80084d6:	4823      	ldr	r0, [pc, #140]	; (8008564 <main+0x254>)
 80084d8:	f000 fc42 	bl	8008d60 <update_enemy_planes>
		generate_enemy_planes(data.level, data.enemy_planes);
 80084dc:	4b20      	ldr	r3, [pc, #128]	; (8008560 <main+0x250>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4920      	ldr	r1, [pc, #128]	; (8008564 <main+0x254>)
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fade 	bl	8008aa4 <generate_enemy_planes>
		check_self_plane_to_enemy_plane_collide(&(data.score), &(data.life),
 80084e8:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <main+0x254>)
 80084ea:	4a1f      	ldr	r2, [pc, #124]	; (8008568 <main+0x258>)
 80084ec:	4920      	ldr	r1, [pc, #128]	; (8008570 <main+0x260>)
 80084ee:	481c      	ldr	r0, [pc, #112]	; (8008560 <main+0x250>)
 80084f0:	f000 fc9a 	bl	8008e28 <check_self_plane_to_enemy_plane_collide>
				data.self_plane, data.enemy_planes);
		check_self_buttles_to_enemy_plane_collide(&(data.score),
 80084f4:	4a1b      	ldr	r2, [pc, #108]	; (8008564 <main+0x254>)
 80084f6:	491d      	ldr	r1, [pc, #116]	; (800856c <main+0x25c>)
 80084f8:	4819      	ldr	r0, [pc, #100]	; (8008560 <main+0x250>)
 80084fa:	f000 fd5f 	bl	8008fbc <check_self_buttles_to_enemy_plane_collide>
				data.self_buttles, data.enemy_planes);

		draw_all_through_struct();
 80084fe:	f000 f8e5 	bl	80086cc <draw_all_through_struct>

		HAL_Delay(data.speed);
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <main+0x250>)
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	4618      	mov	r0, r3
 8008508:	f7f8 fade 	bl	8000ac8 <HAL_Delay>
		if (data.life == 0)
 800850c:	e74f      	b.n	80083ae <main+0x9e>
			break;
 800850e:	bf00      	nop
	}

	if (data.pass == 0)
 8008510:	4b13      	ldr	r3, [pc, #76]	; (8008560 <main+0x250>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <main+0x214>
		draw_failed(data.score);
 8008518:	4b11      	ldr	r3, [pc, #68]	; (8008560 <main+0x250>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f7f9 ff45 	bl	80023ac <draw_failed>
 8008522:	e005      	b.n	8008530 <main+0x220>
	else if (data.pass == 1)
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <main+0x250>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <main+0x220>
		draw_cleared();
 800852c:	f7f9 ff96 	bl	800245c <draw_cleared>

	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8008530:	2200      	movs	r2, #0
 8008532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008536:	4808      	ldr	r0, [pc, #32]	; (8008558 <main+0x248>)
 8008538:	f7f8 fe7f 	bl	800123a <HAL_GPIO_WritePin>
	skip_via_KEY0();
 800853c:	f000 fe8c 	bl	8009258 <skip_via_KEY0>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8008540:	2201      	movs	r2, #1
 8008542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008546:	4804      	ldr	r0, [pc, #16]	; (8008558 <main+0x248>)
 8008548:	f7f8 fe77 	bl	800123a <HAL_GPIO_WritePin>

	/* USER CODE BEGIN 3 */
	goto Welcome;
 800854c:	e6f7      	b.n	800833e <main+0x2e>
 800854e:	bf00      	nop
 8008550:	20000006 	.word	0x20000006
 8008554:	2000008c 	.word	0x2000008c
 8008558:	40010800 	.word	0x40010800
 800855c:	40011400 	.word	0x40011400
 8008560:	200000b0 	.word	0x200000b0
 8008564:	200003f0 	.word	0x200003f0
 8008568:	200000c8 	.word	0x200000c8
 800856c:	200000d0 	.word	0x200000d0
 8008570:	200000b4 	.word	0x200000b4

08008574 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008574:	b580      	push	{r7, lr}
 8008576:	b090      	sub	sp, #64	; 0x40
 8008578:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800857a:	f107 0318 	add.w	r3, r7, #24
 800857e:	2228      	movs	r2, #40	; 0x28
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f001 f830 	bl	80095e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	605a      	str	r2, [r3, #4]
 8008590:	609a      	str	r2, [r3, #8]
 8008592:	60da      	str	r2, [r3, #12]
 8008594:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008596:	2301      	movs	r3, #1
 8008598:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800859a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800859e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80085a0:	2300      	movs	r3, #0
 80085a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085a4:	2301      	movs	r3, #1
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085a8:	2302      	movs	r3, #2
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085b0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80085b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80085b8:	f107 0318 	add.w	r3, r7, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f7f8 fe8f 	bl	80012e0 <HAL_RCC_OscConfig>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <SystemClock_Config+0x58>
		Error_Handler();
 80085c8:	f000 f89c 	bl	8008704 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80085cc:	230f      	movs	r3, #15
 80085ce:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085d0:	2302      	movs	r3, #2
 80085d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80085e2:	1d3b      	adds	r3, r7, #4
 80085e4:	2102      	movs	r1, #2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7f9 f8fa 	bl	80017e0 <HAL_RCC_ClockConfig>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <SystemClock_Config+0x82>
		Error_Handler();
 80085f2:	f000 f887 	bl	8008704 <Error_Handler>
	}
}
 80085f6:	bf00      	nop
 80085f8:	3740      	adds	r7, #64	; 0x40
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <init_interface_info>:

/* USER CODE BEGIN 4 */

void init_interface_info(void) {
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
	int i;

	data.score = 0;
 8008606:	4b30      	ldr	r3, [pc, #192]	; (80086c8 <init_interface_info+0xc8>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
	data.life = 3;
 800860c:	4b2e      	ldr	r3, [pc, #184]	; (80086c8 <init_interface_info+0xc8>)
 800860e:	2203      	movs	r2, #3
 8008610:	605a      	str	r2, [r3, #4]
	data.level = 1;
 8008612:	4b2d      	ldr	r3, [pc, #180]	; (80086c8 <init_interface_info+0xc8>)
 8008614:	2201      	movs	r2, #1
 8008616:	609a      	str	r2, [r3, #8]
	data.clear = 0;
 8008618:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <init_interface_info+0xc8>)
 800861a:	2200      	movs	r2, #0
 800861c:	60da      	str	r2, [r3, #12]
	data.pass = 0;
 800861e:	4b2a      	ldr	r3, [pc, #168]	; (80086c8 <init_interface_info+0xc8>)
 8008620:	2200      	movs	r2, #0
 8008622:	611a      	str	r2, [r3, #16]
	data.speed = 20;
 8008624:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <init_interface_info+0xc8>)
 8008626:	2214      	movs	r2, #20
 8008628:	615a      	str	r2, [r3, #20]

	data.self_plane[0] = 120;
 800862a:	4b27      	ldr	r3, [pc, #156]	; (80086c8 <init_interface_info+0xc8>)
 800862c:	2278      	movs	r2, #120	; 0x78
 800862e:	619a      	str	r2, [r3, #24]
	data.self_plane[1] = 290;
 8008630:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <init_interface_info+0xc8>)
 8008632:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008636:	61da      	str	r2, [r3, #28]

	for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8008638:	2300      	movs	r3, #0
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	e00e      	b.n	800865c <init_interface_info+0x5c>
		data.self_buttles[i][0] = 0;
 800863e:	4a22      	ldr	r2, [pc, #136]	; (80086c8 <init_interface_info+0xc8>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3304      	adds	r3, #4
 8008644:	2100      	movs	r1, #0
 8008646:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		data.self_buttles[i][1] = 0;
 800864a:	4a1f      	ldr	r2, [pc, #124]	; (80086c8 <init_interface_info+0xc8>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	2200      	movs	r2, #0
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
	for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3301      	adds	r3, #1
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b63      	cmp	r3, #99	; 0x63
 8008660:	dded      	ble.n	800863e <init_interface_info+0x3e>
	}

	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008662:	2300      	movs	r3, #0
 8008664:	607b      	str	r3, [r7, #4]
 8008666:	e00f      	b.n	8008688 <init_interface_info+0x88>
		data.enemy_planes[i][0] = 0;
 8008668:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <init_interface_info+0xc8>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3368      	adds	r3, #104	; 0x68
 800866e:	2100      	movs	r1, #0
 8008670:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		data.enemy_planes[i][1] = 0;
 8008674:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <init_interface_info+0xc8>)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	4413      	add	r3, r2
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3301      	adds	r3, #1
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b09      	cmp	r3, #9
 800868c:	ddec      	ble.n	8008668 <init_interface_info+0x68>
	}

	for (i = 0; i < ENEMY_BUTTLE_MAX; i++) {
 800868e:	2300      	movs	r3, #0
 8008690:	607b      	str	r3, [r7, #4]
 8008692:	e00f      	b.n	80086b4 <init_interface_info+0xb4>
		data.enemy_buttles[i][0] = 0;
 8008694:	4a0c      	ldr	r2, [pc, #48]	; (80086c8 <init_interface_info+0xc8>)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3372      	adds	r3, #114	; 0x72
 800869a:	2100      	movs	r1, #0
 800869c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		data.enemy_buttles[i][1] = 0;
 80086a0:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <init_interface_info+0xc8>)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	4413      	add	r3, r2
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	for (i = 0; i < ENEMY_BUTTLE_MAX; i++) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3301      	adds	r3, #1
 80086b2:	607b      	str	r3, [r7, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80086ba:	dbeb      	blt.n	8008694 <init_interface_info+0x94>
	}
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	200000b0 	.word	0x200000b0

080086cc <draw_all_through_struct>:

void draw_all_through_struct(void) {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af02      	add	r7, sp, #8
	draw_play_all(data.score, data.life, data.self_plane, data.self_buttles,
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <draw_all_through_struct+0x24>)
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <draw_all_through_struct+0x24>)
 80086d8:	6859      	ldr	r1, [r3, #4]
 80086da:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <draw_all_through_struct+0x28>)
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <draw_all_through_struct+0x2c>)
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4b06      	ldr	r3, [pc, #24]	; (80086fc <draw_all_through_struct+0x30>)
 80086e4:	4a06      	ldr	r2, [pc, #24]	; (8008700 <draw_all_through_struct+0x34>)
 80086e6:	f7f9 ffab 	bl	8002640 <draw_play_all>
			data.enemy_planes, data.enemy_buttles);
}
 80086ea:	bf00      	nop
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200000b0 	.word	0x200000b0
 80086f4:	20000440 	.word	0x20000440
 80086f8:	200003f0 	.word	0x200003f0
 80086fc:	200000d0 	.word	0x200000d0
 8008700:	200000c8 	.word	0x200000c8

08008704 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <Element_DrawForwardTrigon>:
#include <pattern.h>

// Isosceles triangle with given central position, width and height
void Element_DrawForwardTrigon(int x, int y, int width, int height) {
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	x1 = x - width / 2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	0fda      	lsrs	r2, r3, #31
 8008722:	4413      	add	r3, r2
 8008724:	105b      	asrs	r3, r3, #1
 8008726:	425b      	negs	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	623b      	str	r3, [r7, #32]
	x2 = x;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	61fb      	str	r3, [r7, #28]
	y2 = y - height;
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	61bb      	str	r3, [r7, #24]
	x3 = x + width / 2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	0fda      	lsrs	r2, r3, #31
 8008744:	4413      	add	r3, r2
 8008746:	105b      	asrs	r3, r3, #1
 8008748:	461a      	mov	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	617b      	str	r3, [r7, #20]
	y3 = y;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	613b      	str	r3, [r7, #16]

	LCD_DrawLine(x1, y1, x2, y2);
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	b298      	uxth	r0, r3
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	b299      	uxth	r1, r3
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	b29a      	uxth	r2, r3
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f7ff fb74 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x3, y3);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	b298      	uxth	r0, r3
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	b299      	uxth	r1, r3
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	b29a      	uxth	r2, r3
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	b29b      	uxth	r3, r3
 8008778:	f7ff fb6a 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x2, y2, x3, y3);
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	b298      	uxth	r0, r3
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	b299      	uxth	r1, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	b29a      	uxth	r2, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	b29b      	uxth	r3, r3
 800878c:	f7ff fb60 	bl	8007e50 <LCD_DrawLine>
}
 8008790:	bf00      	nop
 8008792:	3728      	adds	r7, #40	; 0x28
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <Element_DrawReverseTrigon>:

void Element_DrawReverseTrigon(int x, int y, int width, int height) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	x1 = x - width / 2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	0fda      	lsrs	r2, r3, #31
 80087aa:	4413      	add	r3, r2
 80087ac:	105b      	asrs	r3, r3, #1
 80087ae:	425b      	negs	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	623b      	str	r3, [r7, #32]
	x2 = x;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	61fb      	str	r3, [r7, #28]
	y2 = y + height;
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	61bb      	str	r3, [r7, #24]
	x3 = x + width / 2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	0fda      	lsrs	r2, r3, #31
 80087cc:	4413      	add	r3, r2
 80087ce:	105b      	asrs	r3, r3, #1
 80087d0:	461a      	mov	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4413      	add	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
	y3 = y;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	613b      	str	r3, [r7, #16]

	LCD_DrawLine(x1, y1, x2, y2);
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	b298      	uxth	r0, r3
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	b299      	uxth	r1, r3
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f7ff fb30 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x3, y3);
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	b298      	uxth	r0, r3
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	b299      	uxth	r1, r3
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f7ff fb26 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x2, y2, x3, y3);
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	b298      	uxth	r0, r3
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	b299      	uxth	r1, r3
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	b29a      	uxth	r2, r3
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f7ff fb1c 	bl	8007e50 <LCD_DrawLine>
}
 8008818:	bf00      	nop
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <Element_DrawSelfPlane>:

void Element_DrawSelfPlane(int x, int y) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	Element_DrawForwardTrigon(x, y + 15, BIG_TRIGON_WIDTH, BIG_TRIGON_HEIGHT);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	f103 010f 	add.w	r1, r3, #15
 8008830:	2323      	movs	r3, #35	; 0x23
 8008832:	2215      	movs	r2, #21
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff ff6b 	bl	8008710 <Element_DrawForwardTrigon>
	Element_DrawForwardTrigon(x, y + 20, SMALL_TRIGON_WIDTH,
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f103 0114 	add.w	r1, r3, #20
 8008840:	230b      	movs	r3, #11
 8008842:	220b      	movs	r2, #11
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff ff63 	bl	8008710 <Element_DrawForwardTrigon>
	SMALL_TRIGON_HEIGHT);
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <Element_DrawEnemyPlane>:

void Element_DrawEnemyPlane(int x, int y) {
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
	Element_DrawReverseTrigon(x, y - 15, BIG_TRIGON_WIDTH, BIG_TRIGON_HEIGHT);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f1a3 010f 	sub.w	r1, r3, #15
 8008862:	2323      	movs	r3, #35	; 0x23
 8008864:	2215      	movs	r2, #21
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff ff96 	bl	8008798 <Element_DrawReverseTrigon>
	Element_DrawReverseTrigon(x, y - 20, SMALL_TRIGON_WIDTH,
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f1a3 0114 	sub.w	r1, r3, #20
 8008872:	230b      	movs	r3, #11
 8008874:	220b      	movs	r2, #11
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff ff8e 	bl	8008798 <Element_DrawReverseTrigon>
	SMALL_TRIGON_HEIGHT);
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <Element_DrawSelfBullet>:

void Element_DrawSelfBullet(int x, int y) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
	LCD_DrawPoint(x, y - 1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	b29a      	uxth	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29b      	uxth	r3, r3
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f7fa fe43 	bl	8003528 <LCD_DrawPoint>

	LCD_DrawPoint(x - 1, y);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	b292      	uxth	r2, r2
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fa fe39 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x, y);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	b292      	uxth	r2, r2
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fa fe31 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3301      	adds	r3, #1
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	b292      	uxth	r2, r2
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fa fe27 	bl	8003528 <LCD_DrawPoint>

	LCD_DrawPoint(x - 1, y + 1);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3301      	adds	r3, #1
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fa fe1b 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x, y + 1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3301      	adds	r3, #1
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7fa fe11 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y + 1);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	b29b      	uxth	r3, r3
 800890a:	3301      	adds	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	b29b      	uxth	r3, r3
 8008912:	3301      	adds	r3, #1
 8008914:	b29b      	uxth	r3, r3
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f7fa fe05 	bl	8003528 <LCD_DrawPoint>
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <Element_DrawEnemyBullet>:

void Element_DrawEnemyBullet(int x, int y) {
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
	LCD_DrawPoint(x - 1, y - 1);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29b      	uxth	r3, r3
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fa fdf0 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x, y - 1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	b29a      	uxth	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	3b01      	subs	r3, #1
 8008952:	b29b      	uxth	r3, r3
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f7fa fde6 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y - 1);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	b29b      	uxth	r3, r3
 8008960:	3301      	adds	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b29b      	uxth	r3, r3
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f7fa fdda 	bl	8003528 <LCD_DrawPoint>

	LCD_DrawPoint(x - 1, y);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29b      	uxth	r3, r3
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	b292      	uxth	r2, r2
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7fa fdd0 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x, y);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	b29b      	uxth	r3, r3
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	b292      	uxth	r2, r2
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7fa fdc8 	bl	8003528 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	b29b      	uxth	r3, r3
 800899c:	3301      	adds	r3, #1
 800899e:	b29b      	uxth	r3, r3
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	b292      	uxth	r2, r2
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fa fdbe 	bl	8003528 <LCD_DrawPoint>

	LCD_DrawPoint(x, y + 1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3301      	adds	r3, #1
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7fa fdb4 	bl	8003528 <LCD_DrawPoint>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <Element_DrawHeart>:
	LCD_DrawLine(x - CROSS_WIDTH / 2, y + CROSS_HEIGHT / 2, x + CROSS_WIDTH / 2,
			y - CROSS_HEIGHT / 2);
}

// Life, not a "heart" symbol as you may imagined(
void Element_DrawHeart(int x, int y) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
	LCD_DrawLine(x - HEART_WIDTH / 2, y - HEART_HEIGHT / 2, x + HEART_WIDTH / 2,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b05      	subs	r3, #5
 80089d8:	b298      	uxth	r0, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b05      	subs	r3, #5
 80089e0:	b299      	uxth	r1, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3305      	adds	r3, #5
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3305      	adds	r3, #5
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f7ff fa2d 	bl	8007e50 <LCD_DrawLine>
			y + HEART_HEIGHT / 2);
	LCD_DrawLine(x - HEART_WIDTH / 2, y + HEART_HEIGHT / 2, x + HEART_WIDTH / 2,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b05      	subs	r3, #5
 80089fc:	b298      	uxth	r0, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3305      	adds	r3, #5
 8008a04:	b299      	uxth	r1, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3305      	adds	r3, #5
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b05      	subs	r3, #5
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f7ff fa1b 	bl	8007e50 <LCD_DrawLine>
			y - HEART_HEIGHT / 2);
	LCD_DrawLine(x - HEART_WIDTH / 2, y, x + HEART_WIDTH / 2, y);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	3b05      	subs	r3, #5
 8008a20:	b298      	uxth	r0, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	b299      	uxth	r1, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3305      	adds	r3, #5
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f7ff fa0d 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x, y + HEART_HEIGHT / 2, x, y - HEART_HEIGHT / 2);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	b298      	uxth	r0, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3305      	adds	r3, #5
 8008a40:	b299      	uxth	r1, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b05      	subs	r3, #5
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f7ff f9ff 	bl	8007e50 <LCD_DrawLine>
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <Element_DrawStar>:

void Element_DrawStar(int x, int y) {
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
	// Vertical is a little longer than horizontal
	LCD_DrawLine(x, y - STAR_HEIGHT / 2, x, y + STAR_HEIGHT / 2);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	b298      	uxth	r0, r3
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b04      	subs	r3, #4
 8008a6e:	b299      	uxth	r1, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3304      	adds	r3, #4
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f7ff f9e8 	bl	8007e50 <LCD_DrawLine>
	LCD_DrawLine(x - STAR_WIDTH / 2, y, x + STAR_WIDTH / 2, y);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b02      	subs	r3, #2
 8008a86:	b298      	uxth	r0, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	b299      	uxth	r1, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3302      	adds	r3, #2
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f7ff f9da 	bl	8007e50 <LCD_DrawLine>
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <generate_enemy_planes>:
#include "run.h"

void generate_enemy_planes(int level, int enemy_planes[ENEMY_PLANE_MAX][2]) {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	int i = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
	int possibility_range = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]

	// Adjust MAX enemy count
	if (level == 1) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d102      	bne.n	8008ac2 <generate_enemy_planes+0x1e>
		possibility_range = 4;
 8008abc:	2304      	movs	r3, #4
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	e00a      	b.n	8008ad8 <generate_enemy_planes+0x34>
	} else if (level == 2) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d102      	bne.n	8008ace <generate_enemy_planes+0x2a>
		possibility_range = 5;
 8008ac8:	2305      	movs	r3, #5
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	e004      	b.n	8008ad8 <generate_enemy_planes+0x34>
	} else if (level == 3) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d101      	bne.n	8008ad8 <generate_enemy_planes+0x34>
		possibility_range = 6;
 8008ad4:	2306      	movs	r3, #6
 8008ad6:	60bb      	str	r3, [r7, #8]
	}

	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	e03d      	b.n	8008b5a <generate_enemy_planes+0xb6>
		if (enemy_planes[i][0] == 0) {
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d133      	bne.n	8008b54 <generate_enemy_planes+0xb0>
			if (i < level * 3) {
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4413      	add	r3, r2
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	da33      	bge.n	8008b62 <generate_enemy_planes+0xbe>
				if (rand() % 100 < possibility_range) {
 8008afa:	f000 fd7d 	bl	80095f8 <rand>
 8008afe:	4602      	mov	r2, r0
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <generate_enemy_planes+0xc8>)
 8008b02:	fb83 1302 	smull	r1, r3, r3, r2
 8008b06:	1159      	asrs	r1, r3, #5
 8008b08:	17d3      	asrs	r3, r2, #31
 8008b0a:	1acb      	subs	r3, r1, r3
 8008b0c:	2164      	movs	r1, #100	; 0x64
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	dd23      	ble.n	8008b62 <generate_enemy_planes+0xbe>
					enemy_planes[i][0] = rand() % 217 + 11;
 8008b1a:	f000 fd6d 	bl	80095f8 <rand>
 8008b1e:	4601      	mov	r1, r0
 8008b20:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <generate_enemy_planes+0xcc>)
 8008b22:	fb83 2301 	smull	r2, r3, r3, r1
 8008b26:	440b      	add	r3, r1
 8008b28:	11da      	asrs	r2, r3, #7
 8008b2a:	17cb      	asrs	r3, r1, #31
 8008b2c:	1ad2      	subs	r2, r2, r3
 8008b2e:	4613      	mov	r3, r2
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	1a9b      	subs	r3, r3, r2
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	1a8a      	subs	r2, r1, r2
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	440b      	add	r3, r1
 8008b42:	320b      	adds	r2, #11
 8008b44:	601a      	str	r2, [r3, #0]
					enemy_planes[i][1] = 61;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	223d      	movs	r2, #61	; 0x3d
 8008b50:	605a      	str	r2, [r3, #4]
				}
			}
			break;
 8008b52:	e006      	b.n	8008b62 <generate_enemy_planes+0xbe>
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	ddbe      	ble.n	8008ade <generate_enemy_planes+0x3a>
		}
	}
}
 8008b60:	e000      	b.n	8008b64 <generate_enemy_planes+0xc0>
			break;
 8008b62:	bf00      	nop
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	51eb851f 	.word	0x51eb851f
 8008b70:	97012e03 	.word	0x97012e03

08008b74 <move_selfPlane>:

// Action when user move self plane
void move_selfPlane(int self_plane[2], int self_buttles[SELF_BUTTLE_MAX][2]) {
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b089      	sub	sp, #36	; 0x24
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
	int key0Pressed = (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin)
 8008b7e:	2120      	movs	r1, #32
 8008b80:	4843      	ldr	r0, [pc, #268]	; (8008c90 <move_selfPlane+0x11c>)
 8008b82:	f7f8 fb43 	bl	800120c <HAL_GPIO_ReadPin>
 8008b86:	4603      	mov	r3, r0
			== GPIO_PIN_RESET);
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bf0c      	ite	eq
 8008b8c:	2301      	moveq	r3, #1
 8008b8e:	2300      	movne	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
	int key0Pressed = (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin)
 8008b92:	613b      	str	r3, [r7, #16]
	int key1Pressed = (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)
 8008b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b98:	483e      	ldr	r0, [pc, #248]	; (8008c94 <move_selfPlane+0x120>)
 8008b9a:	f7f8 fb37 	bl	800120c <HAL_GPIO_ReadPin>
 8008b9e:	4603      	mov	r3, r0
			== GPIO_PIN_RESET);
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
	int key1Pressed = (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)
 8008baa:	60fb      	str	r3, [r7, #12]
	int keyWKPressed = (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin)
 8008bac:	2101      	movs	r1, #1
 8008bae:	4839      	ldr	r0, [pc, #228]	; (8008c94 <move_selfPlane+0x120>)
 8008bb0:	f7f8 fb2c 	bl	800120c <HAL_GPIO_ReadPin>
 8008bb4:	4603      	mov	r3, r0
			== GPIO_PIN_SET);
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	bf0c      	ite	eq
 8008bba:	2301      	moveq	r3, #1
 8008bbc:	2300      	movne	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
	int keyWKPressed = (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin)
 8008bc0:	60bb      	str	r3, [r7, #8]

	if (key0Pressed || key1Pressed || keyWKPressed) {
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d105      	bne.n	8008bd4 <move_selfPlane+0x60>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <move_selfPlane+0x60>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d059      	beq.n	8008c88 <move_selfPlane+0x114>
		// Clear previous pattern
		LCD_Fill(self_plane[0] - 10, self_plane[1] - 20, self_plane[0] + 10,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	3b0a      	subs	r3, #10
 8008bdc:	b298      	uxth	r0, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3304      	adds	r3, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b14      	subs	r3, #20
 8008be8:	b299      	uxth	r1, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	330a      	adds	r3, #10
 8008bf2:	b29a      	uxth	r2, r3
				self_plane[1] + 20, BACK_COLOR);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
		LCD_Fill(self_plane[0] - 10, self_plane[1] - 20, self_plane[0] + 10,
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	b29c      	uxth	r4, r3
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <move_selfPlane+0x124>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	4623      	mov	r3, r4
 8008c08:	f7ff f896 	bl	8007d38 <LCD_Fill>

		// KEY_0  -> Fire
		// KEY_1  -> Move right 3px
		// KEY_WK -> Move left  3px
		if (key0Pressed) {
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <move_selfPlane+0xe0>
			int i;
			for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e01a      	b.n	8008c4e <move_selfPlane+0xda>
				if (self_buttles[i][0] == 0) {
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	4413      	add	r3, r2
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d110      	bne.n	8008c48 <move_selfPlane+0xd4>
					self_buttles[i][0] = self_plane[0];
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	601a      	str	r2, [r3, #0]
					self_buttles[i][1] = self_plane[1] - 22;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3304      	adds	r3, #4
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	440b      	add	r3, r1
 8008c42:	3a16      	subs	r2, #22
 8008c44:	605a      	str	r2, [r3, #4]
					break;
 8008c46:	e005      	b.n	8008c54 <move_selfPlane+0xe0>
			for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	617b      	str	r3, [r7, #20]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b63      	cmp	r3, #99	; 0x63
 8008c52:	dde1      	ble.n	8008c18 <move_selfPlane+0xa4>
				}
			}
		}
		if (key1Pressed) {
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <move_selfPlane+0xfa>
			if (self_plane[0] + 10 < RIGHT_LIMIT) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	330a      	adds	r3, #10
 8008c60:	2bed      	cmp	r3, #237	; 0xed
 8008c62:	dc04      	bgt.n	8008c6e <move_selfPlane+0xfa>
				self_plane[0] = self_plane[0] + 3;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	1cda      	adds	r2, r3, #3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	601a      	str	r2, [r3, #0]
			}
		}
		if (keyWKPressed) {
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d009      	beq.n	8008c88 <move_selfPlane+0x114>
			if (self_plane[0] - 10 > LEFT_LIMIT) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3b0a      	subs	r3, #10
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	dd04      	ble.n	8008c88 <move_selfPlane+0x114>
				self_plane[0] = self_plane[0] - 3;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	1eda      	subs	r2, r3, #3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8008c88:	bf00      	nop
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd90      	pop	{r4, r7, pc}
 8008c90:	40011000 	.word	0x40011000
 8008c94:	40010800 	.word	0x40010800
 8008c98:	20000006 	.word	0x20000006

08008c9c <update_SelfButtles>:

void update_SelfButtles(int self_buttles[SELF_BUTTLE_MAX][2]) {
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e04e      	b.n	8008d48 <update_SelfButtles+0xac>
		if (self_buttles[i][0] != 0) {
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d044      	beq.n	8008d42 <update_SelfButtles+0xa6>
			LCD_Fill(self_buttles[i][0] - 1, self_buttles[i][1] - 1,
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b298      	uxth	r0, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b299      	uxth	r1, r3
					self_buttles[i][0] + 1, self_buttles[i][1] + 1, BACK_COLOR);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	681b      	ldr	r3, [r3, #0]
			LCD_Fill(self_buttles[i][0] - 1, self_buttles[i][1] - 1,
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	b29c      	uxth	r4, r3
					self_buttles[i][0] + 1, self_buttles[i][1] + 1, BACK_COLOR);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	685b      	ldr	r3, [r3, #4]
			LCD_Fill(self_buttles[i][0] - 1, self_buttles[i][1] - 1,
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	4b18      	ldr	r3, [pc, #96]	; (8008d5c <update_SelfButtles+0xc0>)
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	4622      	mov	r2, r4
 8008d02:	f7ff f819 	bl	8007d38 <LCD_Fill>

			self_buttles[i][1] = self_buttles[i][1] - 3;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	440b      	add	r3, r1
 8008d18:	3a03      	subs	r2, #3
 8008d1a:	605a      	str	r2, [r3, #4]

			// Destroy at boundary
			if (self_buttles[i][1] < 42) {
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	4413      	add	r3, r2
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2b29      	cmp	r3, #41	; 0x29
 8008d28:	dc0b      	bgt.n	8008d42 <update_SelfButtles+0xa6>
				self_buttles[i][0] = 0;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	4413      	add	r3, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
				self_buttles[i][1] = 0;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	605a      	str	r2, [r3, #4]
	for (i = 0; i < SELF_BUTTLE_MAX; i++) {
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b63      	cmp	r3, #99	; 0x63
 8008d4c:	ddad      	ble.n	8008caa <update_SelfButtles+0xe>
			}
		}
	}
	// Array shifting
	// "y" of buttles array growth with "index"
	arrange_self_buttles(self_buttles);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa2a 	bl	80091a8 <arrange_self_buttles>
}
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd90      	pop	{r4, r7, pc}
 8008d5c:	20000006 	.word	0x20000006

08008d60 <update_enemy_planes>:

void update_enemy_planes(int enemy_planes[ENEMY_PLANE_MAX][2]) {
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	e04f      	b.n	8008e0e <update_enemy_planes+0xae>
		if (enemy_planes[i][0] != 0) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4413      	add	r3, r2
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d045      	beq.n	8008e08 <update_enemy_planes+0xa8>

			LCD_Fill(enemy_planes[i][0] - 10, enemy_planes[i][1] - 20,
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b0a      	subs	r3, #10
 8008d8a:	b298      	uxth	r0, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	3b14      	subs	r3, #20
 8008d9a:	b299      	uxth	r1, r3
					enemy_planes[i][0] + 10, enemy_planes[i][1] + 20,
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	681b      	ldr	r3, [r3, #0]
			LCD_Fill(enemy_planes[i][0] - 10, enemy_planes[i][1] - 20,
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	330a      	adds	r3, #10
 8008daa:	b29c      	uxth	r4, r3
					enemy_planes[i][0] + 10, enemy_planes[i][1] + 20,
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	685b      	ldr	r3, [r3, #4]
			LCD_Fill(enemy_planes[i][0] - 10, enemy_planes[i][1] - 20,
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3314      	adds	r3, #20
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <update_enemy_planes+0xc4>)
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	f7fe ffb7 	bl	8007d38 <LCD_Fill>
					BACK_COLOR);

			enemy_planes[i][1] = enemy_planes[i][1] + 1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	440b      	add	r3, r1
 8008ddc:	3201      	adds	r2, #1
 8008dde:	605a      	str	r2, [r3, #4]

			// Destroy at boundary and append with next element inside array
			if (enemy_planes[i][1] > 298) {
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008dee:	dd0b      	ble.n	8008e08 <update_enemy_planes+0xa8>
				enemy_planes[i][0] = 0;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
				enemy_planes[i][1] = 0;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b09      	cmp	r3, #9
 8008e12:	ddac      	ble.n	8008d6e <update_enemy_planes+0xe>
			}
		}
	}
	// Array shifting
	// "y" of buttles array decrease with "index"
	arrange_enemy_planes(enemy_planes);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9f3 	bl	8009200 <arrange_enemy_planes>
}
 8008e1a:	bf00      	nop
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd90      	pop	{r4, r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000006 	.word	0x20000006

08008e28 <check_self_plane_to_enemy_plane_collide>:

void check_self_plane_to_enemy_plane_collide(int *score, int *life,
		int self_plane[2], int enemy_planes[ENEMY_PLANE_MAX][2]) {
 8008e28:	b590      	push	{r4, r7, lr}
 8008e2a:	b089      	sub	sp, #36	; 0x24
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
	int i = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
	int temp = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	e0ab      	b.n	8008f9c <check_self_plane_to_enemy_plane_collide+0x174>
		if (enemy_planes[i][0] != 0) {
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80a1 	beq.w	8008f96 <check_self_plane_to_enemy_plane_collide+0x16e>
			if (abs(enemy_planes[i][0] - self_plane[0]) <= 20) {
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	f113 0f14 	cmn.w	r3, #20
 8008e68:	f2c0 8095 	blt.w	8008f96 <check_self_plane_to_enemy_plane_collide+0x16e>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	4413      	add	r3, r2
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b14      	cmp	r3, #20
 8008e7e:	f300 808a 	bgt.w	8008f96 <check_self_plane_to_enemy_plane_collide+0x16e>
				if (abs(enemy_planes[i][1] - self_plane[1]) <= 40) {
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4413      	add	r3, r2
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8008e98:	db7d      	blt.n	8008f96 <check_self_plane_to_enemy_plane_collide+0x16e>
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b28      	cmp	r3, #40	; 0x28
 8008eae:	dc72      	bgt.n	8008f96 <check_self_plane_to_enemy_plane_collide+0x16e>
					LCD_Fill(self_plane[0] - 10, self_plane[1] - 20,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b0a      	subs	r3, #10
 8008eb8:	b298      	uxth	r0, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b14      	subs	r3, #20
 8008ec4:	b299      	uxth	r1, r3
							self_plane[0] + 10, self_plane[1] + 20, BACK_COLOR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
					LCD_Fill(self_plane[0] - 10, self_plane[1] - 20,
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	330a      	adds	r3, #10
 8008ece:	b29a      	uxth	r2, r3
							self_plane[0] + 10, self_plane[1] + 20, BACK_COLOR);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
					LCD_Fill(self_plane[0] - 10, self_plane[1] - 20,
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3314      	adds	r3, #20
 8008eda:	b29c      	uxth	r4, r3
 8008edc:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <check_self_plane_to_enemy_plane_collide+0x18c>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	f7fe ff28 	bl	8007d38 <LCD_Fill>
					LCD_Fill(enemy_planes[i][0] - 10, enemy_planes[i][1] - 20,
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	4413      	add	r3, r2
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b0a      	subs	r3, #10
 8008ef6:	b298      	uxth	r0, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	4413      	add	r3, r2
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b14      	subs	r3, #20
 8008f06:	b299      	uxth	r1, r3
							enemy_planes[i][0] + 10, enemy_planes[i][1] + 20,
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	4413      	add	r3, r2
 8008f10:	681b      	ldr	r3, [r3, #0]
					LCD_Fill(enemy_planes[i][0] - 10, enemy_planes[i][1] - 20,
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	330a      	adds	r3, #10
 8008f16:	b29c      	uxth	r4, r3
							enemy_planes[i][0] + 10, enemy_planes[i][1] + 20,
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	4413      	add	r3, r2
 8008f20:	685b      	ldr	r3, [r3, #4]
					LCD_Fill(enemy_planes[i][0] - 10, enemy_planes[i][1] - 20,
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	3314      	adds	r3, #20
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <check_self_plane_to_enemy_plane_collide+0x18c>)
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	4622      	mov	r2, r4
 8008f32:	f7fe ff01 	bl	8007d38 <LCD_Fill>
							BACK_COLOR);

					// Toggle RED LED
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8008f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f3a:	481f      	ldr	r0, [pc, #124]	; (8008fb8 <check_self_plane_to_enemy_plane_collide+0x190>)
 8008f3c:	f7f8 f995 	bl	800126a <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 8008f40:	2064      	movs	r0, #100	; 0x64
 8008f42:	f7f7 fdc1 	bl	8000ac8 <HAL_Delay>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8008f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f4a:	481b      	ldr	r0, [pc, #108]	; (8008fb8 <check_self_plane_to_enemy_plane_collide+0x190>)
 8008f4c:	f7f8 f98d 	bl	800126a <HAL_GPIO_TogglePin>

					self_plane[0] = 120;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2278      	movs	r2, #120	; 0x78
 8008f54:	601a      	str	r2, [r3, #0]
					self_plane[1] = 290;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008f5e:	601a      	str	r2, [r3, #0]

					enemy_planes[i][0] = 0;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	4413      	add	r3, r2
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]
					enemy_planes[i][1] = 0;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	4413      	add	r3, r2
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]

					temp = (*score);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	613b      	str	r3, [r7, #16]
					(*score) = temp + 1;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	601a      	str	r2, [r3, #0]

					temp = (*life);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	613b      	str	r3, [r7, #16]
					(*life) = temp - 1;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	1e5a      	subs	r2, r3, #1
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	601a      	str	r2, [r3, #0]
					break;
 8008f94:	e006      	b.n	8008fa4 <check_self_plane_to_enemy_plane_collide+0x17c>
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b09      	cmp	r3, #9
 8008fa0:	f77f af50 	ble.w	8008e44 <check_self_plane_to_enemy_plane_collide+0x1c>
				}
			}
		}
	}
	arrange_enemy_planes(enemy_planes);
 8008fa4:	6838      	ldr	r0, [r7, #0]
 8008fa6:	f000 f92b 	bl	8009200 <arrange_enemy_planes>
}
 8008faa:	bf00      	nop
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd90      	pop	{r4, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000006 	.word	0x20000006
 8008fb8:	40010800 	.word	0x40010800

08008fbc <check_self_buttles_to_enemy_plane_collide>:

void check_self_buttles_to_enemy_plane_collide(int *score,
		int self_buttles[SELF_BUTTLE_MAX][2],
		int enemy_planes[ENEMY_PLANE_MAX][2]) {
 8008fbc:	b590      	push	{r4, r7, lr}
 8008fbe:	b08b      	sub	sp, #44	; 0x2c
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
	int i = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61fb      	str	r3, [r7, #28]
	int j = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61bb      	str	r3, [r7, #24]
	int temp = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]

	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	e0a1      	b.n	800911e <check_self_buttles_to_enemy_plane_collide+0x162>
		if (enemy_planes[i][0] != 0) {
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 8097 	beq.w	8009118 <check_self_buttles_to_enemy_plane_collide+0x15c>
			for (j = 0; j < SELF_BUTTLE_MAX; j++) {
 8008fea:	2300      	movs	r3, #0
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	e08c      	b.n	800910a <check_self_buttles_to_enemy_plane_collide+0x14e>
				if (abs(self_buttles[j][0] - enemy_planes[i][0]) <= 12) {
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	440b      	add	r3, r1
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	f113 0f0c 	cmn.w	r3, #12
 800900a:	db7b      	blt.n	8009104 <check_self_buttles_to_enemy_plane_collide+0x148>
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	4413      	add	r3, r2
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	440b      	add	r3, r1
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b0c      	cmp	r3, #12
 8009024:	dc6e      	bgt.n	8009104 <check_self_buttles_to_enemy_plane_collide+0x148>
					if (abs(self_buttles[j][1] - enemy_planes[i][1]) <= 22) {
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	440b      	add	r3, r1
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	f113 0f16 	cmn.w	r3, #22
 8009040:	db60      	blt.n	8009104 <check_self_buttles_to_enemy_plane_collide+0x148>
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	4413      	add	r3, r2
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	440b      	add	r3, r1
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b16      	cmp	r3, #22
 800905a:	dc53      	bgt.n	8009104 <check_self_buttles_to_enemy_plane_collide+0x148>
						LCD_Fill(enemy_planes[i][0] - 10,
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	4413      	add	r3, r2
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b0a      	subs	r3, #10
 800906a:	b298      	uxth	r0, r3
								enemy_planes[i][1] - 20,
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	4413      	add	r3, r2
 8009074:	685b      	ldr	r3, [r3, #4]
						LCD_Fill(enemy_planes[i][0] - 10,
 8009076:	b29b      	uxth	r3, r3
 8009078:	3b14      	subs	r3, #20
 800907a:	b299      	uxth	r1, r3
								enemy_planes[i][0] + 10,
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	681b      	ldr	r3, [r3, #0]
						LCD_Fill(enemy_planes[i][0] - 10,
 8009086:	b29b      	uxth	r3, r3
 8009088:	330a      	adds	r3, #10
 800908a:	b29c      	uxth	r4, r3
								enemy_planes[i][1] + 20, BACK_COLOR);
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4413      	add	r3, r2
 8009094:	685b      	ldr	r3, [r3, #4]
						LCD_Fill(enemy_planes[i][0] - 10,
 8009096:	b29b      	uxth	r3, r3
 8009098:	3314      	adds	r3, #20
 800909a:	b29a      	uxth	r2, r3
 800909c:	4b25      	ldr	r3, [pc, #148]	; (8009134 <check_self_buttles_to_enemy_plane_collide+0x178>)
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4613      	mov	r3, r2
 80090a4:	4622      	mov	r2, r4
 80090a6:	f7fe fe47 	bl	8007d38 <LCD_Fill>

						self_buttles[j][0] = 0;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
						self_buttles[j][1] = 0;
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	00db      	lsls	r3, r3, #3
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	605a      	str	r2, [r3, #4]

						enemy_planes[i][0] = 0;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
						enemy_planes[i][1] = 0;
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]

						// Toggle RED LED
						HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80090da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090de:	4816      	ldr	r0, [pc, #88]	; (8009138 <check_self_buttles_to_enemy_plane_collide+0x17c>)
 80090e0:	f7f8 f8c3 	bl	800126a <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80090e4:	2064      	movs	r0, #100	; 0x64
 80090e6:	f7f7 fcef 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80090ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090ee:	4812      	ldr	r0, [pc, #72]	; (8009138 <check_self_buttles_to_enemy_plane_collide+0x17c>)
 80090f0:	f7f8 f8bb 	bl	800126a <HAL_GPIO_TogglePin>

						temp = (*score);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	617b      	str	r3, [r7, #20]
						(*score) = temp + 1;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	601a      	str	r2, [r3, #0]
						break;
 8009102:	e006      	b.n	8009112 <check_self_buttles_to_enemy_plane_collide+0x156>
			for (j = 0; j < SELF_BUTTLE_MAX; j++) {
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	3301      	adds	r3, #1
 8009108:	61bb      	str	r3, [r7, #24]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b63      	cmp	r3, #99	; 0x63
 800910e:	f77f af6f 	ble.w	8008ff0 <check_self_buttles_to_enemy_plane_collide+0x34>
					}
				}
			}
			arrange_enemy_planes(enemy_planes);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f874 	bl	8009200 <arrange_enemy_planes>
	for (i = 0; i < ENEMY_PLANE_MAX; i++) {
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	3301      	adds	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	2b09      	cmp	r3, #9
 8009122:	f77f af5a 	ble.w	8008fda <check_self_buttles_to_enemy_plane_collide+0x1e>
		}
	}
	arrange_self_buttles(self_buttles);
 8009126:	68b8      	ldr	r0, [r7, #8]
 8009128:	f000 f83e 	bl	80091a8 <arrange_self_buttles>
}
 800912c:	bf00      	nop
 800912e:	3724      	adds	r7, #36	; 0x24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd90      	pop	{r4, r7, pc}
 8009134:	20000006 	.word	0x20000006
 8009138:	40010800 	.word	0x40010800

0800913c <clear_all_enemy_plane>:

void clear_all_enemy_plane(int my_plane[2], int enemy_plane[10][2]) {
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af02      	add	r7, sp, #8
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
	int i = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < 10; i++) {
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	e00e      	b.n	800916e <clear_all_enemy_plane+0x32>
		enemy_plane[i][0] = 0;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	4413      	add	r3, r2
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
		enemy_plane[i][1] = 0;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	4413      	add	r3, r2
 8009164:	2200      	movs	r2, #0
 8009166:	605a      	str	r2, [r3, #4]
	for (i = 0; i < 10; i++) {
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b09      	cmp	r3, #9
 8009172:	dded      	ble.n	8009150 <clear_all_enemy_plane+0x14>
	}
	LCD_Fill(1, 41, 239, 318, BACK_COLOR);
 8009174:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <clear_all_enemy_plane+0x68>)
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800917e:	22ef      	movs	r2, #239	; 0xef
 8009180:	2129      	movs	r1, #41	; 0x29
 8009182:	2001      	movs	r0, #1
 8009184:	f7fe fdd8 	bl	8007d38 <LCD_Fill>

	Element_DrawSelfPlane(my_plane[0], my_plane[1]);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f7ff fb43 	bl	8008820 <Element_DrawSelfPlane>
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000006 	.word	0x20000006

080091a8 <arrange_self_buttles>:

void arrange_self_buttles(int self_buttles[SELF_BUTTLE_MAX][2]) {
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	int i;
	if (self_buttles[0][0] == 0) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11e      	bne.n	80091f6 <arrange_self_buttles+0x4e>
		for (i = 0; i < SELF_BUTTLE_MAX - 1; i++) {
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e018      	b.n	80091f0 <arrange_self_buttles+0x48>
			self_buttles[i][0] = self_buttles[i + 1][0];
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	441a      	add	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	440b      	add	r3, r1
 80091d0:	6812      	ldr	r2, [r2, #0]
 80091d2:	601a      	str	r2, [r3, #0]
			self_buttles[i][1] = self_buttles[i + 1][1];
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	441a      	add	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	440b      	add	r3, r1
 80091e6:	6852      	ldr	r2, [r2, #4]
 80091e8:	605a      	str	r2, [r3, #4]
		for (i = 0; i < SELF_BUTTLE_MAX - 1; i++) {
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b62      	cmp	r3, #98	; 0x62
 80091f4:	dde3      	ble.n	80091be <arrange_self_buttles+0x16>
		}
	}
}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr

08009200 <arrange_enemy_planes>:

void arrange_enemy_planes(int enemy_planes[ENEMY_PLANE_MAX][2]) {
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
	int i;
	if (enemy_planes[0][0] == 0) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d11e      	bne.n	800924e <arrange_enemy_planes+0x4e>
		for (i = 0; i < ENEMY_PLANE_MAX - 1; i++) {
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e018      	b.n	8009248 <arrange_enemy_planes+0x48>
			enemy_planes[i][0] = enemy_planes[i + 1][0];
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3301      	adds	r3, #1
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	441a      	add	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	440b      	add	r3, r1
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	601a      	str	r2, [r3, #0]
			enemy_planes[i][1] = enemy_planes[i + 1][1];
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	441a      	add	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	440b      	add	r3, r1
 800923e:	6852      	ldr	r2, [r2, #4]
 8009240:	605a      	str	r2, [r3, #4]
		for (i = 0; i < ENEMY_PLANE_MAX - 1; i++) {
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b08      	cmp	r3, #8
 800924c:	dde3      	ble.n	8009216 <arrange_enemy_planes+0x16>
		}
	}
}
 800924e:	bf00      	nop
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr

08009258 <skip_via_KEY0>:
		}
	}
}

// wait until a KEY0 press was made
void skip_via_KEY0(void) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	int wait = 1;
 800925e:	2301      	movs	r3, #1
 8009260:	607b      	str	r3, [r7, #4]
	while (wait) {
 8009262:	e00b      	b.n	800927c <skip_via_KEY0+0x24>
		if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8009264:	2120      	movs	r1, #32
 8009266:	4809      	ldr	r0, [pc, #36]	; (800928c <skip_via_KEY0+0x34>)
 8009268:	f7f7 ffd0 	bl	800120c <HAL_GPIO_ReadPin>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <skip_via_KEY0+0x24>
			wait = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	607b      	str	r3, [r7, #4]
			HAL_Delay(100);
 8009276:	2064      	movs	r0, #100	; 0x64
 8009278:	f7f7 fc26 	bl	8000ac8 <HAL_Delay>
	while (wait) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <skip_via_KEY0+0xc>
		}
	}
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	40011000 	.word	0x40011000

08009290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009296:	4b16      	ldr	r3, [pc, #88]	; (80092f0 <HAL_MspInit+0x60>)
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	4a15      	ldr	r2, [pc, #84]	; (80092f0 <HAL_MspInit+0x60>)
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	6193      	str	r3, [r2, #24]
 80092a2:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <HAL_MspInit+0x60>)
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	60bb      	str	r3, [r7, #8]
 80092ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092ae:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <HAL_MspInit+0x60>)
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4a0f      	ldr	r2, [pc, #60]	; (80092f0 <HAL_MspInit+0x60>)
 80092b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b8:	61d3      	str	r3, [r2, #28]
 80092ba:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <HAL_MspInit+0x60>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c2:	607b      	str	r3, [r7, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80092c6:	2005      	movs	r0, #5
 80092c8:	f7f7 fcec 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <HAL_MspInit+0x64>)
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	4a04      	ldr	r2, [pc, #16]	; (80092f4 <HAL_MspInit+0x64>)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40021000 	.word	0x40021000
 80092f4:	40010000 	.word	0x40010000

080092f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80092fc:	bf00      	nop
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009308:	e7fe      	b.n	8009308 <HardFault_Handler+0x4>

0800930a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800930a:	b480      	push	{r7}
 800930c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800930e:	e7fe      	b.n	800930e <MemManage_Handler+0x4>

08009310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009314:	e7fe      	b.n	8009314 <BusFault_Handler+0x4>

08009316 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009316:	b480      	push	{r7}
 8009318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800931a:	e7fe      	b.n	800931a <UsageFault_Handler+0x4>

0800931c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009320:	bf00      	nop
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr

08009328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800932c:	bf00      	nop
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr

08009340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009344:	f7f7 fba4 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}

0800934c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009350:	2001      	movs	r0, #1
 8009352:	f7f7 ffa3 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009356:	bf00      	nop
 8009358:	bd80      	pop	{r7, pc}

0800935a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800935e:	2020      	movs	r0, #32
 8009360:	f7f7 ff9c 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009364:	bf00      	nop
 8009366:	bd80      	pop	{r7, pc}

08009368 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800936c:	4802      	ldr	r0, [pc, #8]	; (8009378 <USART1_IRQHandler+0x10>)
 800936e:	f7f8 fc21 	bl	8001bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009372:	bf00      	nop
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000da0 	.word	0x20000da0

0800937c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8009380:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009384:	f7f7 ff8a 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009388:	bf00      	nop
 800938a:	bd80      	pop	{r7, pc}

0800938c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009394:	4b11      	ldr	r3, [pc, #68]	; (80093dc <_sbrk+0x50>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <_sbrk+0x16>
		heap_end = &end;
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <_sbrk+0x50>)
 800939e:	4a10      	ldr	r2, [pc, #64]	; (80093e0 <_sbrk+0x54>)
 80093a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80093a2:	4b0e      	ldr	r3, [pc, #56]	; (80093dc <_sbrk+0x50>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80093a8:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <_sbrk+0x50>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4413      	add	r3, r2
 80093b0:	466a      	mov	r2, sp
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d907      	bls.n	80093c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80093b6:	f000 f8ed 	bl	8009594 <__errno>
 80093ba:	4602      	mov	r2, r0
 80093bc:	230c      	movs	r3, #12
 80093be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	e006      	b.n	80093d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <_sbrk+0x50>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4413      	add	r3, r2
 80093ce:	4a03      	ldr	r2, [pc, #12]	; (80093dc <_sbrk+0x50>)
 80093d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80093d2:	68fb      	ldr	r3, [r7, #12]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000090 	.word	0x20000090
 80093e0:	20000de8 	.word	0x20000de8

080093e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80093e8:	4b15      	ldr	r3, [pc, #84]	; (8009440 <SystemInit+0x5c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a14      	ldr	r2, [pc, #80]	; (8009440 <SystemInit+0x5c>)
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80093f4:	4b12      	ldr	r3, [pc, #72]	; (8009440 <SystemInit+0x5c>)
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	4911      	ldr	r1, [pc, #68]	; (8009440 <SystemInit+0x5c>)
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <SystemInit+0x60>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8009400:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <SystemInit+0x5c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a0e      	ldr	r2, [pc, #56]	; (8009440 <SystemInit+0x5c>)
 8009406:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800940a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800940e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <SystemInit+0x5c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <SystemInit+0x5c>)
 8009416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800941a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800941c:	4b08      	ldr	r3, [pc, #32]	; (8009440 <SystemInit+0x5c>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	4a07      	ldr	r2, [pc, #28]	; (8009440 <SystemInit+0x5c>)
 8009422:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8009426:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <SystemInit+0x5c>)
 800942a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800942e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <SystemInit+0x64>)
 8009432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009436:	609a      	str	r2, [r3, #8]
#endif 
}
 8009438:	bf00      	nop
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr
 8009440:	40021000 	.word	0x40021000
 8009444:	f8ff0000 	.word	0xf8ff0000
 8009448:	e000ed00 	.word	0xe000ed00

0800944c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009450:	4b11      	ldr	r3, [pc, #68]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <MX_USART1_UART_Init+0x50>)
 8009454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009456:	4b10      	ldr	r3, [pc, #64]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800945c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800945e:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009460:	2200      	movs	r2, #0
 8009462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009464:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009466:	2200      	movs	r2, #0
 8009468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800946a:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 800946c:	2200      	movs	r2, #0
 800946e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009470:	4b09      	ldr	r3, [pc, #36]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009472:	220c      	movs	r2, #12
 8009474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009476:	4b08      	ldr	r3, [pc, #32]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009478:	2200      	movs	r2, #0
 800947a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 800947e:	2200      	movs	r2, #0
 8009480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009482:	4805      	ldr	r0, [pc, #20]	; (8009498 <MX_USART1_UART_Init+0x4c>)
 8009484:	f7f8 fb48 	bl	8001b18 <HAL_UART_Init>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800948e:	f7ff f939 	bl	8008704 <Error_Handler>
  }

}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000da0 	.word	0x20000da0
 800949c:	40013800 	.word	0x40013800

080094a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094a8:	f107 0310 	add.w	r3, r7, #16
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	605a      	str	r2, [r3, #4]
 80094b2:	609a      	str	r2, [r3, #8]
 80094b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a20      	ldr	r2, [pc, #128]	; (800953c <HAL_UART_MspInit+0x9c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d139      	bne.n	8009534 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80094c0:	4b1f      	ldr	r3, [pc, #124]	; (8009540 <HAL_UART_MspInit+0xa0>)
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <HAL_UART_MspInit+0xa0>)
 80094c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094ca:	6193      	str	r3, [r2, #24]
 80094cc:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <HAL_UART_MspInit+0xa0>)
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d8:	4b19      	ldr	r3, [pc, #100]	; (8009540 <HAL_UART_MspInit+0xa0>)
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	4a18      	ldr	r2, [pc, #96]	; (8009540 <HAL_UART_MspInit+0xa0>)
 80094de:	f043 0304 	orr.w	r3, r3, #4
 80094e2:	6193      	str	r3, [r2, #24]
 80094e4:	4b16      	ldr	r3, [pc, #88]	; (8009540 <HAL_UART_MspInit+0xa0>)
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80094f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f6:	2302      	movs	r3, #2
 80094f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80094fa:	2303      	movs	r3, #3
 80094fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094fe:	f107 0310 	add.w	r3, r7, #16
 8009502:	4619      	mov	r1, r3
 8009504:	480f      	ldr	r0, [pc, #60]	; (8009544 <HAL_UART_MspInit+0xa4>)
 8009506:	f7f7 fd17 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800950a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800950e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009514:	2300      	movs	r3, #0
 8009516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009518:	f107 0310 	add.w	r3, r7, #16
 800951c:	4619      	mov	r1, r3
 800951e:	4809      	ldr	r0, [pc, #36]	; (8009544 <HAL_UART_MspInit+0xa4>)
 8009520:	f7f7 fd0a 	bl	8000f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009524:	2200      	movs	r2, #0
 8009526:	2100      	movs	r1, #0
 8009528:	2025      	movs	r0, #37	; 0x25
 800952a:	f7f7 fbc6 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800952e:	2025      	movs	r0, #37	; 0x25
 8009530:	f7f7 fbdf 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009534:	bf00      	nop
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	40013800 	.word	0x40013800
 8009540:	40021000 	.word	0x40021000
 8009544:	40010800 	.word	0x40010800

08009548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009548:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800954a:	e003      	b.n	8009554 <LoopCopyDataInit>

0800954c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800954e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009550:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009552:	3104      	adds	r1, #4

08009554 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009554:	480a      	ldr	r0, [pc, #40]	; (8009580 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009558:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800955a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800955c:	d3f6      	bcc.n	800954c <CopyDataInit>
  ldr r2, =_sbss
 800955e:	4a0a      	ldr	r2, [pc, #40]	; (8009588 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009560:	e002      	b.n	8009568 <LoopFillZerobss>

08009562 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009562:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009564:	f842 3b04 	str.w	r3, [r2], #4

08009568 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009568:	4b08      	ldr	r3, [pc, #32]	; (800958c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800956a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800956c:	d3f9      	bcc.n	8009562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800956e:	f7ff ff39 	bl	80093e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009572:	f000 f815 	bl	80095a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009576:	f7fe fecb 	bl	8008310 <main>
  bx lr
 800957a:	4770      	bx	lr
  ldr r3, =_sidata
 800957c:	0800b78c 	.word	0x0800b78c
  ldr r0, =_sdata
 8009580:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009584:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8009588:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800958c:	20000de4 	.word	0x20000de4

08009590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009590:	e7fe      	b.n	8009590 <ADC1_2_IRQHandler>
	...

08009594 <__errno>:
 8009594:	4b01      	ldr	r3, [pc, #4]	; (800959c <__errno+0x8>)
 8009596:	6818      	ldr	r0, [r3, #0]
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	2000000c 	.word	0x2000000c

080095a0 <__libc_init_array>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	2500      	movs	r5, #0
 80095a4:	4e0c      	ldr	r6, [pc, #48]	; (80095d8 <__libc_init_array+0x38>)
 80095a6:	4c0d      	ldr	r4, [pc, #52]	; (80095dc <__libc_init_array+0x3c>)
 80095a8:	1ba4      	subs	r4, r4, r6
 80095aa:	10a4      	asrs	r4, r4, #2
 80095ac:	42a5      	cmp	r5, r4
 80095ae:	d109      	bne.n	80095c4 <__libc_init_array+0x24>
 80095b0:	f000 fc84 	bl	8009ebc <_init>
 80095b4:	2500      	movs	r5, #0
 80095b6:	4e0a      	ldr	r6, [pc, #40]	; (80095e0 <__libc_init_array+0x40>)
 80095b8:	4c0a      	ldr	r4, [pc, #40]	; (80095e4 <__libc_init_array+0x44>)
 80095ba:	1ba4      	subs	r4, r4, r6
 80095bc:	10a4      	asrs	r4, r4, #2
 80095be:	42a5      	cmp	r5, r4
 80095c0:	d105      	bne.n	80095ce <__libc_init_array+0x2e>
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095c8:	4798      	blx	r3
 80095ca:	3501      	adds	r5, #1
 80095cc:	e7ee      	b.n	80095ac <__libc_init_array+0xc>
 80095ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095d2:	4798      	blx	r3
 80095d4:	3501      	adds	r5, #1
 80095d6:	e7f2      	b.n	80095be <__libc_init_array+0x1e>
 80095d8:	0800b784 	.word	0x0800b784
 80095dc:	0800b784 	.word	0x0800b784
 80095e0:	0800b784 	.word	0x0800b784
 80095e4:	0800b788 	.word	0x0800b788

080095e8 <memset>:
 80095e8:	4603      	mov	r3, r0
 80095ea:	4402      	add	r2, r0
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	f803 1b01 	strb.w	r1, [r3], #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <rand>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4b13      	ldr	r3, [pc, #76]	; (8009648 <rand+0x50>)
 80095fc:	681c      	ldr	r4, [r3, #0]
 80095fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009600:	b97b      	cbnz	r3, 8009622 <rand+0x2a>
 8009602:	2018      	movs	r0, #24
 8009604:	f000 f860 	bl	80096c8 <malloc>
 8009608:	4a10      	ldr	r2, [pc, #64]	; (800964c <rand+0x54>)
 800960a:	4b11      	ldr	r3, [pc, #68]	; (8009650 <rand+0x58>)
 800960c:	63a0      	str	r0, [r4, #56]	; 0x38
 800960e:	e9c0 2300 	strd	r2, r3, [r0]
 8009612:	4b10      	ldr	r3, [pc, #64]	; (8009654 <rand+0x5c>)
 8009614:	2201      	movs	r2, #1
 8009616:	6083      	str	r3, [r0, #8]
 8009618:	230b      	movs	r3, #11
 800961a:	8183      	strh	r3, [r0, #12]
 800961c:	2300      	movs	r3, #0
 800961e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009624:	480c      	ldr	r0, [pc, #48]	; (8009658 <rand+0x60>)
 8009626:	690a      	ldr	r2, [r1, #16]
 8009628:	694b      	ldr	r3, [r1, #20]
 800962a:	4350      	muls	r0, r2
 800962c:	4c0b      	ldr	r4, [pc, #44]	; (800965c <rand+0x64>)
 800962e:	fb04 0003 	mla	r0, r4, r3, r0
 8009632:	fba2 2304 	umull	r2, r3, r2, r4
 8009636:	4403      	add	r3, r0
 8009638:	1c54      	adds	r4, r2, #1
 800963a:	f143 0500 	adc.w	r5, r3, #0
 800963e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8009642:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	2000000c 	.word	0x2000000c
 800964c:	abcd330e 	.word	0xabcd330e
 8009650:	e66d1234 	.word	0xe66d1234
 8009654:	0005deec 	.word	0x0005deec
 8009658:	5851f42d 	.word	0x5851f42d
 800965c:	4c957f2d 	.word	0x4c957f2d

08009660 <sniprintf>:
 8009660:	b40c      	push	{r2, r3}
 8009662:	b530      	push	{r4, r5, lr}
 8009664:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <sniprintf+0x64>)
 8009666:	1e0c      	subs	r4, r1, #0
 8009668:	b09d      	sub	sp, #116	; 0x74
 800966a:	681d      	ldr	r5, [r3, #0]
 800966c:	da08      	bge.n	8009680 <sniprintf+0x20>
 800966e:	238b      	movs	r3, #139	; 0x8b
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	602b      	str	r3, [r5, #0]
 8009676:	b01d      	add	sp, #116	; 0x74
 8009678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800967c:	b002      	add	sp, #8
 800967e:	4770      	bx	lr
 8009680:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009688:	bf0c      	ite	eq
 800968a:	4623      	moveq	r3, r4
 800968c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009698:	9002      	str	r0, [sp, #8]
 800969a:	9006      	str	r0, [sp, #24]
 800969c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096a2:	ab21      	add	r3, sp, #132	; 0x84
 80096a4:	a902      	add	r1, sp, #8
 80096a6:	4628      	mov	r0, r5
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	f000 f915 	bl	80098d8 <_svfiprintf_r>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	bfbc      	itt	lt
 80096b2:	238b      	movlt	r3, #139	; 0x8b
 80096b4:	602b      	strlt	r3, [r5, #0]
 80096b6:	2c00      	cmp	r4, #0
 80096b8:	d0dd      	beq.n	8009676 <sniprintf+0x16>
 80096ba:	2200      	movs	r2, #0
 80096bc:	9b02      	ldr	r3, [sp, #8]
 80096be:	701a      	strb	r2, [r3, #0]
 80096c0:	e7d9      	b.n	8009676 <sniprintf+0x16>
 80096c2:	bf00      	nop
 80096c4:	2000000c 	.word	0x2000000c

080096c8 <malloc>:
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <malloc+0xc>)
 80096ca:	4601      	mov	r1, r0
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f000 b84f 	b.w	8009770 <_malloc_r>
 80096d2:	bf00      	nop
 80096d4:	2000000c 	.word	0x2000000c

080096d8 <_free_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4605      	mov	r5, r0
 80096dc:	2900      	cmp	r1, #0
 80096de:	d043      	beq.n	8009768 <_free_r+0x90>
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f0c      	subs	r4, r1, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfb8      	it	lt
 80096ea:	18e4      	addlt	r4, r4, r3
 80096ec:	f000 fbb6 	bl	8009e5c <__malloc_lock>
 80096f0:	4a1e      	ldr	r2, [pc, #120]	; (800976c <_free_r+0x94>)
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	4610      	mov	r0, r2
 80096f6:	b933      	cbnz	r3, 8009706 <_free_r+0x2e>
 80096f8:	6063      	str	r3, [r4, #4]
 80096fa:	6014      	str	r4, [r2, #0]
 80096fc:	4628      	mov	r0, r5
 80096fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009702:	f000 bbac 	b.w	8009e5e <__malloc_unlock>
 8009706:	42a3      	cmp	r3, r4
 8009708:	d90b      	bls.n	8009722 <_free_r+0x4a>
 800970a:	6821      	ldr	r1, [r4, #0]
 800970c:	1862      	adds	r2, r4, r1
 800970e:	4293      	cmp	r3, r2
 8009710:	bf01      	itttt	eq
 8009712:	681a      	ldreq	r2, [r3, #0]
 8009714:	685b      	ldreq	r3, [r3, #4]
 8009716:	1852      	addeq	r2, r2, r1
 8009718:	6022      	streq	r2, [r4, #0]
 800971a:	6063      	str	r3, [r4, #4]
 800971c:	6004      	str	r4, [r0, #0]
 800971e:	e7ed      	b.n	80096fc <_free_r+0x24>
 8009720:	4613      	mov	r3, r2
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	b10a      	cbz	r2, 800972a <_free_r+0x52>
 8009726:	42a2      	cmp	r2, r4
 8009728:	d9fa      	bls.n	8009720 <_free_r+0x48>
 800972a:	6819      	ldr	r1, [r3, #0]
 800972c:	1858      	adds	r0, r3, r1
 800972e:	42a0      	cmp	r0, r4
 8009730:	d10b      	bne.n	800974a <_free_r+0x72>
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	4401      	add	r1, r0
 8009736:	1858      	adds	r0, r3, r1
 8009738:	4282      	cmp	r2, r0
 800973a:	6019      	str	r1, [r3, #0]
 800973c:	d1de      	bne.n	80096fc <_free_r+0x24>
 800973e:	6810      	ldr	r0, [r2, #0]
 8009740:	6852      	ldr	r2, [r2, #4]
 8009742:	4401      	add	r1, r0
 8009744:	6019      	str	r1, [r3, #0]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	e7d8      	b.n	80096fc <_free_r+0x24>
 800974a:	d902      	bls.n	8009752 <_free_r+0x7a>
 800974c:	230c      	movs	r3, #12
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	e7d4      	b.n	80096fc <_free_r+0x24>
 8009752:	6820      	ldr	r0, [r4, #0]
 8009754:	1821      	adds	r1, r4, r0
 8009756:	428a      	cmp	r2, r1
 8009758:	bf01      	itttt	eq
 800975a:	6811      	ldreq	r1, [r2, #0]
 800975c:	6852      	ldreq	r2, [r2, #4]
 800975e:	1809      	addeq	r1, r1, r0
 8009760:	6021      	streq	r1, [r4, #0]
 8009762:	6062      	str	r2, [r4, #4]
 8009764:	605c      	str	r4, [r3, #4]
 8009766:	e7c9      	b.n	80096fc <_free_r+0x24>
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	20000094 	.word	0x20000094

08009770 <_malloc_r>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	1ccd      	adds	r5, r1, #3
 8009774:	f025 0503 	bic.w	r5, r5, #3
 8009778:	3508      	adds	r5, #8
 800977a:	2d0c      	cmp	r5, #12
 800977c:	bf38      	it	cc
 800977e:	250c      	movcc	r5, #12
 8009780:	2d00      	cmp	r5, #0
 8009782:	4606      	mov	r6, r0
 8009784:	db01      	blt.n	800978a <_malloc_r+0x1a>
 8009786:	42a9      	cmp	r1, r5
 8009788:	d903      	bls.n	8009792 <_malloc_r+0x22>
 800978a:	230c      	movs	r3, #12
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	2000      	movs	r0, #0
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	f000 fb63 	bl	8009e5c <__malloc_lock>
 8009796:	4a21      	ldr	r2, [pc, #132]	; (800981c <_malloc_r+0xac>)
 8009798:	6814      	ldr	r4, [r2, #0]
 800979a:	4621      	mov	r1, r4
 800979c:	b991      	cbnz	r1, 80097c4 <_malloc_r+0x54>
 800979e:	4c20      	ldr	r4, [pc, #128]	; (8009820 <_malloc_r+0xb0>)
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	b91b      	cbnz	r3, 80097ac <_malloc_r+0x3c>
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 fb17 	bl	8009dd8 <_sbrk_r>
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	4629      	mov	r1, r5
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 fb12 	bl	8009dd8 <_sbrk_r>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d124      	bne.n	8009802 <_malloc_r+0x92>
 80097b8:	230c      	movs	r3, #12
 80097ba:	4630      	mov	r0, r6
 80097bc:	6033      	str	r3, [r6, #0]
 80097be:	f000 fb4e 	bl	8009e5e <__malloc_unlock>
 80097c2:	e7e4      	b.n	800978e <_malloc_r+0x1e>
 80097c4:	680b      	ldr	r3, [r1, #0]
 80097c6:	1b5b      	subs	r3, r3, r5
 80097c8:	d418      	bmi.n	80097fc <_malloc_r+0x8c>
 80097ca:	2b0b      	cmp	r3, #11
 80097cc:	d90f      	bls.n	80097ee <_malloc_r+0x7e>
 80097ce:	600b      	str	r3, [r1, #0]
 80097d0:	18cc      	adds	r4, r1, r3
 80097d2:	50cd      	str	r5, [r1, r3]
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 fb42 	bl	8009e5e <__malloc_unlock>
 80097da:	f104 000b 	add.w	r0, r4, #11
 80097de:	1d23      	adds	r3, r4, #4
 80097e0:	f020 0007 	bic.w	r0, r0, #7
 80097e4:	1ac3      	subs	r3, r0, r3
 80097e6:	d0d3      	beq.n	8009790 <_malloc_r+0x20>
 80097e8:	425a      	negs	r2, r3
 80097ea:	50e2      	str	r2, [r4, r3]
 80097ec:	e7d0      	b.n	8009790 <_malloc_r+0x20>
 80097ee:	684b      	ldr	r3, [r1, #4]
 80097f0:	428c      	cmp	r4, r1
 80097f2:	bf16      	itet	ne
 80097f4:	6063      	strne	r3, [r4, #4]
 80097f6:	6013      	streq	r3, [r2, #0]
 80097f8:	460c      	movne	r4, r1
 80097fa:	e7eb      	b.n	80097d4 <_malloc_r+0x64>
 80097fc:	460c      	mov	r4, r1
 80097fe:	6849      	ldr	r1, [r1, #4]
 8009800:	e7cc      	b.n	800979c <_malloc_r+0x2c>
 8009802:	1cc4      	adds	r4, r0, #3
 8009804:	f024 0403 	bic.w	r4, r4, #3
 8009808:	42a0      	cmp	r0, r4
 800980a:	d005      	beq.n	8009818 <_malloc_r+0xa8>
 800980c:	1a21      	subs	r1, r4, r0
 800980e:	4630      	mov	r0, r6
 8009810:	f000 fae2 	bl	8009dd8 <_sbrk_r>
 8009814:	3001      	adds	r0, #1
 8009816:	d0cf      	beq.n	80097b8 <_malloc_r+0x48>
 8009818:	6025      	str	r5, [r4, #0]
 800981a:	e7db      	b.n	80097d4 <_malloc_r+0x64>
 800981c:	20000094 	.word	0x20000094
 8009820:	20000098 	.word	0x20000098

08009824 <__ssputs_r>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	688e      	ldr	r6, [r1, #8]
 800982a:	4682      	mov	sl, r0
 800982c:	429e      	cmp	r6, r3
 800982e:	460c      	mov	r4, r1
 8009830:	4690      	mov	r8, r2
 8009832:	4699      	mov	r9, r3
 8009834:	d837      	bhi.n	80098a6 <__ssputs_r+0x82>
 8009836:	898a      	ldrh	r2, [r1, #12]
 8009838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800983c:	d031      	beq.n	80098a2 <__ssputs_r+0x7e>
 800983e:	2302      	movs	r3, #2
 8009840:	6825      	ldr	r5, [r4, #0]
 8009842:	6909      	ldr	r1, [r1, #16]
 8009844:	1a6f      	subs	r7, r5, r1
 8009846:	6965      	ldr	r5, [r4, #20]
 8009848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800984c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009850:	f109 0301 	add.w	r3, r9, #1
 8009854:	443b      	add	r3, r7
 8009856:	429d      	cmp	r5, r3
 8009858:	bf38      	it	cc
 800985a:	461d      	movcc	r5, r3
 800985c:	0553      	lsls	r3, r2, #21
 800985e:	d530      	bpl.n	80098c2 <__ssputs_r+0x9e>
 8009860:	4629      	mov	r1, r5
 8009862:	f7ff ff85 	bl	8009770 <_malloc_r>
 8009866:	4606      	mov	r6, r0
 8009868:	b950      	cbnz	r0, 8009880 <__ssputs_r+0x5c>
 800986a:	230c      	movs	r3, #12
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	f8ca 3000 	str.w	r3, [sl]
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	463a      	mov	r2, r7
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	f000 fac6 	bl	8009e14 <memcpy>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	6126      	str	r6, [r4, #16]
 8009896:	443e      	add	r6, r7
 8009898:	6026      	str	r6, [r4, #0]
 800989a:	464e      	mov	r6, r9
 800989c:	6165      	str	r5, [r4, #20]
 800989e:	1bed      	subs	r5, r5, r7
 80098a0:	60a5      	str	r5, [r4, #8]
 80098a2:	454e      	cmp	r6, r9
 80098a4:	d900      	bls.n	80098a8 <__ssputs_r+0x84>
 80098a6:	464e      	mov	r6, r9
 80098a8:	4632      	mov	r2, r6
 80098aa:	4641      	mov	r1, r8
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	f000 fabc 	bl	8009e2a <memmove>
 80098b2:	68a3      	ldr	r3, [r4, #8]
 80098b4:	2000      	movs	r0, #0
 80098b6:	1b9b      	subs	r3, r3, r6
 80098b8:	60a3      	str	r3, [r4, #8]
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	441e      	add	r6, r3
 80098be:	6026      	str	r6, [r4, #0]
 80098c0:	e7dc      	b.n	800987c <__ssputs_r+0x58>
 80098c2:	462a      	mov	r2, r5
 80098c4:	f000 facc 	bl	8009e60 <_realloc_r>
 80098c8:	4606      	mov	r6, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d1e2      	bne.n	8009894 <__ssputs_r+0x70>
 80098ce:	6921      	ldr	r1, [r4, #16]
 80098d0:	4650      	mov	r0, sl
 80098d2:	f7ff ff01 	bl	80096d8 <_free_r>
 80098d6:	e7c8      	b.n	800986a <__ssputs_r+0x46>

080098d8 <_svfiprintf_r>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	461d      	mov	r5, r3
 80098de:	898b      	ldrh	r3, [r1, #12]
 80098e0:	b09d      	sub	sp, #116	; 0x74
 80098e2:	061f      	lsls	r7, r3, #24
 80098e4:	4680      	mov	r8, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4616      	mov	r6, r2
 80098ea:	d50f      	bpl.n	800990c <_svfiprintf_r+0x34>
 80098ec:	690b      	ldr	r3, [r1, #16]
 80098ee:	b96b      	cbnz	r3, 800990c <_svfiprintf_r+0x34>
 80098f0:	2140      	movs	r1, #64	; 0x40
 80098f2:	f7ff ff3d 	bl	8009770 <_malloc_r>
 80098f6:	6020      	str	r0, [r4, #0]
 80098f8:	6120      	str	r0, [r4, #16]
 80098fa:	b928      	cbnz	r0, 8009908 <_svfiprintf_r+0x30>
 80098fc:	230c      	movs	r3, #12
 80098fe:	f8c8 3000 	str.w	r3, [r8]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	e0c8      	b.n	8009a9a <_svfiprintf_r+0x1c2>
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	2300      	movs	r3, #0
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	2320      	movs	r3, #32
 8009912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009916:	2330      	movs	r3, #48	; 0x30
 8009918:	f04f 0b01 	mov.w	fp, #1
 800991c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009920:	9503      	str	r5, [sp, #12]
 8009922:	4637      	mov	r7, r6
 8009924:	463d      	mov	r5, r7
 8009926:	f815 3b01 	ldrb.w	r3, [r5], #1
 800992a:	b10b      	cbz	r3, 8009930 <_svfiprintf_r+0x58>
 800992c:	2b25      	cmp	r3, #37	; 0x25
 800992e:	d13e      	bne.n	80099ae <_svfiprintf_r+0xd6>
 8009930:	ebb7 0a06 	subs.w	sl, r7, r6
 8009934:	d00b      	beq.n	800994e <_svfiprintf_r+0x76>
 8009936:	4653      	mov	r3, sl
 8009938:	4632      	mov	r2, r6
 800993a:	4621      	mov	r1, r4
 800993c:	4640      	mov	r0, r8
 800993e:	f7ff ff71 	bl	8009824 <__ssputs_r>
 8009942:	3001      	adds	r0, #1
 8009944:	f000 80a4 	beq.w	8009a90 <_svfiprintf_r+0x1b8>
 8009948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994a:	4453      	add	r3, sl
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	783b      	ldrb	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 809d 	beq.w	8009a90 <_svfiprintf_r+0x1b8>
 8009956:	2300      	movs	r3, #0
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009968:	931a      	str	r3, [sp, #104]	; 0x68
 800996a:	462f      	mov	r7, r5
 800996c:	2205      	movs	r2, #5
 800996e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009972:	4850      	ldr	r0, [pc, #320]	; (8009ab4 <_svfiprintf_r+0x1dc>)
 8009974:	f000 fa40 	bl	8009df8 <memchr>
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	b9d0      	cbnz	r0, 80099b2 <_svfiprintf_r+0xda>
 800997c:	06d9      	lsls	r1, r3, #27
 800997e:	bf44      	itt	mi
 8009980:	2220      	movmi	r2, #32
 8009982:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009986:	071a      	lsls	r2, r3, #28
 8009988:	bf44      	itt	mi
 800998a:	222b      	movmi	r2, #43	; 0x2b
 800998c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009990:	782a      	ldrb	r2, [r5, #0]
 8009992:	2a2a      	cmp	r2, #42	; 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xea>
 8009996:	462f      	mov	r7, r5
 8009998:	2000      	movs	r0, #0
 800999a:	250a      	movs	r5, #10
 800999c:	9a07      	ldr	r2, [sp, #28]
 800999e:	4639      	mov	r1, r7
 80099a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a4:	3b30      	subs	r3, #48	; 0x30
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d94d      	bls.n	8009a46 <_svfiprintf_r+0x16e>
 80099aa:	b1b8      	cbz	r0, 80099dc <_svfiprintf_r+0x104>
 80099ac:	e00f      	b.n	80099ce <_svfiprintf_r+0xf6>
 80099ae:	462f      	mov	r7, r5
 80099b0:	e7b8      	b.n	8009924 <_svfiprintf_r+0x4c>
 80099b2:	4a40      	ldr	r2, [pc, #256]	; (8009ab4 <_svfiprintf_r+0x1dc>)
 80099b4:	463d      	mov	r5, r7
 80099b6:	1a80      	subs	r0, r0, r2
 80099b8:	fa0b f000 	lsl.w	r0, fp, r0
 80099bc:	4318      	orrs	r0, r3
 80099be:	9004      	str	r0, [sp, #16]
 80099c0:	e7d3      	b.n	800996a <_svfiprintf_r+0x92>
 80099c2:	9a03      	ldr	r2, [sp, #12]
 80099c4:	1d11      	adds	r1, r2, #4
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	db01      	blt.n	80099d2 <_svfiprintf_r+0xfa>
 80099ce:	9207      	str	r2, [sp, #28]
 80099d0:	e004      	b.n	80099dc <_svfiprintf_r+0x104>
 80099d2:	4252      	negs	r2, r2
 80099d4:	f043 0302 	orr.w	r3, r3, #2
 80099d8:	9207      	str	r2, [sp, #28]
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	783b      	ldrb	r3, [r7, #0]
 80099de:	2b2e      	cmp	r3, #46	; 0x2e
 80099e0:	d10c      	bne.n	80099fc <_svfiprintf_r+0x124>
 80099e2:	787b      	ldrb	r3, [r7, #1]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d133      	bne.n	8009a50 <_svfiprintf_r+0x178>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	3702      	adds	r7, #2
 80099ec:	1d1a      	adds	r2, r3, #4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	9203      	str	r2, [sp, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfb8      	it	lt
 80099f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	4d2e      	ldr	r5, [pc, #184]	; (8009ab8 <_svfiprintf_r+0x1e0>)
 80099fe:	2203      	movs	r2, #3
 8009a00:	7839      	ldrb	r1, [r7, #0]
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f9f8 	bl	8009df8 <memchr>
 8009a08:	b138      	cbz	r0, 8009a1a <_svfiprintf_r+0x142>
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	1b40      	subs	r0, r0, r5
 8009a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a12:	9b04      	ldr	r3, [sp, #16]
 8009a14:	3701      	adds	r7, #1
 8009a16:	4303      	orrs	r3, r0
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	7839      	ldrb	r1, [r7, #0]
 8009a1c:	2206      	movs	r2, #6
 8009a1e:	4827      	ldr	r0, [pc, #156]	; (8009abc <_svfiprintf_r+0x1e4>)
 8009a20:	1c7e      	adds	r6, r7, #1
 8009a22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a26:	f000 f9e7 	bl	8009df8 <memchr>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d038      	beq.n	8009aa0 <_svfiprintf_r+0x1c8>
 8009a2e:	4b24      	ldr	r3, [pc, #144]	; (8009ac0 <_svfiprintf_r+0x1e8>)
 8009a30:	bb13      	cbnz	r3, 8009a78 <_svfiprintf_r+0x1a0>
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	3307      	adds	r3, #7
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	9303      	str	r3, [sp, #12]
 8009a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a40:	444b      	add	r3, r9
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	e76d      	b.n	8009922 <_svfiprintf_r+0x4a>
 8009a46:	fb05 3202 	mla	r2, r5, r2, r3
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	e7a6      	b.n	800999e <_svfiprintf_r+0xc6>
 8009a50:	2300      	movs	r3, #0
 8009a52:	250a      	movs	r5, #10
 8009a54:	4619      	mov	r1, r3
 8009a56:	3701      	adds	r7, #1
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a60:	3a30      	subs	r2, #48	; 0x30
 8009a62:	2a09      	cmp	r2, #9
 8009a64:	d903      	bls.n	8009a6e <_svfiprintf_r+0x196>
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0c8      	beq.n	80099fc <_svfiprintf_r+0x124>
 8009a6a:	9105      	str	r1, [sp, #20]
 8009a6c:	e7c6      	b.n	80099fc <_svfiprintf_r+0x124>
 8009a6e:	fb05 2101 	mla	r1, r5, r1, r2
 8009a72:	2301      	movs	r3, #1
 8009a74:	4607      	mov	r7, r0
 8009a76:	e7f0      	b.n	8009a5a <_svfiprintf_r+0x182>
 8009a78:	ab03      	add	r3, sp, #12
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <_svfiprintf_r+0x1ec>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	4640      	mov	r0, r8
 8009a84:	f3af 8000 	nop.w
 8009a88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	d1d6      	bne.n	8009a3e <_svfiprintf_r+0x166>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	065b      	lsls	r3, r3, #25
 8009a94:	f53f af35 	bmi.w	8009902 <_svfiprintf_r+0x2a>
 8009a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9a:	b01d      	add	sp, #116	; 0x74
 8009a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <_svfiprintf_r+0x1ec>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f000 f882 	bl	8009bb4 <_printf_i>
 8009ab0:	e7ea      	b.n	8009a88 <_svfiprintf_r+0x1b0>
 8009ab2:	bf00      	nop
 8009ab4:	0800b750 	.word	0x0800b750
 8009ab8:	0800b756 	.word	0x0800b756
 8009abc:	0800b75a 	.word	0x0800b75a
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	08009825 	.word	0x08009825

08009ac8 <_printf_common>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	4691      	mov	r9, r2
 8009ace:	461f      	mov	r7, r3
 8009ad0:	688a      	ldr	r2, [r1, #8]
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	bfb8      	it	lt
 8009ada:	4613      	movlt	r3, r2
 8009adc:	f8c9 3000 	str.w	r3, [r9]
 8009ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aea:	b112      	cbz	r2, 8009af2 <_printf_common+0x2a>
 8009aec:	3301      	adds	r3, #1
 8009aee:	f8c9 3000 	str.w	r3, [r9]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	0699      	lsls	r1, r3, #26
 8009af6:	bf42      	ittt	mi
 8009af8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009afc:	3302      	addmi	r3, #2
 8009afe:	f8c9 3000 	strmi.w	r3, [r9]
 8009b02:	6825      	ldr	r5, [r4, #0]
 8009b04:	f015 0506 	ands.w	r5, r5, #6
 8009b08:	d107      	bne.n	8009b1a <_printf_common+0x52>
 8009b0a:	f104 0a19 	add.w	sl, r4, #25
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	f8d9 2000 	ldr.w	r2, [r9]
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	42ab      	cmp	r3, r5
 8009b18:	dc29      	bgt.n	8009b6e <_printf_common+0xa6>
 8009b1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	3300      	adds	r3, #0
 8009b22:	bf18      	it	ne
 8009b24:	2301      	movne	r3, #1
 8009b26:	0692      	lsls	r2, r2, #26
 8009b28:	d42e      	bmi.n	8009b88 <_printf_common+0xc0>
 8009b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b2e:	4639      	mov	r1, r7
 8009b30:	4630      	mov	r0, r6
 8009b32:	47c0      	blx	r8
 8009b34:	3001      	adds	r0, #1
 8009b36:	d021      	beq.n	8009b7c <_printf_common+0xb4>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	68e5      	ldr	r5, [r4, #12]
 8009b3c:	f003 0306 	and.w	r3, r3, #6
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	bf18      	it	ne
 8009b44:	2500      	movne	r5, #0
 8009b46:	f8d9 2000 	ldr.w	r2, [r9]
 8009b4a:	f04f 0900 	mov.w	r9, #0
 8009b4e:	bf08      	it	eq
 8009b50:	1aad      	subeq	r5, r5, r2
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	bf08      	it	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	bfc4      	itt	gt
 8009b60:	1a9b      	subgt	r3, r3, r2
 8009b62:	18ed      	addgt	r5, r5, r3
 8009b64:	341a      	adds	r4, #26
 8009b66:	454d      	cmp	r5, r9
 8009b68:	d11a      	bne.n	8009ba0 <_printf_common+0xd8>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e008      	b.n	8009b80 <_printf_common+0xb8>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4652      	mov	r2, sl
 8009b72:	4639      	mov	r1, r7
 8009b74:	4630      	mov	r0, r6
 8009b76:	47c0      	blx	r8
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d103      	bne.n	8009b84 <_printf_common+0xbc>
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	3501      	adds	r5, #1
 8009b86:	e7c2      	b.n	8009b0e <_printf_common+0x46>
 8009b88:	2030      	movs	r0, #48	; 0x30
 8009b8a:	18e1      	adds	r1, r4, r3
 8009b8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b96:	4422      	add	r2, r4
 8009b98:	3302      	adds	r3, #2
 8009b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b9e:	e7c4      	b.n	8009b2a <_printf_common+0x62>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	47c0      	blx	r8
 8009baa:	3001      	adds	r0, #1
 8009bac:	d0e6      	beq.n	8009b7c <_printf_common+0xb4>
 8009bae:	f109 0901 	add.w	r9, r9, #1
 8009bb2:	e7d8      	b.n	8009b66 <_printf_common+0x9e>

08009bb4 <_printf_i>:
 8009bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	7e09      	ldrb	r1, [r1, #24]
 8009bc0:	b085      	sub	sp, #20
 8009bc2:	296e      	cmp	r1, #110	; 0x6e
 8009bc4:	4617      	mov	r7, r2
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	4698      	mov	r8, r3
 8009bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bcc:	f000 80b3 	beq.w	8009d36 <_printf_i+0x182>
 8009bd0:	d822      	bhi.n	8009c18 <_printf_i+0x64>
 8009bd2:	2963      	cmp	r1, #99	; 0x63
 8009bd4:	d036      	beq.n	8009c44 <_printf_i+0x90>
 8009bd6:	d80a      	bhi.n	8009bee <_printf_i+0x3a>
 8009bd8:	2900      	cmp	r1, #0
 8009bda:	f000 80b9 	beq.w	8009d50 <_printf_i+0x19c>
 8009bde:	2958      	cmp	r1, #88	; 0x58
 8009be0:	f000 8083 	beq.w	8009cea <_printf_i+0x136>
 8009be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009bec:	e032      	b.n	8009c54 <_printf_i+0xa0>
 8009bee:	2964      	cmp	r1, #100	; 0x64
 8009bf0:	d001      	beq.n	8009bf6 <_printf_i+0x42>
 8009bf2:	2969      	cmp	r1, #105	; 0x69
 8009bf4:	d1f6      	bne.n	8009be4 <_printf_i+0x30>
 8009bf6:	6820      	ldr	r0, [r4, #0]
 8009bf8:	6813      	ldr	r3, [r2, #0]
 8009bfa:	0605      	lsls	r5, r0, #24
 8009bfc:	f103 0104 	add.w	r1, r3, #4
 8009c00:	d52a      	bpl.n	8009c58 <_printf_i+0xa4>
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6011      	str	r1, [r2, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da03      	bge.n	8009c12 <_printf_i+0x5e>
 8009c0a:	222d      	movs	r2, #45	; 0x2d
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c12:	486f      	ldr	r0, [pc, #444]	; (8009dd0 <_printf_i+0x21c>)
 8009c14:	220a      	movs	r2, #10
 8009c16:	e039      	b.n	8009c8c <_printf_i+0xd8>
 8009c18:	2973      	cmp	r1, #115	; 0x73
 8009c1a:	f000 809d 	beq.w	8009d58 <_printf_i+0x1a4>
 8009c1e:	d808      	bhi.n	8009c32 <_printf_i+0x7e>
 8009c20:	296f      	cmp	r1, #111	; 0x6f
 8009c22:	d020      	beq.n	8009c66 <_printf_i+0xb2>
 8009c24:	2970      	cmp	r1, #112	; 0x70
 8009c26:	d1dd      	bne.n	8009be4 <_printf_i+0x30>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	f043 0320 	orr.w	r3, r3, #32
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	e003      	b.n	8009c3a <_printf_i+0x86>
 8009c32:	2975      	cmp	r1, #117	; 0x75
 8009c34:	d017      	beq.n	8009c66 <_printf_i+0xb2>
 8009c36:	2978      	cmp	r1, #120	; 0x78
 8009c38:	d1d4      	bne.n	8009be4 <_printf_i+0x30>
 8009c3a:	2378      	movs	r3, #120	; 0x78
 8009c3c:	4865      	ldr	r0, [pc, #404]	; (8009dd4 <_printf_i+0x220>)
 8009c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c42:	e055      	b.n	8009cf0 <_printf_i+0x13c>
 8009c44:	6813      	ldr	r3, [r2, #0]
 8009c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c4a:	1d19      	adds	r1, r3, #4
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6011      	str	r1, [r2, #0]
 8009c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c54:	2301      	movs	r3, #1
 8009c56:	e08c      	b.n	8009d72 <_printf_i+0x1be>
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c5e:	6011      	str	r1, [r2, #0]
 8009c60:	bf18      	it	ne
 8009c62:	b21b      	sxthne	r3, r3
 8009c64:	e7cf      	b.n	8009c06 <_printf_i+0x52>
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	6825      	ldr	r5, [r4, #0]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6010      	str	r0, [r2, #0]
 8009c6e:	0628      	lsls	r0, r5, #24
 8009c70:	d501      	bpl.n	8009c76 <_printf_i+0xc2>
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	e002      	b.n	8009c7c <_printf_i+0xc8>
 8009c76:	0668      	lsls	r0, r5, #25
 8009c78:	d5fb      	bpl.n	8009c72 <_printf_i+0xbe>
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	296f      	cmp	r1, #111	; 0x6f
 8009c7e:	bf14      	ite	ne
 8009c80:	220a      	movne	r2, #10
 8009c82:	2208      	moveq	r2, #8
 8009c84:	4852      	ldr	r0, [pc, #328]	; (8009dd0 <_printf_i+0x21c>)
 8009c86:	2100      	movs	r1, #0
 8009c88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c8c:	6865      	ldr	r5, [r4, #4]
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	60a5      	str	r5, [r4, #8]
 8009c92:	f2c0 8095 	blt.w	8009dc0 <_printf_i+0x20c>
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	f021 0104 	bic.w	r1, r1, #4
 8009c9c:	6021      	str	r1, [r4, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d13d      	bne.n	8009d1e <_printf_i+0x16a>
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	f040 808e 	bne.w	8009dc4 <_printf_i+0x210>
 8009ca8:	4665      	mov	r5, ip
 8009caa:	2a08      	cmp	r2, #8
 8009cac:	d10b      	bne.n	8009cc6 <_printf_i+0x112>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	07db      	lsls	r3, r3, #31
 8009cb2:	d508      	bpl.n	8009cc6 <_printf_i+0x112>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	6862      	ldr	r2, [r4, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bfde      	ittt	le
 8009cbc:	2330      	movle	r3, #48	; 0x30
 8009cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cc6:	ebac 0305 	sub.w	r3, ip, r5
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	f8cd 8000 	str.w	r8, [sp]
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	aa03      	add	r2, sp, #12
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7ff fef6 	bl	8009ac8 <_printf_common>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d14d      	bne.n	8009d7c <_printf_i+0x1c8>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	b005      	add	sp, #20
 8009ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cea:	4839      	ldr	r0, [pc, #228]	; (8009dd0 <_printf_i+0x21c>)
 8009cec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009cf0:	6813      	ldr	r3, [r2, #0]
 8009cf2:	6821      	ldr	r1, [r4, #0]
 8009cf4:	1d1d      	adds	r5, r3, #4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6015      	str	r5, [r2, #0]
 8009cfa:	060a      	lsls	r2, r1, #24
 8009cfc:	d50b      	bpl.n	8009d16 <_printf_i+0x162>
 8009cfe:	07ca      	lsls	r2, r1, #31
 8009d00:	bf44      	itt	mi
 8009d02:	f041 0120 	orrmi.w	r1, r1, #32
 8009d06:	6021      	strmi	r1, [r4, #0]
 8009d08:	b91b      	cbnz	r3, 8009d12 <_printf_i+0x15e>
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	f022 0220 	bic.w	r2, r2, #32
 8009d10:	6022      	str	r2, [r4, #0]
 8009d12:	2210      	movs	r2, #16
 8009d14:	e7b7      	b.n	8009c86 <_printf_i+0xd2>
 8009d16:	064d      	lsls	r5, r1, #25
 8009d18:	bf48      	it	mi
 8009d1a:	b29b      	uxthmi	r3, r3
 8009d1c:	e7ef      	b.n	8009cfe <_printf_i+0x14a>
 8009d1e:	4665      	mov	r5, ip
 8009d20:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d24:	fb02 3311 	mls	r3, r2, r1, r3
 8009d28:	5cc3      	ldrb	r3, [r0, r3]
 8009d2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d2e:	460b      	mov	r3, r1
 8009d30:	2900      	cmp	r1, #0
 8009d32:	d1f5      	bne.n	8009d20 <_printf_i+0x16c>
 8009d34:	e7b9      	b.n	8009caa <_printf_i+0xf6>
 8009d36:	6813      	ldr	r3, [r2, #0]
 8009d38:	6825      	ldr	r5, [r4, #0]
 8009d3a:	1d18      	adds	r0, r3, #4
 8009d3c:	6961      	ldr	r1, [r4, #20]
 8009d3e:	6010      	str	r0, [r2, #0]
 8009d40:	0628      	lsls	r0, r5, #24
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	d501      	bpl.n	8009d4a <_printf_i+0x196>
 8009d46:	6019      	str	r1, [r3, #0]
 8009d48:	e002      	b.n	8009d50 <_printf_i+0x19c>
 8009d4a:	066a      	lsls	r2, r5, #25
 8009d4c:	d5fb      	bpl.n	8009d46 <_printf_i+0x192>
 8009d4e:	8019      	strh	r1, [r3, #0]
 8009d50:	2300      	movs	r3, #0
 8009d52:	4665      	mov	r5, ip
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	e7b9      	b.n	8009ccc <_printf_i+0x118>
 8009d58:	6813      	ldr	r3, [r2, #0]
 8009d5a:	1d19      	adds	r1, r3, #4
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	681d      	ldr	r5, [r3, #0]
 8009d60:	6862      	ldr	r2, [r4, #4]
 8009d62:	2100      	movs	r1, #0
 8009d64:	4628      	mov	r0, r5
 8009d66:	f000 f847 	bl	8009df8 <memchr>
 8009d6a:	b108      	cbz	r0, 8009d70 <_printf_i+0x1bc>
 8009d6c:	1b40      	subs	r0, r0, r5
 8009d6e:	6060      	str	r0, [r4, #4]
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	2300      	movs	r3, #0
 8009d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7a:	e7a7      	b.n	8009ccc <_printf_i+0x118>
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4639      	mov	r1, r7
 8009d82:	4630      	mov	r0, r6
 8009d84:	47c0      	blx	r8
 8009d86:	3001      	adds	r0, #1
 8009d88:	d0aa      	beq.n	8009ce0 <_printf_i+0x12c>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	079b      	lsls	r3, r3, #30
 8009d8e:	d413      	bmi.n	8009db8 <_printf_i+0x204>
 8009d90:	68e0      	ldr	r0, [r4, #12]
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	4298      	cmp	r0, r3
 8009d96:	bfb8      	it	lt
 8009d98:	4618      	movlt	r0, r3
 8009d9a:	e7a3      	b.n	8009ce4 <_printf_i+0x130>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	464a      	mov	r2, r9
 8009da0:	4639      	mov	r1, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	47c0      	blx	r8
 8009da6:	3001      	adds	r0, #1
 8009da8:	d09a      	beq.n	8009ce0 <_printf_i+0x12c>
 8009daa:	3501      	adds	r5, #1
 8009dac:	68e3      	ldr	r3, [r4, #12]
 8009dae:	9a03      	ldr	r2, [sp, #12]
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	42ab      	cmp	r3, r5
 8009db4:	dcf2      	bgt.n	8009d9c <_printf_i+0x1e8>
 8009db6:	e7eb      	b.n	8009d90 <_printf_i+0x1dc>
 8009db8:	2500      	movs	r5, #0
 8009dba:	f104 0919 	add.w	r9, r4, #25
 8009dbe:	e7f5      	b.n	8009dac <_printf_i+0x1f8>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1ac      	bne.n	8009d1e <_printf_i+0x16a>
 8009dc4:	7803      	ldrb	r3, [r0, #0]
 8009dc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dce:	e76c      	b.n	8009caa <_printf_i+0xf6>
 8009dd0:	0800b761 	.word	0x0800b761
 8009dd4:	0800b772 	.word	0x0800b772

08009dd8 <_sbrk_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4c05      	ldr	r4, [pc, #20]	; (8009df4 <_sbrk_r+0x1c>)
 8009dde:	4605      	mov	r5, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	f7ff fad2 	bl	800938c <_sbrk>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_sbrk_r+0x1a>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_sbrk_r+0x1a>
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	20000de0 	.word	0x20000de0

08009df8 <memchr>:
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	b2c9      	uxtb	r1, r1
 8009dfc:	4402      	add	r2, r0
 8009dfe:	4290      	cmp	r0, r2
 8009e00:	4603      	mov	r3, r0
 8009e02:	d101      	bne.n	8009e08 <memchr+0x10>
 8009e04:	2300      	movs	r3, #0
 8009e06:	e003      	b.n	8009e10 <memchr+0x18>
 8009e08:	781c      	ldrb	r4, [r3, #0]
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	428c      	cmp	r4, r1
 8009e0e:	d1f6      	bne.n	8009dfe <memchr+0x6>
 8009e10:	4618      	mov	r0, r3
 8009e12:	bd10      	pop	{r4, pc}

08009e14 <memcpy>:
 8009e14:	b510      	push	{r4, lr}
 8009e16:	1e43      	subs	r3, r0, #1
 8009e18:	440a      	add	r2, r1
 8009e1a:	4291      	cmp	r1, r2
 8009e1c:	d100      	bne.n	8009e20 <memcpy+0xc>
 8009e1e:	bd10      	pop	{r4, pc}
 8009e20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e28:	e7f7      	b.n	8009e1a <memcpy+0x6>

08009e2a <memmove>:
 8009e2a:	4288      	cmp	r0, r1
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	eb01 0302 	add.w	r3, r1, r2
 8009e32:	d807      	bhi.n	8009e44 <memmove+0x1a>
 8009e34:	1e42      	subs	r2, r0, #1
 8009e36:	4299      	cmp	r1, r3
 8009e38:	d00a      	beq.n	8009e50 <memmove+0x26>
 8009e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e42:	e7f8      	b.n	8009e36 <memmove+0xc>
 8009e44:	4283      	cmp	r3, r0
 8009e46:	d9f5      	bls.n	8009e34 <memmove+0xa>
 8009e48:	1881      	adds	r1, r0, r2
 8009e4a:	1ad2      	subs	r2, r2, r3
 8009e4c:	42d3      	cmn	r3, r2
 8009e4e:	d100      	bne.n	8009e52 <memmove+0x28>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e5a:	e7f7      	b.n	8009e4c <memmove+0x22>

08009e5c <__malloc_lock>:
 8009e5c:	4770      	bx	lr

08009e5e <__malloc_unlock>:
 8009e5e:	4770      	bx	lr

08009e60 <_realloc_r>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	4607      	mov	r7, r0
 8009e64:	4614      	mov	r4, r2
 8009e66:	460e      	mov	r6, r1
 8009e68:	b921      	cbnz	r1, 8009e74 <_realloc_r+0x14>
 8009e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e6e:	4611      	mov	r1, r2
 8009e70:	f7ff bc7e 	b.w	8009770 <_malloc_r>
 8009e74:	b922      	cbnz	r2, 8009e80 <_realloc_r+0x20>
 8009e76:	f7ff fc2f 	bl	80096d8 <_free_r>
 8009e7a:	4625      	mov	r5, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e80:	f000 f814 	bl	8009eac <_malloc_usable_size_r>
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	d20f      	bcs.n	8009ea8 <_realloc_r+0x48>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	f7ff fc70 	bl	8009770 <_malloc_r>
 8009e90:	4605      	mov	r5, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d0f2      	beq.n	8009e7c <_realloc_r+0x1c>
 8009e96:	4631      	mov	r1, r6
 8009e98:	4622      	mov	r2, r4
 8009e9a:	f7ff ffbb 	bl	8009e14 <memcpy>
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff fc19 	bl	80096d8 <_free_r>
 8009ea6:	e7e9      	b.n	8009e7c <_realloc_r+0x1c>
 8009ea8:	4635      	mov	r5, r6
 8009eaa:	e7e7      	b.n	8009e7c <_realloc_r+0x1c>

08009eac <_malloc_usable_size_r>:
 8009eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb0:	1f18      	subs	r0, r3, #4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfbc      	itt	lt
 8009eb6:	580b      	ldrlt	r3, [r1, r0]
 8009eb8:	18c0      	addlt	r0, r0, r3
 8009eba:	4770      	bx	lr

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr
